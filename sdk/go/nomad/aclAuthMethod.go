// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ACL Auth Method in Nomad.
//
// ## Example Usage
//
// Creating an ALC Auth Method:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-nomad/sdk/go/nomad"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nomad.NewAclAuthMethod(ctx, "myNomadAclAuthMethod", &nomad.AclAuthMethodArgs{
//				Type:          pulumi.String("OIDC"),
//				TokenLocality: pulumi.String("global"),
//				MaxTokenTtl:   pulumi.String("10m0s"),
//				Default:       pulumi.Bool(true),
//				Config: &nomad.AclAuthMethodConfigArgs{
//					OidcDiscoveryUrl: pulumi.String("https://uk.auth0.com/"),
//					OidcClientId:     pulumi.String("someclientid"),
//					OidcClientSecret: pulumi.String("someclientsecret-t"),
//					BoundAudiences: pulumi.StringArray{
//						pulumi.String("someclientid"),
//					},
//					AllowedRedirectUris: pulumi.StringArray{
//						pulumi.String("http://localhost:4649/oidc/callback"),
//						pulumi.String("http://localhost:4646/ui/settings/tokens"),
//					},
//					ListClaimMappings: pulumi.StringMap{
//						"http://nomad.internal/roles": pulumi.String("roles"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AclAuthMethod struct {
	pulumi.CustomResourceState

	// Configuration specific to the auth method provider.
	Config AclAuthMethodConfigOutput `pulumi:"config"`
	// `(bool: false)` - Defines whether this ACL Auth Method is to be set
	// as default.
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// `(string: <required>)` - Defines the maximum life of a token
	// created by this method and is specified as a time duration such as "15h".
	MaxTokenTtl pulumi.StringOutput `pulumi:"maxTokenTtl"`
	// `(string: <required>)` - The identifier of the ACL Auth Method.
	Name pulumi.StringOutput `pulumi:"name"`
	// `(string: <required>)` - Defines whether the ACL Auth Method
	// creates a local or global token when performing SSO login. This field must be
	// set to either `local` or `global`.
	TokenLocality pulumi.StringOutput `pulumi:"tokenLocality"`
	// `(string: <required>)` - ACL Auth Method SSO workflow type. Currently,
	// the only supported type is `OIDC`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAclAuthMethod registers a new resource with the given unique name, arguments, and options.
func NewAclAuthMethod(ctx *pulumi.Context,
	name string, args *AclAuthMethodArgs, opts ...pulumi.ResourceOption) (*AclAuthMethod, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.MaxTokenTtl == nil {
		return nil, errors.New("invalid value for required argument 'MaxTokenTtl'")
	}
	if args.TokenLocality == nil {
		return nil, errors.New("invalid value for required argument 'TokenLocality'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource AclAuthMethod
	err := ctx.RegisterResource("nomad:index/aclAuthMethod:AclAuthMethod", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclAuthMethod gets an existing AclAuthMethod resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclAuthMethod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclAuthMethodState, opts ...pulumi.ResourceOption) (*AclAuthMethod, error) {
	var resource AclAuthMethod
	err := ctx.ReadResource("nomad:index/aclAuthMethod:AclAuthMethod", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclAuthMethod resources.
type aclAuthMethodState struct {
	// Configuration specific to the auth method provider.
	Config *AclAuthMethodConfig `pulumi:"config"`
	// `(bool: false)` - Defines whether this ACL Auth Method is to be set
	// as default.
	Default *bool `pulumi:"default"`
	// `(string: <required>)` - Defines the maximum life of a token
	// created by this method and is specified as a time duration such as "15h".
	MaxTokenTtl *string `pulumi:"maxTokenTtl"`
	// `(string: <required>)` - The identifier of the ACL Auth Method.
	Name *string `pulumi:"name"`
	// `(string: <required>)` - Defines whether the ACL Auth Method
	// creates a local or global token when performing SSO login. This field must be
	// set to either `local` or `global`.
	TokenLocality *string `pulumi:"tokenLocality"`
	// `(string: <required>)` - ACL Auth Method SSO workflow type. Currently,
	// the only supported type is `OIDC`.
	Type *string `pulumi:"type"`
}

type AclAuthMethodState struct {
	// Configuration specific to the auth method provider.
	Config AclAuthMethodConfigPtrInput
	// `(bool: false)` - Defines whether this ACL Auth Method is to be set
	// as default.
	Default pulumi.BoolPtrInput
	// `(string: <required>)` - Defines the maximum life of a token
	// created by this method and is specified as a time duration such as "15h".
	MaxTokenTtl pulumi.StringPtrInput
	// `(string: <required>)` - The identifier of the ACL Auth Method.
	Name pulumi.StringPtrInput
	// `(string: <required>)` - Defines whether the ACL Auth Method
	// creates a local or global token when performing SSO login. This field must be
	// set to either `local` or `global`.
	TokenLocality pulumi.StringPtrInput
	// `(string: <required>)` - ACL Auth Method SSO workflow type. Currently,
	// the only supported type is `OIDC`.
	Type pulumi.StringPtrInput
}

func (AclAuthMethodState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclAuthMethodState)(nil)).Elem()
}

type aclAuthMethodArgs struct {
	// Configuration specific to the auth method provider.
	Config AclAuthMethodConfig `pulumi:"config"`
	// `(bool: false)` - Defines whether this ACL Auth Method is to be set
	// as default.
	Default *bool `pulumi:"default"`
	// `(string: <required>)` - Defines the maximum life of a token
	// created by this method and is specified as a time duration such as "15h".
	MaxTokenTtl string `pulumi:"maxTokenTtl"`
	// `(string: <required>)` - The identifier of the ACL Auth Method.
	Name *string `pulumi:"name"`
	// `(string: <required>)` - Defines whether the ACL Auth Method
	// creates a local or global token when performing SSO login. This field must be
	// set to either `local` or `global`.
	TokenLocality string `pulumi:"tokenLocality"`
	// `(string: <required>)` - ACL Auth Method SSO workflow type. Currently,
	// the only supported type is `OIDC`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a AclAuthMethod resource.
type AclAuthMethodArgs struct {
	// Configuration specific to the auth method provider.
	Config AclAuthMethodConfigInput
	// `(bool: false)` - Defines whether this ACL Auth Method is to be set
	// as default.
	Default pulumi.BoolPtrInput
	// `(string: <required>)` - Defines the maximum life of a token
	// created by this method and is specified as a time duration such as "15h".
	MaxTokenTtl pulumi.StringInput
	// `(string: <required>)` - The identifier of the ACL Auth Method.
	Name pulumi.StringPtrInput
	// `(string: <required>)` - Defines whether the ACL Auth Method
	// creates a local or global token when performing SSO login. This field must be
	// set to either `local` or `global`.
	TokenLocality pulumi.StringInput
	// `(string: <required>)` - ACL Auth Method SSO workflow type. Currently,
	// the only supported type is `OIDC`.
	Type pulumi.StringInput
}

func (AclAuthMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclAuthMethodArgs)(nil)).Elem()
}

type AclAuthMethodInput interface {
	pulumi.Input

	ToAclAuthMethodOutput() AclAuthMethodOutput
	ToAclAuthMethodOutputWithContext(ctx context.Context) AclAuthMethodOutput
}

func (*AclAuthMethod) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAuthMethod)(nil)).Elem()
}

func (i *AclAuthMethod) ToAclAuthMethodOutput() AclAuthMethodOutput {
	return i.ToAclAuthMethodOutputWithContext(context.Background())
}

func (i *AclAuthMethod) ToAclAuthMethodOutputWithContext(ctx context.Context) AclAuthMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodOutput)
}

// AclAuthMethodArrayInput is an input type that accepts AclAuthMethodArray and AclAuthMethodArrayOutput values.
// You can construct a concrete instance of `AclAuthMethodArrayInput` via:
//
//	AclAuthMethodArray{ AclAuthMethodArgs{...} }
type AclAuthMethodArrayInput interface {
	pulumi.Input

	ToAclAuthMethodArrayOutput() AclAuthMethodArrayOutput
	ToAclAuthMethodArrayOutputWithContext(context.Context) AclAuthMethodArrayOutput
}

type AclAuthMethodArray []AclAuthMethodInput

func (AclAuthMethodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclAuthMethod)(nil)).Elem()
}

func (i AclAuthMethodArray) ToAclAuthMethodArrayOutput() AclAuthMethodArrayOutput {
	return i.ToAclAuthMethodArrayOutputWithContext(context.Background())
}

func (i AclAuthMethodArray) ToAclAuthMethodArrayOutputWithContext(ctx context.Context) AclAuthMethodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodArrayOutput)
}

// AclAuthMethodMapInput is an input type that accepts AclAuthMethodMap and AclAuthMethodMapOutput values.
// You can construct a concrete instance of `AclAuthMethodMapInput` via:
//
//	AclAuthMethodMap{ "key": AclAuthMethodArgs{...} }
type AclAuthMethodMapInput interface {
	pulumi.Input

	ToAclAuthMethodMapOutput() AclAuthMethodMapOutput
	ToAclAuthMethodMapOutputWithContext(context.Context) AclAuthMethodMapOutput
}

type AclAuthMethodMap map[string]AclAuthMethodInput

func (AclAuthMethodMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclAuthMethod)(nil)).Elem()
}

func (i AclAuthMethodMap) ToAclAuthMethodMapOutput() AclAuthMethodMapOutput {
	return i.ToAclAuthMethodMapOutputWithContext(context.Background())
}

func (i AclAuthMethodMap) ToAclAuthMethodMapOutputWithContext(ctx context.Context) AclAuthMethodMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodMapOutput)
}

type AclAuthMethodOutput struct{ *pulumi.OutputState }

func (AclAuthMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAuthMethod)(nil)).Elem()
}

func (o AclAuthMethodOutput) ToAclAuthMethodOutput() AclAuthMethodOutput {
	return o
}

func (o AclAuthMethodOutput) ToAclAuthMethodOutputWithContext(ctx context.Context) AclAuthMethodOutput {
	return o
}

// Configuration specific to the auth method provider.
func (o AclAuthMethodOutput) Config() AclAuthMethodConfigOutput {
	return o.ApplyT(func(v *AclAuthMethod) AclAuthMethodConfigOutput { return v.Config }).(AclAuthMethodConfigOutput)
}

// `(bool: false)` - Defines whether this ACL Auth Method is to be set
// as default.
func (o AclAuthMethodOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// `(string: <required>)` - Defines the maximum life of a token
// created by this method and is specified as a time duration such as "15h".
func (o AclAuthMethodOutput) MaxTokenTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringOutput { return v.MaxTokenTtl }).(pulumi.StringOutput)
}

// `(string: <required>)` - The identifier of the ACL Auth Method.
func (o AclAuthMethodOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `(string: <required>)` - Defines whether the ACL Auth Method
// creates a local or global token when performing SSO login. This field must be
// set to either `local` or `global`.
func (o AclAuthMethodOutput) TokenLocality() pulumi.StringOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringOutput { return v.TokenLocality }).(pulumi.StringOutput)
}

// `(string: <required>)` - ACL Auth Method SSO workflow type. Currently,
// the only supported type is `OIDC`.
func (o AclAuthMethodOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AclAuthMethod) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AclAuthMethodArrayOutput struct{ *pulumi.OutputState }

func (AclAuthMethodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclAuthMethod)(nil)).Elem()
}

func (o AclAuthMethodArrayOutput) ToAclAuthMethodArrayOutput() AclAuthMethodArrayOutput {
	return o
}

func (o AclAuthMethodArrayOutput) ToAclAuthMethodArrayOutputWithContext(ctx context.Context) AclAuthMethodArrayOutput {
	return o
}

func (o AclAuthMethodArrayOutput) Index(i pulumi.IntInput) AclAuthMethodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclAuthMethod {
		return vs[0].([]*AclAuthMethod)[vs[1].(int)]
	}).(AclAuthMethodOutput)
}

type AclAuthMethodMapOutput struct{ *pulumi.OutputState }

func (AclAuthMethodMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclAuthMethod)(nil)).Elem()
}

func (o AclAuthMethodMapOutput) ToAclAuthMethodMapOutput() AclAuthMethodMapOutput {
	return o
}

func (o AclAuthMethodMapOutput) ToAclAuthMethodMapOutputWithContext(ctx context.Context) AclAuthMethodMapOutput {
	return o
}

func (o AclAuthMethodMapOutput) MapIndex(k pulumi.StringInput) AclAuthMethodOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclAuthMethod {
		return vs[0].(map[string]*AclAuthMethod)[vs[1].(string)]
	}).(AclAuthMethodOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodInput)(nil)).Elem(), &AclAuthMethod{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodArrayInput)(nil)).Elem(), AclAuthMethodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodMapInput)(nil)).Elem(), AclAuthMethodMap{})
	pulumi.RegisterOutputType(AclAuthMethodOutput{})
	pulumi.RegisterOutputType(AclAuthMethodArrayOutput{})
	pulumi.RegisterOutputType(AclAuthMethodMapOutput{})
}
