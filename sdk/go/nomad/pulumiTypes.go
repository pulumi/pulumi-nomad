// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ExternalVolumeCapability struct {
	AccessMode     string `pulumi:"accessMode"`
	AttachmentMode string `pulumi:"attachmentMode"`
}

// ExternalVolumeCapabilityInput is an input type that accepts ExternalVolumeCapabilityArgs and ExternalVolumeCapabilityOutput values.
// You can construct a concrete instance of `ExternalVolumeCapabilityInput` via:
//
//          ExternalVolumeCapabilityArgs{...}
type ExternalVolumeCapabilityInput interface {
	pulumi.Input

	ToExternalVolumeCapabilityOutput() ExternalVolumeCapabilityOutput
	ToExternalVolumeCapabilityOutputWithContext(context.Context) ExternalVolumeCapabilityOutput
}

type ExternalVolumeCapabilityArgs struct {
	AccessMode     pulumi.StringInput `pulumi:"accessMode"`
	AttachmentMode pulumi.StringInput `pulumi:"attachmentMode"`
}

func (ExternalVolumeCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeCapability)(nil)).Elem()
}

func (i ExternalVolumeCapabilityArgs) ToExternalVolumeCapabilityOutput() ExternalVolumeCapabilityOutput {
	return i.ToExternalVolumeCapabilityOutputWithContext(context.Background())
}

func (i ExternalVolumeCapabilityArgs) ToExternalVolumeCapabilityOutputWithContext(ctx context.Context) ExternalVolumeCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeCapabilityOutput)
}

// ExternalVolumeCapabilityArrayInput is an input type that accepts ExternalVolumeCapabilityArray and ExternalVolumeCapabilityArrayOutput values.
// You can construct a concrete instance of `ExternalVolumeCapabilityArrayInput` via:
//
//          ExternalVolumeCapabilityArray{ ExternalVolumeCapabilityArgs{...} }
type ExternalVolumeCapabilityArrayInput interface {
	pulumi.Input

	ToExternalVolumeCapabilityArrayOutput() ExternalVolumeCapabilityArrayOutput
	ToExternalVolumeCapabilityArrayOutputWithContext(context.Context) ExternalVolumeCapabilityArrayOutput
}

type ExternalVolumeCapabilityArray []ExternalVolumeCapabilityInput

func (ExternalVolumeCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVolumeCapability)(nil)).Elem()
}

func (i ExternalVolumeCapabilityArray) ToExternalVolumeCapabilityArrayOutput() ExternalVolumeCapabilityArrayOutput {
	return i.ToExternalVolumeCapabilityArrayOutputWithContext(context.Background())
}

func (i ExternalVolumeCapabilityArray) ToExternalVolumeCapabilityArrayOutputWithContext(ctx context.Context) ExternalVolumeCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeCapabilityArrayOutput)
}

type ExternalVolumeCapabilityOutput struct{ *pulumi.OutputState }

func (ExternalVolumeCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeCapability)(nil)).Elem()
}

func (o ExternalVolumeCapabilityOutput) ToExternalVolumeCapabilityOutput() ExternalVolumeCapabilityOutput {
	return o
}

func (o ExternalVolumeCapabilityOutput) ToExternalVolumeCapabilityOutputWithContext(ctx context.Context) ExternalVolumeCapabilityOutput {
	return o
}

func (o ExternalVolumeCapabilityOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalVolumeCapability) string { return v.AccessMode }).(pulumi.StringOutput)
}

func (o ExternalVolumeCapabilityOutput) AttachmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalVolumeCapability) string { return v.AttachmentMode }).(pulumi.StringOutput)
}

type ExternalVolumeCapabilityArrayOutput struct{ *pulumi.OutputState }

func (ExternalVolumeCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVolumeCapability)(nil)).Elem()
}

func (o ExternalVolumeCapabilityArrayOutput) ToExternalVolumeCapabilityArrayOutput() ExternalVolumeCapabilityArrayOutput {
	return o
}

func (o ExternalVolumeCapabilityArrayOutput) ToExternalVolumeCapabilityArrayOutputWithContext(ctx context.Context) ExternalVolumeCapabilityArrayOutput {
	return o
}

func (o ExternalVolumeCapabilityArrayOutput) Index(i pulumi.IntInput) ExternalVolumeCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalVolumeCapability {
		return vs[0].([]ExternalVolumeCapability)[vs[1].(int)]
	}).(ExternalVolumeCapabilityOutput)
}

type ExternalVolumeMountOptions struct {
	FsType     *string  `pulumi:"fsType"`
	MountFlags []string `pulumi:"mountFlags"`
}

// ExternalVolumeMountOptionsInput is an input type that accepts ExternalVolumeMountOptionsArgs and ExternalVolumeMountOptionsOutput values.
// You can construct a concrete instance of `ExternalVolumeMountOptionsInput` via:
//
//          ExternalVolumeMountOptionsArgs{...}
type ExternalVolumeMountOptionsInput interface {
	pulumi.Input

	ToExternalVolumeMountOptionsOutput() ExternalVolumeMountOptionsOutput
	ToExternalVolumeMountOptionsOutputWithContext(context.Context) ExternalVolumeMountOptionsOutput
}

type ExternalVolumeMountOptionsArgs struct {
	FsType     pulumi.StringPtrInput   `pulumi:"fsType"`
	MountFlags pulumi.StringArrayInput `pulumi:"mountFlags"`
}

func (ExternalVolumeMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeMountOptions)(nil)).Elem()
}

func (i ExternalVolumeMountOptionsArgs) ToExternalVolumeMountOptionsOutput() ExternalVolumeMountOptionsOutput {
	return i.ToExternalVolumeMountOptionsOutputWithContext(context.Background())
}

func (i ExternalVolumeMountOptionsArgs) ToExternalVolumeMountOptionsOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeMountOptionsOutput)
}

func (i ExternalVolumeMountOptionsArgs) ToExternalVolumeMountOptionsPtrOutput() ExternalVolumeMountOptionsPtrOutput {
	return i.ToExternalVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (i ExternalVolumeMountOptionsArgs) ToExternalVolumeMountOptionsPtrOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeMountOptionsOutput).ToExternalVolumeMountOptionsPtrOutputWithContext(ctx)
}

// ExternalVolumeMountOptionsPtrInput is an input type that accepts ExternalVolumeMountOptionsArgs, ExternalVolumeMountOptionsPtr and ExternalVolumeMountOptionsPtrOutput values.
// You can construct a concrete instance of `ExternalVolumeMountOptionsPtrInput` via:
//
//          ExternalVolumeMountOptionsArgs{...}
//
//  or:
//
//          nil
type ExternalVolumeMountOptionsPtrInput interface {
	pulumi.Input

	ToExternalVolumeMountOptionsPtrOutput() ExternalVolumeMountOptionsPtrOutput
	ToExternalVolumeMountOptionsPtrOutputWithContext(context.Context) ExternalVolumeMountOptionsPtrOutput
}

type externalVolumeMountOptionsPtrType ExternalVolumeMountOptionsArgs

func ExternalVolumeMountOptionsPtr(v *ExternalVolumeMountOptionsArgs) ExternalVolumeMountOptionsPtrInput {
	return (*externalVolumeMountOptionsPtrType)(v)
}

func (*externalVolumeMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolumeMountOptions)(nil)).Elem()
}

func (i *externalVolumeMountOptionsPtrType) ToExternalVolumeMountOptionsPtrOutput() ExternalVolumeMountOptionsPtrOutput {
	return i.ToExternalVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (i *externalVolumeMountOptionsPtrType) ToExternalVolumeMountOptionsPtrOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeMountOptionsPtrOutput)
}

type ExternalVolumeMountOptionsOutput struct{ *pulumi.OutputState }

func (ExternalVolumeMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeMountOptions)(nil)).Elem()
}

func (o ExternalVolumeMountOptionsOutput) ToExternalVolumeMountOptionsOutput() ExternalVolumeMountOptionsOutput {
	return o
}

func (o ExternalVolumeMountOptionsOutput) ToExternalVolumeMountOptionsOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsOutput {
	return o
}

func (o ExternalVolumeMountOptionsOutput) ToExternalVolumeMountOptionsPtrOutput() ExternalVolumeMountOptionsPtrOutput {
	return o.ToExternalVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (o ExternalVolumeMountOptionsOutput) ToExternalVolumeMountOptionsPtrOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsPtrOutput {
	return o.ApplyT(func(v ExternalVolumeMountOptions) *ExternalVolumeMountOptions {
		return &v
	}).(ExternalVolumeMountOptionsPtrOutput)
}
func (o ExternalVolumeMountOptionsOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalVolumeMountOptions) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

func (o ExternalVolumeMountOptionsOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExternalVolumeMountOptions) []string { return v.MountFlags }).(pulumi.StringArrayOutput)
}

type ExternalVolumeMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (ExternalVolumeMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolumeMountOptions)(nil)).Elem()
}

func (o ExternalVolumeMountOptionsPtrOutput) ToExternalVolumeMountOptionsPtrOutput() ExternalVolumeMountOptionsPtrOutput {
	return o
}

func (o ExternalVolumeMountOptionsPtrOutput) ToExternalVolumeMountOptionsPtrOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsPtrOutput {
	return o
}

func (o ExternalVolumeMountOptionsPtrOutput) Elem() ExternalVolumeMountOptionsOutput {
	return o.ApplyT(func(v *ExternalVolumeMountOptions) ExternalVolumeMountOptions { return *v }).(ExternalVolumeMountOptionsOutput)
}

func (o ExternalVolumeMountOptionsPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalVolumeMountOptions) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

func (o ExternalVolumeMountOptionsPtrOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExternalVolumeMountOptions) []string {
		if v == nil {
			return nil
		}
		return v.MountFlags
	}).(pulumi.StringArrayOutput)
}

type JobHcl2 struct {
	// `(boolean: false)` - Set this to `true` to be able to use
	// HCL2 filesystem functions
	AllowFs *bool `pulumi:"allowFs"`
	// `(boolean: false)` - Set this to `true` if your jobspec uses the HCL2
	// format instead of the default HCL.
	Enabled *bool                  `pulumi:"enabled"`
	Vars    map[string]interface{} `pulumi:"vars"`
}

// JobHcl2Input is an input type that accepts JobHcl2Args and JobHcl2Output values.
// You can construct a concrete instance of `JobHcl2Input` via:
//
//          JobHcl2Args{...}
type JobHcl2Input interface {
	pulumi.Input

	ToJobHcl2Output() JobHcl2Output
	ToJobHcl2OutputWithContext(context.Context) JobHcl2Output
}

type JobHcl2Args struct {
	// `(boolean: false)` - Set this to `true` to be able to use
	// HCL2 filesystem functions
	AllowFs pulumi.BoolPtrInput `pulumi:"allowFs"`
	// `(boolean: false)` - Set this to `true` if your jobspec uses the HCL2
	// format instead of the default HCL.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	Vars    pulumi.MapInput     `pulumi:"vars"`
}

func (JobHcl2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*JobHcl2)(nil)).Elem()
}

func (i JobHcl2Args) ToJobHcl2Output() JobHcl2Output {
	return i.ToJobHcl2OutputWithContext(context.Background())
}

func (i JobHcl2Args) ToJobHcl2OutputWithContext(ctx context.Context) JobHcl2Output {
	return pulumi.ToOutputWithContext(ctx, i).(JobHcl2Output)
}

func (i JobHcl2Args) ToJobHcl2PtrOutput() JobHcl2PtrOutput {
	return i.ToJobHcl2PtrOutputWithContext(context.Background())
}

func (i JobHcl2Args) ToJobHcl2PtrOutputWithContext(ctx context.Context) JobHcl2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobHcl2Output).ToJobHcl2PtrOutputWithContext(ctx)
}

// JobHcl2PtrInput is an input type that accepts JobHcl2Args, JobHcl2Ptr and JobHcl2PtrOutput values.
// You can construct a concrete instance of `JobHcl2PtrInput` via:
//
//          JobHcl2Args{...}
//
//  or:
//
//          nil
type JobHcl2PtrInput interface {
	pulumi.Input

	ToJobHcl2PtrOutput() JobHcl2PtrOutput
	ToJobHcl2PtrOutputWithContext(context.Context) JobHcl2PtrOutput
}

type jobHcl2PtrType JobHcl2Args

func JobHcl2Ptr(v *JobHcl2Args) JobHcl2PtrInput {
	return (*jobHcl2PtrType)(v)
}

func (*jobHcl2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobHcl2)(nil)).Elem()
}

func (i *jobHcl2PtrType) ToJobHcl2PtrOutput() JobHcl2PtrOutput {
	return i.ToJobHcl2PtrOutputWithContext(context.Background())
}

func (i *jobHcl2PtrType) ToJobHcl2PtrOutputWithContext(ctx context.Context) JobHcl2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobHcl2PtrOutput)
}

type JobHcl2Output struct{ *pulumi.OutputState }

func (JobHcl2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*JobHcl2)(nil)).Elem()
}

func (o JobHcl2Output) ToJobHcl2Output() JobHcl2Output {
	return o
}

func (o JobHcl2Output) ToJobHcl2OutputWithContext(ctx context.Context) JobHcl2Output {
	return o
}

func (o JobHcl2Output) ToJobHcl2PtrOutput() JobHcl2PtrOutput {
	return o.ToJobHcl2PtrOutputWithContext(context.Background())
}

func (o JobHcl2Output) ToJobHcl2PtrOutputWithContext(ctx context.Context) JobHcl2PtrOutput {
	return o.ApplyT(func(v JobHcl2) *JobHcl2 {
		return &v
	}).(JobHcl2PtrOutput)
}

// `(boolean: false)` - Set this to `true` to be able to use
// HCL2 filesystem functions
func (o JobHcl2Output) AllowFs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobHcl2) *bool { return v.AllowFs }).(pulumi.BoolPtrOutput)
}

// `(boolean: false)` - Set this to `true` if your jobspec uses the HCL2
// format instead of the default HCL.
func (o JobHcl2Output) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobHcl2) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o JobHcl2Output) Vars() pulumi.MapOutput {
	return o.ApplyT(func(v JobHcl2) map[string]interface{} { return v.Vars }).(pulumi.MapOutput)
}

type JobHcl2PtrOutput struct{ *pulumi.OutputState }

func (JobHcl2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobHcl2)(nil)).Elem()
}

func (o JobHcl2PtrOutput) ToJobHcl2PtrOutput() JobHcl2PtrOutput {
	return o
}

func (o JobHcl2PtrOutput) ToJobHcl2PtrOutputWithContext(ctx context.Context) JobHcl2PtrOutput {
	return o
}

func (o JobHcl2PtrOutput) Elem() JobHcl2Output {
	return o.ApplyT(func(v *JobHcl2) JobHcl2 { return *v }).(JobHcl2Output)
}

// `(boolean: false)` - Set this to `true` to be able to use
// HCL2 filesystem functions
func (o JobHcl2PtrOutput) AllowFs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobHcl2) *bool {
		if v == nil {
			return nil
		}
		return v.AllowFs
	}).(pulumi.BoolPtrOutput)
}

// `(boolean: false)` - Set this to `true` if your jobspec uses the HCL2
// format instead of the default HCL.
func (o JobHcl2PtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobHcl2) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o JobHcl2PtrOutput) Vars() pulumi.MapOutput {
	return o.ApplyT(func(v *JobHcl2) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Vars
	}).(pulumi.MapOutput)
}

type JobTaskGroup struct {
	Count   *int                   `pulumi:"count"`
	Meta    map[string]interface{} `pulumi:"meta"`
	Name    *string                `pulumi:"name"`
	Tasks   []JobTaskGroupTask     `pulumi:"tasks"`
	Volumes []JobTaskGroupVolume   `pulumi:"volumes"`
}

// JobTaskGroupInput is an input type that accepts JobTaskGroupArgs and JobTaskGroupOutput values.
// You can construct a concrete instance of `JobTaskGroupInput` via:
//
//          JobTaskGroupArgs{...}
type JobTaskGroupInput interface {
	pulumi.Input

	ToJobTaskGroupOutput() JobTaskGroupOutput
	ToJobTaskGroupOutputWithContext(context.Context) JobTaskGroupOutput
}

type JobTaskGroupArgs struct {
	Count   pulumi.IntPtrInput           `pulumi:"count"`
	Meta    pulumi.MapInput              `pulumi:"meta"`
	Name    pulumi.StringPtrInput        `pulumi:"name"`
	Tasks   JobTaskGroupTaskArrayInput   `pulumi:"tasks"`
	Volumes JobTaskGroupVolumeArrayInput `pulumi:"volumes"`
}

func (JobTaskGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroup)(nil)).Elem()
}

func (i JobTaskGroupArgs) ToJobTaskGroupOutput() JobTaskGroupOutput {
	return i.ToJobTaskGroupOutputWithContext(context.Background())
}

func (i JobTaskGroupArgs) ToJobTaskGroupOutputWithContext(ctx context.Context) JobTaskGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupOutput)
}

// JobTaskGroupArrayInput is an input type that accepts JobTaskGroupArray and JobTaskGroupArrayOutput values.
// You can construct a concrete instance of `JobTaskGroupArrayInput` via:
//
//          JobTaskGroupArray{ JobTaskGroupArgs{...} }
type JobTaskGroupArrayInput interface {
	pulumi.Input

	ToJobTaskGroupArrayOutput() JobTaskGroupArrayOutput
	ToJobTaskGroupArrayOutputWithContext(context.Context) JobTaskGroupArrayOutput
}

type JobTaskGroupArray []JobTaskGroupInput

func (JobTaskGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroup)(nil)).Elem()
}

func (i JobTaskGroupArray) ToJobTaskGroupArrayOutput() JobTaskGroupArrayOutput {
	return i.ToJobTaskGroupArrayOutputWithContext(context.Background())
}

func (i JobTaskGroupArray) ToJobTaskGroupArrayOutputWithContext(ctx context.Context) JobTaskGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupArrayOutput)
}

type JobTaskGroupOutput struct{ *pulumi.OutputState }

func (JobTaskGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroup)(nil)).Elem()
}

func (o JobTaskGroupOutput) ToJobTaskGroupOutput() JobTaskGroupOutput {
	return o
}

func (o JobTaskGroupOutput) ToJobTaskGroupOutputWithContext(ctx context.Context) JobTaskGroupOutput {
	return o
}

func (o JobTaskGroupOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobTaskGroup) *int { return v.Count }).(pulumi.IntPtrOutput)
}

func (o JobTaskGroupOutput) Meta() pulumi.MapOutput {
	return o.ApplyT(func(v JobTaskGroup) map[string]interface{} { return v.Meta }).(pulumi.MapOutput)
}

func (o JobTaskGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupOutput) Tasks() JobTaskGroupTaskArrayOutput {
	return o.ApplyT(func(v JobTaskGroup) []JobTaskGroupTask { return v.Tasks }).(JobTaskGroupTaskArrayOutput)
}

func (o JobTaskGroupOutput) Volumes() JobTaskGroupVolumeArrayOutput {
	return o.ApplyT(func(v JobTaskGroup) []JobTaskGroupVolume { return v.Volumes }).(JobTaskGroupVolumeArrayOutput)
}

type JobTaskGroupArrayOutput struct{ *pulumi.OutputState }

func (JobTaskGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroup)(nil)).Elem()
}

func (o JobTaskGroupArrayOutput) ToJobTaskGroupArrayOutput() JobTaskGroupArrayOutput {
	return o
}

func (o JobTaskGroupArrayOutput) ToJobTaskGroupArrayOutputWithContext(ctx context.Context) JobTaskGroupArrayOutput {
	return o
}

func (o JobTaskGroupArrayOutput) Index(i pulumi.IntInput) JobTaskGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobTaskGroup {
		return vs[0].([]JobTaskGroup)[vs[1].(int)]
	}).(JobTaskGroupOutput)
}

type JobTaskGroupTask struct {
	Driver       *string                       `pulumi:"driver"`
	Meta         map[string]interface{}        `pulumi:"meta"`
	Name         *string                       `pulumi:"name"`
	VolumeMounts []JobTaskGroupTaskVolumeMount `pulumi:"volumeMounts"`
}

// JobTaskGroupTaskInput is an input type that accepts JobTaskGroupTaskArgs and JobTaskGroupTaskOutput values.
// You can construct a concrete instance of `JobTaskGroupTaskInput` via:
//
//          JobTaskGroupTaskArgs{...}
type JobTaskGroupTaskInput interface {
	pulumi.Input

	ToJobTaskGroupTaskOutput() JobTaskGroupTaskOutput
	ToJobTaskGroupTaskOutputWithContext(context.Context) JobTaskGroupTaskOutput
}

type JobTaskGroupTaskArgs struct {
	Driver       pulumi.StringPtrInput                 `pulumi:"driver"`
	Meta         pulumi.MapInput                       `pulumi:"meta"`
	Name         pulumi.StringPtrInput                 `pulumi:"name"`
	VolumeMounts JobTaskGroupTaskVolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (JobTaskGroupTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupTask)(nil)).Elem()
}

func (i JobTaskGroupTaskArgs) ToJobTaskGroupTaskOutput() JobTaskGroupTaskOutput {
	return i.ToJobTaskGroupTaskOutputWithContext(context.Background())
}

func (i JobTaskGroupTaskArgs) ToJobTaskGroupTaskOutputWithContext(ctx context.Context) JobTaskGroupTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupTaskOutput)
}

// JobTaskGroupTaskArrayInput is an input type that accepts JobTaskGroupTaskArray and JobTaskGroupTaskArrayOutput values.
// You can construct a concrete instance of `JobTaskGroupTaskArrayInput` via:
//
//          JobTaskGroupTaskArray{ JobTaskGroupTaskArgs{...} }
type JobTaskGroupTaskArrayInput interface {
	pulumi.Input

	ToJobTaskGroupTaskArrayOutput() JobTaskGroupTaskArrayOutput
	ToJobTaskGroupTaskArrayOutputWithContext(context.Context) JobTaskGroupTaskArrayOutput
}

type JobTaskGroupTaskArray []JobTaskGroupTaskInput

func (JobTaskGroupTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupTask)(nil)).Elem()
}

func (i JobTaskGroupTaskArray) ToJobTaskGroupTaskArrayOutput() JobTaskGroupTaskArrayOutput {
	return i.ToJobTaskGroupTaskArrayOutputWithContext(context.Background())
}

func (i JobTaskGroupTaskArray) ToJobTaskGroupTaskArrayOutputWithContext(ctx context.Context) JobTaskGroupTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupTaskArrayOutput)
}

type JobTaskGroupTaskOutput struct{ *pulumi.OutputState }

func (JobTaskGroupTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupTask)(nil)).Elem()
}

func (o JobTaskGroupTaskOutput) ToJobTaskGroupTaskOutput() JobTaskGroupTaskOutput {
	return o
}

func (o JobTaskGroupTaskOutput) ToJobTaskGroupTaskOutputWithContext(ctx context.Context) JobTaskGroupTaskOutput {
	return o
}

func (o JobTaskGroupTaskOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupTask) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupTaskOutput) Meta() pulumi.MapOutput {
	return o.ApplyT(func(v JobTaskGroupTask) map[string]interface{} { return v.Meta }).(pulumi.MapOutput)
}

func (o JobTaskGroupTaskOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupTask) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupTaskOutput) VolumeMounts() JobTaskGroupTaskVolumeMountArrayOutput {
	return o.ApplyT(func(v JobTaskGroupTask) []JobTaskGroupTaskVolumeMount { return v.VolumeMounts }).(JobTaskGroupTaskVolumeMountArrayOutput)
}

type JobTaskGroupTaskArrayOutput struct{ *pulumi.OutputState }

func (JobTaskGroupTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupTask)(nil)).Elem()
}

func (o JobTaskGroupTaskArrayOutput) ToJobTaskGroupTaskArrayOutput() JobTaskGroupTaskArrayOutput {
	return o
}

func (o JobTaskGroupTaskArrayOutput) ToJobTaskGroupTaskArrayOutputWithContext(ctx context.Context) JobTaskGroupTaskArrayOutput {
	return o
}

func (o JobTaskGroupTaskArrayOutput) Index(i pulumi.IntInput) JobTaskGroupTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobTaskGroupTask {
		return vs[0].([]JobTaskGroupTask)[vs[1].(int)]
	}).(JobTaskGroupTaskOutput)
}

type JobTaskGroupTaskVolumeMount struct {
	Destination *string `pulumi:"destination"`
	ReadOnly    *bool   `pulumi:"readOnly"`
	Volume      *string `pulumi:"volume"`
}

// JobTaskGroupTaskVolumeMountInput is an input type that accepts JobTaskGroupTaskVolumeMountArgs and JobTaskGroupTaskVolumeMountOutput values.
// You can construct a concrete instance of `JobTaskGroupTaskVolumeMountInput` via:
//
//          JobTaskGroupTaskVolumeMountArgs{...}
type JobTaskGroupTaskVolumeMountInput interface {
	pulumi.Input

	ToJobTaskGroupTaskVolumeMountOutput() JobTaskGroupTaskVolumeMountOutput
	ToJobTaskGroupTaskVolumeMountOutputWithContext(context.Context) JobTaskGroupTaskVolumeMountOutput
}

type JobTaskGroupTaskVolumeMountArgs struct {
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	ReadOnly    pulumi.BoolPtrInput   `pulumi:"readOnly"`
	Volume      pulumi.StringPtrInput `pulumi:"volume"`
}

func (JobTaskGroupTaskVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (i JobTaskGroupTaskVolumeMountArgs) ToJobTaskGroupTaskVolumeMountOutput() JobTaskGroupTaskVolumeMountOutput {
	return i.ToJobTaskGroupTaskVolumeMountOutputWithContext(context.Background())
}

func (i JobTaskGroupTaskVolumeMountArgs) ToJobTaskGroupTaskVolumeMountOutputWithContext(ctx context.Context) JobTaskGroupTaskVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupTaskVolumeMountOutput)
}

// JobTaskGroupTaskVolumeMountArrayInput is an input type that accepts JobTaskGroupTaskVolumeMountArray and JobTaskGroupTaskVolumeMountArrayOutput values.
// You can construct a concrete instance of `JobTaskGroupTaskVolumeMountArrayInput` via:
//
//          JobTaskGroupTaskVolumeMountArray{ JobTaskGroupTaskVolumeMountArgs{...} }
type JobTaskGroupTaskVolumeMountArrayInput interface {
	pulumi.Input

	ToJobTaskGroupTaskVolumeMountArrayOutput() JobTaskGroupTaskVolumeMountArrayOutput
	ToJobTaskGroupTaskVolumeMountArrayOutputWithContext(context.Context) JobTaskGroupTaskVolumeMountArrayOutput
}

type JobTaskGroupTaskVolumeMountArray []JobTaskGroupTaskVolumeMountInput

func (JobTaskGroupTaskVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (i JobTaskGroupTaskVolumeMountArray) ToJobTaskGroupTaskVolumeMountArrayOutput() JobTaskGroupTaskVolumeMountArrayOutput {
	return i.ToJobTaskGroupTaskVolumeMountArrayOutputWithContext(context.Background())
}

func (i JobTaskGroupTaskVolumeMountArray) ToJobTaskGroupTaskVolumeMountArrayOutputWithContext(ctx context.Context) JobTaskGroupTaskVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupTaskVolumeMountArrayOutput)
}

type JobTaskGroupTaskVolumeMountOutput struct{ *pulumi.OutputState }

func (JobTaskGroupTaskVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (o JobTaskGroupTaskVolumeMountOutput) ToJobTaskGroupTaskVolumeMountOutput() JobTaskGroupTaskVolumeMountOutput {
	return o
}

func (o JobTaskGroupTaskVolumeMountOutput) ToJobTaskGroupTaskVolumeMountOutputWithContext(ctx context.Context) JobTaskGroupTaskVolumeMountOutput {
	return o
}

func (o JobTaskGroupTaskVolumeMountOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupTaskVolumeMount) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupTaskVolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobTaskGroupTaskVolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o JobTaskGroupTaskVolumeMountOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupTaskVolumeMount) *string { return v.Volume }).(pulumi.StringPtrOutput)
}

type JobTaskGroupTaskVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (JobTaskGroupTaskVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (o JobTaskGroupTaskVolumeMountArrayOutput) ToJobTaskGroupTaskVolumeMountArrayOutput() JobTaskGroupTaskVolumeMountArrayOutput {
	return o
}

func (o JobTaskGroupTaskVolumeMountArrayOutput) ToJobTaskGroupTaskVolumeMountArrayOutputWithContext(ctx context.Context) JobTaskGroupTaskVolumeMountArrayOutput {
	return o
}

func (o JobTaskGroupTaskVolumeMountArrayOutput) Index(i pulumi.IntInput) JobTaskGroupTaskVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobTaskGroupTaskVolumeMount {
		return vs[0].([]JobTaskGroupTaskVolumeMount)[vs[1].(int)]
	}).(JobTaskGroupTaskVolumeMountOutput)
}

type JobTaskGroupVolume struct {
	Name     *string `pulumi:"name"`
	ReadOnly *bool   `pulumi:"readOnly"`
	Source   *string `pulumi:"source"`
	Type     *string `pulumi:"type"`
}

// JobTaskGroupVolumeInput is an input type that accepts JobTaskGroupVolumeArgs and JobTaskGroupVolumeOutput values.
// You can construct a concrete instance of `JobTaskGroupVolumeInput` via:
//
//          JobTaskGroupVolumeArgs{...}
type JobTaskGroupVolumeInput interface {
	pulumi.Input

	ToJobTaskGroupVolumeOutput() JobTaskGroupVolumeOutput
	ToJobTaskGroupVolumeOutputWithContext(context.Context) JobTaskGroupVolumeOutput
}

type JobTaskGroupVolumeArgs struct {
	Name     pulumi.StringPtrInput `pulumi:"name"`
	ReadOnly pulumi.BoolPtrInput   `pulumi:"readOnly"`
	Source   pulumi.StringPtrInput `pulumi:"source"`
	Type     pulumi.StringPtrInput `pulumi:"type"`
}

func (JobTaskGroupVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupVolume)(nil)).Elem()
}

func (i JobTaskGroupVolumeArgs) ToJobTaskGroupVolumeOutput() JobTaskGroupVolumeOutput {
	return i.ToJobTaskGroupVolumeOutputWithContext(context.Background())
}

func (i JobTaskGroupVolumeArgs) ToJobTaskGroupVolumeOutputWithContext(ctx context.Context) JobTaskGroupVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupVolumeOutput)
}

// JobTaskGroupVolumeArrayInput is an input type that accepts JobTaskGroupVolumeArray and JobTaskGroupVolumeArrayOutput values.
// You can construct a concrete instance of `JobTaskGroupVolumeArrayInput` via:
//
//          JobTaskGroupVolumeArray{ JobTaskGroupVolumeArgs{...} }
type JobTaskGroupVolumeArrayInput interface {
	pulumi.Input

	ToJobTaskGroupVolumeArrayOutput() JobTaskGroupVolumeArrayOutput
	ToJobTaskGroupVolumeArrayOutputWithContext(context.Context) JobTaskGroupVolumeArrayOutput
}

type JobTaskGroupVolumeArray []JobTaskGroupVolumeInput

func (JobTaskGroupVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupVolume)(nil)).Elem()
}

func (i JobTaskGroupVolumeArray) ToJobTaskGroupVolumeArrayOutput() JobTaskGroupVolumeArrayOutput {
	return i.ToJobTaskGroupVolumeArrayOutputWithContext(context.Background())
}

func (i JobTaskGroupVolumeArray) ToJobTaskGroupVolumeArrayOutputWithContext(ctx context.Context) JobTaskGroupVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupVolumeArrayOutput)
}

type JobTaskGroupVolumeOutput struct{ *pulumi.OutputState }

func (JobTaskGroupVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupVolume)(nil)).Elem()
}

func (o JobTaskGroupVolumeOutput) ToJobTaskGroupVolumeOutput() JobTaskGroupVolumeOutput {
	return o
}

func (o JobTaskGroupVolumeOutput) ToJobTaskGroupVolumeOutputWithContext(ctx context.Context) JobTaskGroupVolumeOutput {
	return o
}

func (o JobTaskGroupVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobTaskGroupVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o JobTaskGroupVolumeOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupVolume) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type JobTaskGroupVolumeArrayOutput struct{ *pulumi.OutputState }

func (JobTaskGroupVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupVolume)(nil)).Elem()
}

func (o JobTaskGroupVolumeArrayOutput) ToJobTaskGroupVolumeArrayOutput() JobTaskGroupVolumeArrayOutput {
	return o
}

func (o JobTaskGroupVolumeArrayOutput) ToJobTaskGroupVolumeArrayOutputWithContext(ctx context.Context) JobTaskGroupVolumeArrayOutput {
	return o
}

func (o JobTaskGroupVolumeArrayOutput) Index(i pulumi.IntInput) JobTaskGroupVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobTaskGroupVolume {
		return vs[0].([]JobTaskGroupVolume)[vs[1].(int)]
	}).(JobTaskGroupVolumeOutput)
}

type ProviderHeader struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ProviderHeaderInput is an input type that accepts ProviderHeaderArgs and ProviderHeaderOutput values.
// You can construct a concrete instance of `ProviderHeaderInput` via:
//
//          ProviderHeaderArgs{...}
type ProviderHeaderInput interface {
	pulumi.Input

	ToProviderHeaderOutput() ProviderHeaderOutput
	ToProviderHeaderOutputWithContext(context.Context) ProviderHeaderOutput
}

type ProviderHeaderArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProviderHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderHeader)(nil)).Elem()
}

func (i ProviderHeaderArgs) ToProviderHeaderOutput() ProviderHeaderOutput {
	return i.ToProviderHeaderOutputWithContext(context.Background())
}

func (i ProviderHeaderArgs) ToProviderHeaderOutputWithContext(ctx context.Context) ProviderHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderHeaderOutput)
}

// ProviderHeaderArrayInput is an input type that accepts ProviderHeaderArray and ProviderHeaderArrayOutput values.
// You can construct a concrete instance of `ProviderHeaderArrayInput` via:
//
//          ProviderHeaderArray{ ProviderHeaderArgs{...} }
type ProviderHeaderArrayInput interface {
	pulumi.Input

	ToProviderHeaderArrayOutput() ProviderHeaderArrayOutput
	ToProviderHeaderArrayOutputWithContext(context.Context) ProviderHeaderArrayOutput
}

type ProviderHeaderArray []ProviderHeaderInput

func (ProviderHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderHeader)(nil)).Elem()
}

func (i ProviderHeaderArray) ToProviderHeaderArrayOutput() ProviderHeaderArrayOutput {
	return i.ToProviderHeaderArrayOutputWithContext(context.Background())
}

func (i ProviderHeaderArray) ToProviderHeaderArrayOutputWithContext(ctx context.Context) ProviderHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderHeaderArrayOutput)
}

type ProviderHeaderOutput struct{ *pulumi.OutputState }

func (ProviderHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderHeader)(nil)).Elem()
}

func (o ProviderHeaderOutput) ToProviderHeaderOutput() ProviderHeaderOutput {
	return o
}

func (o ProviderHeaderOutput) ToProviderHeaderOutputWithContext(ctx context.Context) ProviderHeaderOutput {
	return o
}

func (o ProviderHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderHeader) string { return v.Name }).(pulumi.StringOutput)
}

func (o ProviderHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderHeader) string { return v.Value }).(pulumi.StringOutput)
}

type ProviderHeaderArrayOutput struct{ *pulumi.OutputState }

func (ProviderHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderHeader)(nil)).Elem()
}

func (o ProviderHeaderArrayOutput) ToProviderHeaderArrayOutput() ProviderHeaderArrayOutput {
	return o
}

func (o ProviderHeaderArrayOutput) ToProviderHeaderArrayOutputWithContext(ctx context.Context) ProviderHeaderArrayOutput {
	return o
}

func (o ProviderHeaderArrayOutput) Index(i pulumi.IntInput) ProviderHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderHeader {
		return vs[0].([]ProviderHeader)[vs[1].(int)]
	}).(ProviderHeaderOutput)
}

type QuoteSpecificationLimit struct {
	// `(string: <required>)` - The region these limits should apply to.
	Region string `pulumi:"region"`
	// `(block: <required>)` - The limits to enforce. This block
	// may only be specified once in the `limits` block. Its structure is
	// documented below.
	RegionLimit QuoteSpecificationLimitRegionLimit `pulumi:"regionLimit"`
}

// QuoteSpecificationLimitInput is an input type that accepts QuoteSpecificationLimitArgs and QuoteSpecificationLimitOutput values.
// You can construct a concrete instance of `QuoteSpecificationLimitInput` via:
//
//          QuoteSpecificationLimitArgs{...}
type QuoteSpecificationLimitInput interface {
	pulumi.Input

	ToQuoteSpecificationLimitOutput() QuoteSpecificationLimitOutput
	ToQuoteSpecificationLimitOutputWithContext(context.Context) QuoteSpecificationLimitOutput
}

type QuoteSpecificationLimitArgs struct {
	// `(string: <required>)` - The region these limits should apply to.
	Region pulumi.StringInput `pulumi:"region"`
	// `(block: <required>)` - The limits to enforce. This block
	// may only be specified once in the `limits` block. Its structure is
	// documented below.
	RegionLimit QuoteSpecificationLimitRegionLimitInput `pulumi:"regionLimit"`
}

func (QuoteSpecificationLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuoteSpecificationLimit)(nil)).Elem()
}

func (i QuoteSpecificationLimitArgs) ToQuoteSpecificationLimitOutput() QuoteSpecificationLimitOutput {
	return i.ToQuoteSpecificationLimitOutputWithContext(context.Background())
}

func (i QuoteSpecificationLimitArgs) ToQuoteSpecificationLimitOutputWithContext(ctx context.Context) QuoteSpecificationLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuoteSpecificationLimitOutput)
}

// QuoteSpecificationLimitArrayInput is an input type that accepts QuoteSpecificationLimitArray and QuoteSpecificationLimitArrayOutput values.
// You can construct a concrete instance of `QuoteSpecificationLimitArrayInput` via:
//
//          QuoteSpecificationLimitArray{ QuoteSpecificationLimitArgs{...} }
type QuoteSpecificationLimitArrayInput interface {
	pulumi.Input

	ToQuoteSpecificationLimitArrayOutput() QuoteSpecificationLimitArrayOutput
	ToQuoteSpecificationLimitArrayOutputWithContext(context.Context) QuoteSpecificationLimitArrayOutput
}

type QuoteSpecificationLimitArray []QuoteSpecificationLimitInput

func (QuoteSpecificationLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuoteSpecificationLimit)(nil)).Elem()
}

func (i QuoteSpecificationLimitArray) ToQuoteSpecificationLimitArrayOutput() QuoteSpecificationLimitArrayOutput {
	return i.ToQuoteSpecificationLimitArrayOutputWithContext(context.Background())
}

func (i QuoteSpecificationLimitArray) ToQuoteSpecificationLimitArrayOutputWithContext(ctx context.Context) QuoteSpecificationLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuoteSpecificationLimitArrayOutput)
}

type QuoteSpecificationLimitOutput struct{ *pulumi.OutputState }

func (QuoteSpecificationLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuoteSpecificationLimit)(nil)).Elem()
}

func (o QuoteSpecificationLimitOutput) ToQuoteSpecificationLimitOutput() QuoteSpecificationLimitOutput {
	return o
}

func (o QuoteSpecificationLimitOutput) ToQuoteSpecificationLimitOutputWithContext(ctx context.Context) QuoteSpecificationLimitOutput {
	return o
}

// `(string: <required>)` - The region these limits should apply to.
func (o QuoteSpecificationLimitOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v QuoteSpecificationLimit) string { return v.Region }).(pulumi.StringOutput)
}

// `(block: <required>)` - The limits to enforce. This block
// may only be specified once in the `limits` block. Its structure is
// documented below.
func (o QuoteSpecificationLimitOutput) RegionLimit() QuoteSpecificationLimitRegionLimitOutput {
	return o.ApplyT(func(v QuoteSpecificationLimit) QuoteSpecificationLimitRegionLimit { return v.RegionLimit }).(QuoteSpecificationLimitRegionLimitOutput)
}

type QuoteSpecificationLimitArrayOutput struct{ *pulumi.OutputState }

func (QuoteSpecificationLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuoteSpecificationLimit)(nil)).Elem()
}

func (o QuoteSpecificationLimitArrayOutput) ToQuoteSpecificationLimitArrayOutput() QuoteSpecificationLimitArrayOutput {
	return o
}

func (o QuoteSpecificationLimitArrayOutput) ToQuoteSpecificationLimitArrayOutputWithContext(ctx context.Context) QuoteSpecificationLimitArrayOutput {
	return o
}

func (o QuoteSpecificationLimitArrayOutput) Index(i pulumi.IntInput) QuoteSpecificationLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuoteSpecificationLimit {
		return vs[0].([]QuoteSpecificationLimit)[vs[1].(int)]
	}).(QuoteSpecificationLimitOutput)
}

type QuoteSpecificationLimitRegionLimit struct {
	// `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
	// is treated as unlimited, and a negative value is treated as fully disallowed.
	Cpu *int `pulumi:"cpu"`
	// `(int: 0)` - The amount of memory (in megabytes) to limit
	// allocations to. A value of zero is treated as unlimited, and a negative value
	// is treated as fully disallowed.
	MemoryMb *int `pulumi:"memoryMb"`
}

// QuoteSpecificationLimitRegionLimitInput is an input type that accepts QuoteSpecificationLimitRegionLimitArgs and QuoteSpecificationLimitRegionLimitOutput values.
// You can construct a concrete instance of `QuoteSpecificationLimitRegionLimitInput` via:
//
//          QuoteSpecificationLimitRegionLimitArgs{...}
type QuoteSpecificationLimitRegionLimitInput interface {
	pulumi.Input

	ToQuoteSpecificationLimitRegionLimitOutput() QuoteSpecificationLimitRegionLimitOutput
	ToQuoteSpecificationLimitRegionLimitOutputWithContext(context.Context) QuoteSpecificationLimitRegionLimitOutput
}

type QuoteSpecificationLimitRegionLimitArgs struct {
	// `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
	// is treated as unlimited, and a negative value is treated as fully disallowed.
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
	// `(int: 0)` - The amount of memory (in megabytes) to limit
	// allocations to. A value of zero is treated as unlimited, and a negative value
	// is treated as fully disallowed.
	MemoryMb pulumi.IntPtrInput `pulumi:"memoryMb"`
}

func (QuoteSpecificationLimitRegionLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuoteSpecificationLimitRegionLimit)(nil)).Elem()
}

func (i QuoteSpecificationLimitRegionLimitArgs) ToQuoteSpecificationLimitRegionLimitOutput() QuoteSpecificationLimitRegionLimitOutput {
	return i.ToQuoteSpecificationLimitRegionLimitOutputWithContext(context.Background())
}

func (i QuoteSpecificationLimitRegionLimitArgs) ToQuoteSpecificationLimitRegionLimitOutputWithContext(ctx context.Context) QuoteSpecificationLimitRegionLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuoteSpecificationLimitRegionLimitOutput)
}

type QuoteSpecificationLimitRegionLimitOutput struct{ *pulumi.OutputState }

func (QuoteSpecificationLimitRegionLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuoteSpecificationLimitRegionLimit)(nil)).Elem()
}

func (o QuoteSpecificationLimitRegionLimitOutput) ToQuoteSpecificationLimitRegionLimitOutput() QuoteSpecificationLimitRegionLimitOutput {
	return o
}

func (o QuoteSpecificationLimitRegionLimitOutput) ToQuoteSpecificationLimitRegionLimitOutputWithContext(ctx context.Context) QuoteSpecificationLimitRegionLimitOutput {
	return o
}

// `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
// is treated as unlimited, and a negative value is treated as fully disallowed.
func (o QuoteSpecificationLimitRegionLimitOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QuoteSpecificationLimitRegionLimit) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

// `(int: 0)` - The amount of memory (in megabytes) to limit
// allocations to. A value of zero is treated as unlimited, and a negative value
// is treated as fully disallowed.
func (o QuoteSpecificationLimitRegionLimitOutput) MemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QuoteSpecificationLimitRegionLimit) *int { return v.MemoryMb }).(pulumi.IntPtrOutput)
}

type VolumeCapability struct {
	AccessMode     string `pulumi:"accessMode"`
	AttachmentMode string `pulumi:"attachmentMode"`
}

// VolumeCapabilityInput is an input type that accepts VolumeCapabilityArgs and VolumeCapabilityOutput values.
// You can construct a concrete instance of `VolumeCapabilityInput` via:
//
//          VolumeCapabilityArgs{...}
type VolumeCapabilityInput interface {
	pulumi.Input

	ToVolumeCapabilityOutput() VolumeCapabilityOutput
	ToVolumeCapabilityOutputWithContext(context.Context) VolumeCapabilityOutput
}

type VolumeCapabilityArgs struct {
	AccessMode     pulumi.StringInput `pulumi:"accessMode"`
	AttachmentMode pulumi.StringInput `pulumi:"attachmentMode"`
}

func (VolumeCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeCapability)(nil)).Elem()
}

func (i VolumeCapabilityArgs) ToVolumeCapabilityOutput() VolumeCapabilityOutput {
	return i.ToVolumeCapabilityOutputWithContext(context.Background())
}

func (i VolumeCapabilityArgs) ToVolumeCapabilityOutputWithContext(ctx context.Context) VolumeCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeCapabilityOutput)
}

// VolumeCapabilityArrayInput is an input type that accepts VolumeCapabilityArray and VolumeCapabilityArrayOutput values.
// You can construct a concrete instance of `VolumeCapabilityArrayInput` via:
//
//          VolumeCapabilityArray{ VolumeCapabilityArgs{...} }
type VolumeCapabilityArrayInput interface {
	pulumi.Input

	ToVolumeCapabilityArrayOutput() VolumeCapabilityArrayOutput
	ToVolumeCapabilityArrayOutputWithContext(context.Context) VolumeCapabilityArrayOutput
}

type VolumeCapabilityArray []VolumeCapabilityInput

func (VolumeCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeCapability)(nil)).Elem()
}

func (i VolumeCapabilityArray) ToVolumeCapabilityArrayOutput() VolumeCapabilityArrayOutput {
	return i.ToVolumeCapabilityArrayOutputWithContext(context.Background())
}

func (i VolumeCapabilityArray) ToVolumeCapabilityArrayOutputWithContext(ctx context.Context) VolumeCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeCapabilityArrayOutput)
}

type VolumeCapabilityOutput struct{ *pulumi.OutputState }

func (VolumeCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeCapability)(nil)).Elem()
}

func (o VolumeCapabilityOutput) ToVolumeCapabilityOutput() VolumeCapabilityOutput {
	return o
}

func (o VolumeCapabilityOutput) ToVolumeCapabilityOutputWithContext(ctx context.Context) VolumeCapabilityOutput {
	return o
}

func (o VolumeCapabilityOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeCapability) string { return v.AccessMode }).(pulumi.StringOutput)
}

func (o VolumeCapabilityOutput) AttachmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeCapability) string { return v.AttachmentMode }).(pulumi.StringOutput)
}

type VolumeCapabilityArrayOutput struct{ *pulumi.OutputState }

func (VolumeCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeCapability)(nil)).Elem()
}

func (o VolumeCapabilityArrayOutput) ToVolumeCapabilityArrayOutput() VolumeCapabilityArrayOutput {
	return o
}

func (o VolumeCapabilityArrayOutput) ToVolumeCapabilityArrayOutputWithContext(ctx context.Context) VolumeCapabilityArrayOutput {
	return o
}

func (o VolumeCapabilityArrayOutput) Index(i pulumi.IntInput) VolumeCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeCapability {
		return vs[0].([]VolumeCapability)[vs[1].(int)]
	}).(VolumeCapabilityOutput)
}

type VolumeMountOptions struct {
	FsType     *string  `pulumi:"fsType"`
	MountFlags []string `pulumi:"mountFlags"`
}

// VolumeMountOptionsInput is an input type that accepts VolumeMountOptionsArgs and VolumeMountOptionsOutput values.
// You can construct a concrete instance of `VolumeMountOptionsInput` via:
//
//          VolumeMountOptionsArgs{...}
type VolumeMountOptionsInput interface {
	pulumi.Input

	ToVolumeMountOptionsOutput() VolumeMountOptionsOutput
	ToVolumeMountOptionsOutputWithContext(context.Context) VolumeMountOptionsOutput
}

type VolumeMountOptionsArgs struct {
	FsType     pulumi.StringPtrInput   `pulumi:"fsType"`
	MountFlags pulumi.StringArrayInput `pulumi:"mountFlags"`
}

func (VolumeMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountOptions)(nil)).Elem()
}

func (i VolumeMountOptionsArgs) ToVolumeMountOptionsOutput() VolumeMountOptionsOutput {
	return i.ToVolumeMountOptionsOutputWithContext(context.Background())
}

func (i VolumeMountOptionsArgs) ToVolumeMountOptionsOutputWithContext(ctx context.Context) VolumeMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOptionsOutput)
}

func (i VolumeMountOptionsArgs) ToVolumeMountOptionsPtrOutput() VolumeMountOptionsPtrOutput {
	return i.ToVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (i VolumeMountOptionsArgs) ToVolumeMountOptionsPtrOutputWithContext(ctx context.Context) VolumeMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOptionsOutput).ToVolumeMountOptionsPtrOutputWithContext(ctx)
}

// VolumeMountOptionsPtrInput is an input type that accepts VolumeMountOptionsArgs, VolumeMountOptionsPtr and VolumeMountOptionsPtrOutput values.
// You can construct a concrete instance of `VolumeMountOptionsPtrInput` via:
//
//          VolumeMountOptionsArgs{...}
//
//  or:
//
//          nil
type VolumeMountOptionsPtrInput interface {
	pulumi.Input

	ToVolumeMountOptionsPtrOutput() VolumeMountOptionsPtrOutput
	ToVolumeMountOptionsPtrOutputWithContext(context.Context) VolumeMountOptionsPtrOutput
}

type volumeMountOptionsPtrType VolumeMountOptionsArgs

func VolumeMountOptionsPtr(v *VolumeMountOptionsArgs) VolumeMountOptionsPtrInput {
	return (*volumeMountOptionsPtrType)(v)
}

func (*volumeMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeMountOptions)(nil)).Elem()
}

func (i *volumeMountOptionsPtrType) ToVolumeMountOptionsPtrOutput() VolumeMountOptionsPtrOutput {
	return i.ToVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (i *volumeMountOptionsPtrType) ToVolumeMountOptionsPtrOutputWithContext(ctx context.Context) VolumeMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOptionsPtrOutput)
}

type VolumeMountOptionsOutput struct{ *pulumi.OutputState }

func (VolumeMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountOptions)(nil)).Elem()
}

func (o VolumeMountOptionsOutput) ToVolumeMountOptionsOutput() VolumeMountOptionsOutput {
	return o
}

func (o VolumeMountOptionsOutput) ToVolumeMountOptionsOutputWithContext(ctx context.Context) VolumeMountOptionsOutput {
	return o
}

func (o VolumeMountOptionsOutput) ToVolumeMountOptionsPtrOutput() VolumeMountOptionsPtrOutput {
	return o.ToVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (o VolumeMountOptionsOutput) ToVolumeMountOptionsPtrOutputWithContext(ctx context.Context) VolumeMountOptionsPtrOutput {
	return o.ApplyT(func(v VolumeMountOptions) *VolumeMountOptions {
		return &v
	}).(VolumeMountOptionsPtrOutput)
}
func (o VolumeMountOptionsOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountOptions) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

func (o VolumeMountOptionsOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeMountOptions) []string { return v.MountFlags }).(pulumi.StringArrayOutput)
}

type VolumeMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (VolumeMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeMountOptions)(nil)).Elem()
}

func (o VolumeMountOptionsPtrOutput) ToVolumeMountOptionsPtrOutput() VolumeMountOptionsPtrOutput {
	return o
}

func (o VolumeMountOptionsPtrOutput) ToVolumeMountOptionsPtrOutputWithContext(ctx context.Context) VolumeMountOptionsPtrOutput {
	return o
}

func (o VolumeMountOptionsPtrOutput) Elem() VolumeMountOptionsOutput {
	return o.ApplyT(func(v *VolumeMountOptions) VolumeMountOptions { return *v }).(VolumeMountOptionsOutput)
}

func (o VolumeMountOptionsPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeMountOptions) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

func (o VolumeMountOptionsPtrOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeMountOptions) []string {
		if v == nil {
			return nil
		}
		return v.MountFlags
	}).(pulumi.StringArrayOutput)
}

type GetAclPoliciesPolicy struct {
	Description string `pulumi:"description"`
	Name        string `pulumi:"name"`
}

// GetAclPoliciesPolicyInput is an input type that accepts GetAclPoliciesPolicyArgs and GetAclPoliciesPolicyOutput values.
// You can construct a concrete instance of `GetAclPoliciesPolicyInput` via:
//
//          GetAclPoliciesPolicyArgs{...}
type GetAclPoliciesPolicyInput interface {
	pulumi.Input

	ToGetAclPoliciesPolicyOutput() GetAclPoliciesPolicyOutput
	ToGetAclPoliciesPolicyOutputWithContext(context.Context) GetAclPoliciesPolicyOutput
}

type GetAclPoliciesPolicyArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	Name        pulumi.StringInput `pulumi:"name"`
}

func (GetAclPoliciesPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclPoliciesPolicy)(nil)).Elem()
}

func (i GetAclPoliciesPolicyArgs) ToGetAclPoliciesPolicyOutput() GetAclPoliciesPolicyOutput {
	return i.ToGetAclPoliciesPolicyOutputWithContext(context.Background())
}

func (i GetAclPoliciesPolicyArgs) ToGetAclPoliciesPolicyOutputWithContext(ctx context.Context) GetAclPoliciesPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclPoliciesPolicyOutput)
}

// GetAclPoliciesPolicyArrayInput is an input type that accepts GetAclPoliciesPolicyArray and GetAclPoliciesPolicyArrayOutput values.
// You can construct a concrete instance of `GetAclPoliciesPolicyArrayInput` via:
//
//          GetAclPoliciesPolicyArray{ GetAclPoliciesPolicyArgs{...} }
type GetAclPoliciesPolicyArrayInput interface {
	pulumi.Input

	ToGetAclPoliciesPolicyArrayOutput() GetAclPoliciesPolicyArrayOutput
	ToGetAclPoliciesPolicyArrayOutputWithContext(context.Context) GetAclPoliciesPolicyArrayOutput
}

type GetAclPoliciesPolicyArray []GetAclPoliciesPolicyInput

func (GetAclPoliciesPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclPoliciesPolicy)(nil)).Elem()
}

func (i GetAclPoliciesPolicyArray) ToGetAclPoliciesPolicyArrayOutput() GetAclPoliciesPolicyArrayOutput {
	return i.ToGetAclPoliciesPolicyArrayOutputWithContext(context.Background())
}

func (i GetAclPoliciesPolicyArray) ToGetAclPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetAclPoliciesPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclPoliciesPolicyArrayOutput)
}

type GetAclPoliciesPolicyOutput struct{ *pulumi.OutputState }

func (GetAclPoliciesPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclPoliciesPolicy)(nil)).Elem()
}

func (o GetAclPoliciesPolicyOutput) ToGetAclPoliciesPolicyOutput() GetAclPoliciesPolicyOutput {
	return o
}

func (o GetAclPoliciesPolicyOutput) ToGetAclPoliciesPolicyOutputWithContext(ctx context.Context) GetAclPoliciesPolicyOutput {
	return o
}

func (o GetAclPoliciesPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclPoliciesPolicy) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetAclPoliciesPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclPoliciesPolicy) string { return v.Name }).(pulumi.StringOutput)
}

type GetAclPoliciesPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetAclPoliciesPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclPoliciesPolicy)(nil)).Elem()
}

func (o GetAclPoliciesPolicyArrayOutput) ToGetAclPoliciesPolicyArrayOutput() GetAclPoliciesPolicyArrayOutput {
	return o
}

func (o GetAclPoliciesPolicyArrayOutput) ToGetAclPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetAclPoliciesPolicyArrayOutput {
	return o
}

func (o GetAclPoliciesPolicyArrayOutput) Index(i pulumi.IntInput) GetAclPoliciesPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclPoliciesPolicy {
		return vs[0].([]GetAclPoliciesPolicy)[vs[1].(int)]
	}).(GetAclPoliciesPolicyOutput)
}

type GetAclTokensAclToken struct {
	AccessorId string   `pulumi:"accessorId"`
	CreateTime string   `pulumi:"createTime"`
	Global     bool     `pulumi:"global"`
	Name       string   `pulumi:"name"`
	Policies   []string `pulumi:"policies"`
	Type       string   `pulumi:"type"`
}

// GetAclTokensAclTokenInput is an input type that accepts GetAclTokensAclTokenArgs and GetAclTokensAclTokenOutput values.
// You can construct a concrete instance of `GetAclTokensAclTokenInput` via:
//
//          GetAclTokensAclTokenArgs{...}
type GetAclTokensAclTokenInput interface {
	pulumi.Input

	ToGetAclTokensAclTokenOutput() GetAclTokensAclTokenOutput
	ToGetAclTokensAclTokenOutputWithContext(context.Context) GetAclTokensAclTokenOutput
}

type GetAclTokensAclTokenArgs struct {
	AccessorId pulumi.StringInput      `pulumi:"accessorId"`
	CreateTime pulumi.StringInput      `pulumi:"createTime"`
	Global     pulumi.BoolInput        `pulumi:"global"`
	Name       pulumi.StringInput      `pulumi:"name"`
	Policies   pulumi.StringArrayInput `pulumi:"policies"`
	Type       pulumi.StringInput      `pulumi:"type"`
}

func (GetAclTokensAclTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTokensAclToken)(nil)).Elem()
}

func (i GetAclTokensAclTokenArgs) ToGetAclTokensAclTokenOutput() GetAclTokensAclTokenOutput {
	return i.ToGetAclTokensAclTokenOutputWithContext(context.Background())
}

func (i GetAclTokensAclTokenArgs) ToGetAclTokensAclTokenOutputWithContext(ctx context.Context) GetAclTokensAclTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTokensAclTokenOutput)
}

// GetAclTokensAclTokenArrayInput is an input type that accepts GetAclTokensAclTokenArray and GetAclTokensAclTokenArrayOutput values.
// You can construct a concrete instance of `GetAclTokensAclTokenArrayInput` via:
//
//          GetAclTokensAclTokenArray{ GetAclTokensAclTokenArgs{...} }
type GetAclTokensAclTokenArrayInput interface {
	pulumi.Input

	ToGetAclTokensAclTokenArrayOutput() GetAclTokensAclTokenArrayOutput
	ToGetAclTokensAclTokenArrayOutputWithContext(context.Context) GetAclTokensAclTokenArrayOutput
}

type GetAclTokensAclTokenArray []GetAclTokensAclTokenInput

func (GetAclTokensAclTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTokensAclToken)(nil)).Elem()
}

func (i GetAclTokensAclTokenArray) ToGetAclTokensAclTokenArrayOutput() GetAclTokensAclTokenArrayOutput {
	return i.ToGetAclTokensAclTokenArrayOutputWithContext(context.Background())
}

func (i GetAclTokensAclTokenArray) ToGetAclTokensAclTokenArrayOutputWithContext(ctx context.Context) GetAclTokensAclTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTokensAclTokenArrayOutput)
}

type GetAclTokensAclTokenOutput struct{ *pulumi.OutputState }

func (GetAclTokensAclTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTokensAclToken)(nil)).Elem()
}

func (o GetAclTokensAclTokenOutput) ToGetAclTokensAclTokenOutput() GetAclTokensAclTokenOutput {
	return o
}

func (o GetAclTokensAclTokenOutput) ToGetAclTokensAclTokenOutputWithContext(ctx context.Context) GetAclTokensAclTokenOutput {
	return o
}

func (o GetAclTokensAclTokenOutput) AccessorId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) string { return v.AccessorId }).(pulumi.StringOutput)
}

func (o GetAclTokensAclTokenOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o GetAclTokensAclTokenOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) bool { return v.Global }).(pulumi.BoolOutput)
}

func (o GetAclTokensAclTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAclTokensAclTokenOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

func (o GetAclTokensAclTokenOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) string { return v.Type }).(pulumi.StringOutput)
}

type GetAclTokensAclTokenArrayOutput struct{ *pulumi.OutputState }

func (GetAclTokensAclTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTokensAclToken)(nil)).Elem()
}

func (o GetAclTokensAclTokenArrayOutput) ToGetAclTokensAclTokenArrayOutput() GetAclTokensAclTokenArrayOutput {
	return o
}

func (o GetAclTokensAclTokenArrayOutput) ToGetAclTokensAclTokenArrayOutputWithContext(ctx context.Context) GetAclTokensAclTokenArrayOutput {
	return o
}

func (o GetAclTokensAclTokenArrayOutput) Index(i pulumi.IntInput) GetAclTokensAclTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclTokensAclToken {
		return vs[0].([]GetAclTokensAclToken)[vs[1].(int)]
	}).(GetAclTokensAclTokenOutput)
}

type GetJobConstraint struct {
	Ltarget string `pulumi:"ltarget"`
	Operand string `pulumi:"operand"`
	Rtarget string `pulumi:"rtarget"`
}

// GetJobConstraintInput is an input type that accepts GetJobConstraintArgs and GetJobConstraintOutput values.
// You can construct a concrete instance of `GetJobConstraintInput` via:
//
//          GetJobConstraintArgs{...}
type GetJobConstraintInput interface {
	pulumi.Input

	ToGetJobConstraintOutput() GetJobConstraintOutput
	ToGetJobConstraintOutputWithContext(context.Context) GetJobConstraintOutput
}

type GetJobConstraintArgs struct {
	Ltarget pulumi.StringInput `pulumi:"ltarget"`
	Operand pulumi.StringInput `pulumi:"operand"`
	Rtarget pulumi.StringInput `pulumi:"rtarget"`
}

func (GetJobConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobConstraint)(nil)).Elem()
}

func (i GetJobConstraintArgs) ToGetJobConstraintOutput() GetJobConstraintOutput {
	return i.ToGetJobConstraintOutputWithContext(context.Background())
}

func (i GetJobConstraintArgs) ToGetJobConstraintOutputWithContext(ctx context.Context) GetJobConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobConstraintOutput)
}

// GetJobConstraintArrayInput is an input type that accepts GetJobConstraintArray and GetJobConstraintArrayOutput values.
// You can construct a concrete instance of `GetJobConstraintArrayInput` via:
//
//          GetJobConstraintArray{ GetJobConstraintArgs{...} }
type GetJobConstraintArrayInput interface {
	pulumi.Input

	ToGetJobConstraintArrayOutput() GetJobConstraintArrayOutput
	ToGetJobConstraintArrayOutputWithContext(context.Context) GetJobConstraintArrayOutput
}

type GetJobConstraintArray []GetJobConstraintInput

func (GetJobConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobConstraint)(nil)).Elem()
}

func (i GetJobConstraintArray) ToGetJobConstraintArrayOutput() GetJobConstraintArrayOutput {
	return i.ToGetJobConstraintArrayOutputWithContext(context.Background())
}

func (i GetJobConstraintArray) ToGetJobConstraintArrayOutputWithContext(ctx context.Context) GetJobConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobConstraintArrayOutput)
}

type GetJobConstraintOutput struct{ *pulumi.OutputState }

func (GetJobConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobConstraint)(nil)).Elem()
}

func (o GetJobConstraintOutput) ToGetJobConstraintOutput() GetJobConstraintOutput {
	return o
}

func (o GetJobConstraintOutput) ToGetJobConstraintOutputWithContext(ctx context.Context) GetJobConstraintOutput {
	return o
}

func (o GetJobConstraintOutput) Ltarget() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobConstraint) string { return v.Ltarget }).(pulumi.StringOutput)
}

func (o GetJobConstraintOutput) Operand() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobConstraint) string { return v.Operand }).(pulumi.StringOutput)
}

func (o GetJobConstraintOutput) Rtarget() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobConstraint) string { return v.Rtarget }).(pulumi.StringOutput)
}

type GetJobConstraintArrayOutput struct{ *pulumi.OutputState }

func (GetJobConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobConstraint)(nil)).Elem()
}

func (o GetJobConstraintArrayOutput) ToGetJobConstraintArrayOutput() GetJobConstraintArrayOutput {
	return o
}

func (o GetJobConstraintArrayOutput) ToGetJobConstraintArrayOutputWithContext(ctx context.Context) GetJobConstraintArrayOutput {
	return o
}

func (o GetJobConstraintArrayOutput) Index(i pulumi.IntInput) GetJobConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobConstraint {
		return vs[0].([]GetJobConstraint)[vs[1].(int)]
	}).(GetJobConstraintOutput)
}

type GetJobPeriodicConfig struct {
	Enabled         bool   `pulumi:"enabled"`
	ProhibitOverlap bool   `pulumi:"prohibitOverlap"`
	Spec            string `pulumi:"spec"`
	SpecType        string `pulumi:"specType"`
	Timezone        string `pulumi:"timezone"`
}

// GetJobPeriodicConfigInput is an input type that accepts GetJobPeriodicConfigArgs and GetJobPeriodicConfigOutput values.
// You can construct a concrete instance of `GetJobPeriodicConfigInput` via:
//
//          GetJobPeriodicConfigArgs{...}
type GetJobPeriodicConfigInput interface {
	pulumi.Input

	ToGetJobPeriodicConfigOutput() GetJobPeriodicConfigOutput
	ToGetJobPeriodicConfigOutputWithContext(context.Context) GetJobPeriodicConfigOutput
}

type GetJobPeriodicConfigArgs struct {
	Enabled         pulumi.BoolInput   `pulumi:"enabled"`
	ProhibitOverlap pulumi.BoolInput   `pulumi:"prohibitOverlap"`
	Spec            pulumi.StringInput `pulumi:"spec"`
	SpecType        pulumi.StringInput `pulumi:"specType"`
	Timezone        pulumi.StringInput `pulumi:"timezone"`
}

func (GetJobPeriodicConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobPeriodicConfig)(nil)).Elem()
}

func (i GetJobPeriodicConfigArgs) ToGetJobPeriodicConfigOutput() GetJobPeriodicConfigOutput {
	return i.ToGetJobPeriodicConfigOutputWithContext(context.Background())
}

func (i GetJobPeriodicConfigArgs) ToGetJobPeriodicConfigOutputWithContext(ctx context.Context) GetJobPeriodicConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobPeriodicConfigOutput)
}

// GetJobPeriodicConfigArrayInput is an input type that accepts GetJobPeriodicConfigArray and GetJobPeriodicConfigArrayOutput values.
// You can construct a concrete instance of `GetJobPeriodicConfigArrayInput` via:
//
//          GetJobPeriodicConfigArray{ GetJobPeriodicConfigArgs{...} }
type GetJobPeriodicConfigArrayInput interface {
	pulumi.Input

	ToGetJobPeriodicConfigArrayOutput() GetJobPeriodicConfigArrayOutput
	ToGetJobPeriodicConfigArrayOutputWithContext(context.Context) GetJobPeriodicConfigArrayOutput
}

type GetJobPeriodicConfigArray []GetJobPeriodicConfigInput

func (GetJobPeriodicConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobPeriodicConfig)(nil)).Elem()
}

func (i GetJobPeriodicConfigArray) ToGetJobPeriodicConfigArrayOutput() GetJobPeriodicConfigArrayOutput {
	return i.ToGetJobPeriodicConfigArrayOutputWithContext(context.Background())
}

func (i GetJobPeriodicConfigArray) ToGetJobPeriodicConfigArrayOutputWithContext(ctx context.Context) GetJobPeriodicConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobPeriodicConfigArrayOutput)
}

type GetJobPeriodicConfigOutput struct{ *pulumi.OutputState }

func (GetJobPeriodicConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobPeriodicConfig)(nil)).Elem()
}

func (o GetJobPeriodicConfigOutput) ToGetJobPeriodicConfigOutput() GetJobPeriodicConfigOutput {
	return o
}

func (o GetJobPeriodicConfigOutput) ToGetJobPeriodicConfigOutputWithContext(ctx context.Context) GetJobPeriodicConfigOutput {
	return o
}

func (o GetJobPeriodicConfigOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobPeriodicConfig) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetJobPeriodicConfigOutput) ProhibitOverlap() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobPeriodicConfig) bool { return v.ProhibitOverlap }).(pulumi.BoolOutput)
}

func (o GetJobPeriodicConfigOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobPeriodicConfig) string { return v.Spec }).(pulumi.StringOutput)
}

func (o GetJobPeriodicConfigOutput) SpecType() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobPeriodicConfig) string { return v.SpecType }).(pulumi.StringOutput)
}

func (o GetJobPeriodicConfigOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobPeriodicConfig) string { return v.Timezone }).(pulumi.StringOutput)
}

type GetJobPeriodicConfigArrayOutput struct{ *pulumi.OutputState }

func (GetJobPeriodicConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobPeriodicConfig)(nil)).Elem()
}

func (o GetJobPeriodicConfigArrayOutput) ToGetJobPeriodicConfigArrayOutput() GetJobPeriodicConfigArrayOutput {
	return o
}

func (o GetJobPeriodicConfigArrayOutput) ToGetJobPeriodicConfigArrayOutputWithContext(ctx context.Context) GetJobPeriodicConfigArrayOutput {
	return o
}

func (o GetJobPeriodicConfigArrayOutput) Index(i pulumi.IntInput) GetJobPeriodicConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobPeriodicConfig {
		return vs[0].([]GetJobPeriodicConfig)[vs[1].(int)]
	}).(GetJobPeriodicConfigOutput)
}

type GetJobTaskGroup struct {
	Count   int                     `pulumi:"count"`
	Meta    map[string]interface{}  `pulumi:"meta"`
	Name    string                  `pulumi:"name"`
	Tasks   []GetJobTaskGroupTask   `pulumi:"tasks"`
	Volumes []GetJobTaskGroupVolume `pulumi:"volumes"`
}

// GetJobTaskGroupInput is an input type that accepts GetJobTaskGroupArgs and GetJobTaskGroupOutput values.
// You can construct a concrete instance of `GetJobTaskGroupInput` via:
//
//          GetJobTaskGroupArgs{...}
type GetJobTaskGroupInput interface {
	pulumi.Input

	ToGetJobTaskGroupOutput() GetJobTaskGroupOutput
	ToGetJobTaskGroupOutputWithContext(context.Context) GetJobTaskGroupOutput
}

type GetJobTaskGroupArgs struct {
	Count   pulumi.IntInput                 `pulumi:"count"`
	Meta    pulumi.MapInput                 `pulumi:"meta"`
	Name    pulumi.StringInput              `pulumi:"name"`
	Tasks   GetJobTaskGroupTaskArrayInput   `pulumi:"tasks"`
	Volumes GetJobTaskGroupVolumeArrayInput `pulumi:"volumes"`
}

func (GetJobTaskGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroup)(nil)).Elem()
}

func (i GetJobTaskGroupArgs) ToGetJobTaskGroupOutput() GetJobTaskGroupOutput {
	return i.ToGetJobTaskGroupOutputWithContext(context.Background())
}

func (i GetJobTaskGroupArgs) ToGetJobTaskGroupOutputWithContext(ctx context.Context) GetJobTaskGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupOutput)
}

// GetJobTaskGroupArrayInput is an input type that accepts GetJobTaskGroupArray and GetJobTaskGroupArrayOutput values.
// You can construct a concrete instance of `GetJobTaskGroupArrayInput` via:
//
//          GetJobTaskGroupArray{ GetJobTaskGroupArgs{...} }
type GetJobTaskGroupArrayInput interface {
	pulumi.Input

	ToGetJobTaskGroupArrayOutput() GetJobTaskGroupArrayOutput
	ToGetJobTaskGroupArrayOutputWithContext(context.Context) GetJobTaskGroupArrayOutput
}

type GetJobTaskGroupArray []GetJobTaskGroupInput

func (GetJobTaskGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroup)(nil)).Elem()
}

func (i GetJobTaskGroupArray) ToGetJobTaskGroupArrayOutput() GetJobTaskGroupArrayOutput {
	return i.ToGetJobTaskGroupArrayOutputWithContext(context.Background())
}

func (i GetJobTaskGroupArray) ToGetJobTaskGroupArrayOutputWithContext(ctx context.Context) GetJobTaskGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupArrayOutput)
}

type GetJobTaskGroupOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroup)(nil)).Elem()
}

func (o GetJobTaskGroupOutput) ToGetJobTaskGroupOutput() GetJobTaskGroupOutput {
	return o
}

func (o GetJobTaskGroupOutput) ToGetJobTaskGroupOutputWithContext(ctx context.Context) GetJobTaskGroupOutput {
	return o
}

func (o GetJobTaskGroupOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobTaskGroup) int { return v.Count }).(pulumi.IntOutput)
}

func (o GetJobTaskGroupOutput) Meta() pulumi.MapOutput {
	return o.ApplyT(func(v GetJobTaskGroup) map[string]interface{} { return v.Meta }).(pulumi.MapOutput)
}

func (o GetJobTaskGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupOutput) Tasks() GetJobTaskGroupTaskArrayOutput {
	return o.ApplyT(func(v GetJobTaskGroup) []GetJobTaskGroupTask { return v.Tasks }).(GetJobTaskGroupTaskArrayOutput)
}

func (o GetJobTaskGroupOutput) Volumes() GetJobTaskGroupVolumeArrayOutput {
	return o.ApplyT(func(v GetJobTaskGroup) []GetJobTaskGroupVolume { return v.Volumes }).(GetJobTaskGroupVolumeArrayOutput)
}

type GetJobTaskGroupArrayOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroup)(nil)).Elem()
}

func (o GetJobTaskGroupArrayOutput) ToGetJobTaskGroupArrayOutput() GetJobTaskGroupArrayOutput {
	return o
}

func (o GetJobTaskGroupArrayOutput) ToGetJobTaskGroupArrayOutputWithContext(ctx context.Context) GetJobTaskGroupArrayOutput {
	return o
}

func (o GetJobTaskGroupArrayOutput) Index(i pulumi.IntInput) GetJobTaskGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobTaskGroup {
		return vs[0].([]GetJobTaskGroup)[vs[1].(int)]
	}).(GetJobTaskGroupOutput)
}

type GetJobTaskGroupTask struct {
	Driver       string                           `pulumi:"driver"`
	Meta         map[string]interface{}           `pulumi:"meta"`
	Name         string                           `pulumi:"name"`
	VolumeMounts []GetJobTaskGroupTaskVolumeMount `pulumi:"volumeMounts"`
}

// GetJobTaskGroupTaskInput is an input type that accepts GetJobTaskGroupTaskArgs and GetJobTaskGroupTaskOutput values.
// You can construct a concrete instance of `GetJobTaskGroupTaskInput` via:
//
//          GetJobTaskGroupTaskArgs{...}
type GetJobTaskGroupTaskInput interface {
	pulumi.Input

	ToGetJobTaskGroupTaskOutput() GetJobTaskGroupTaskOutput
	ToGetJobTaskGroupTaskOutputWithContext(context.Context) GetJobTaskGroupTaskOutput
}

type GetJobTaskGroupTaskArgs struct {
	Driver       pulumi.StringInput                       `pulumi:"driver"`
	Meta         pulumi.MapInput                          `pulumi:"meta"`
	Name         pulumi.StringInput                       `pulumi:"name"`
	VolumeMounts GetJobTaskGroupTaskVolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (GetJobTaskGroupTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupTask)(nil)).Elem()
}

func (i GetJobTaskGroupTaskArgs) ToGetJobTaskGroupTaskOutput() GetJobTaskGroupTaskOutput {
	return i.ToGetJobTaskGroupTaskOutputWithContext(context.Background())
}

func (i GetJobTaskGroupTaskArgs) ToGetJobTaskGroupTaskOutputWithContext(ctx context.Context) GetJobTaskGroupTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupTaskOutput)
}

// GetJobTaskGroupTaskArrayInput is an input type that accepts GetJobTaskGroupTaskArray and GetJobTaskGroupTaskArrayOutput values.
// You can construct a concrete instance of `GetJobTaskGroupTaskArrayInput` via:
//
//          GetJobTaskGroupTaskArray{ GetJobTaskGroupTaskArgs{...} }
type GetJobTaskGroupTaskArrayInput interface {
	pulumi.Input

	ToGetJobTaskGroupTaskArrayOutput() GetJobTaskGroupTaskArrayOutput
	ToGetJobTaskGroupTaskArrayOutputWithContext(context.Context) GetJobTaskGroupTaskArrayOutput
}

type GetJobTaskGroupTaskArray []GetJobTaskGroupTaskInput

func (GetJobTaskGroupTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupTask)(nil)).Elem()
}

func (i GetJobTaskGroupTaskArray) ToGetJobTaskGroupTaskArrayOutput() GetJobTaskGroupTaskArrayOutput {
	return i.ToGetJobTaskGroupTaskArrayOutputWithContext(context.Background())
}

func (i GetJobTaskGroupTaskArray) ToGetJobTaskGroupTaskArrayOutputWithContext(ctx context.Context) GetJobTaskGroupTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupTaskArrayOutput)
}

type GetJobTaskGroupTaskOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupTask)(nil)).Elem()
}

func (o GetJobTaskGroupTaskOutput) ToGetJobTaskGroupTaskOutput() GetJobTaskGroupTaskOutput {
	return o
}

func (o GetJobTaskGroupTaskOutput) ToGetJobTaskGroupTaskOutputWithContext(ctx context.Context) GetJobTaskGroupTaskOutput {
	return o
}

func (o GetJobTaskGroupTaskOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupTask) string { return v.Driver }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupTaskOutput) Meta() pulumi.MapOutput {
	return o.ApplyT(func(v GetJobTaskGroupTask) map[string]interface{} { return v.Meta }).(pulumi.MapOutput)
}

func (o GetJobTaskGroupTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupTask) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupTaskOutput) VolumeMounts() GetJobTaskGroupTaskVolumeMountArrayOutput {
	return o.ApplyT(func(v GetJobTaskGroupTask) []GetJobTaskGroupTaskVolumeMount { return v.VolumeMounts }).(GetJobTaskGroupTaskVolumeMountArrayOutput)
}

type GetJobTaskGroupTaskArrayOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupTask)(nil)).Elem()
}

func (o GetJobTaskGroupTaskArrayOutput) ToGetJobTaskGroupTaskArrayOutput() GetJobTaskGroupTaskArrayOutput {
	return o
}

func (o GetJobTaskGroupTaskArrayOutput) ToGetJobTaskGroupTaskArrayOutputWithContext(ctx context.Context) GetJobTaskGroupTaskArrayOutput {
	return o
}

func (o GetJobTaskGroupTaskArrayOutput) Index(i pulumi.IntInput) GetJobTaskGroupTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobTaskGroupTask {
		return vs[0].([]GetJobTaskGroupTask)[vs[1].(int)]
	}).(GetJobTaskGroupTaskOutput)
}

type GetJobTaskGroupTaskVolumeMount struct {
	Destination string `pulumi:"destination"`
	ReadOnly    bool   `pulumi:"readOnly"`
	Volume      string `pulumi:"volume"`
}

// GetJobTaskGroupTaskVolumeMountInput is an input type that accepts GetJobTaskGroupTaskVolumeMountArgs and GetJobTaskGroupTaskVolumeMountOutput values.
// You can construct a concrete instance of `GetJobTaskGroupTaskVolumeMountInput` via:
//
//          GetJobTaskGroupTaskVolumeMountArgs{...}
type GetJobTaskGroupTaskVolumeMountInput interface {
	pulumi.Input

	ToGetJobTaskGroupTaskVolumeMountOutput() GetJobTaskGroupTaskVolumeMountOutput
	ToGetJobTaskGroupTaskVolumeMountOutputWithContext(context.Context) GetJobTaskGroupTaskVolumeMountOutput
}

type GetJobTaskGroupTaskVolumeMountArgs struct {
	Destination pulumi.StringInput `pulumi:"destination"`
	ReadOnly    pulumi.BoolInput   `pulumi:"readOnly"`
	Volume      pulumi.StringInput `pulumi:"volume"`
}

func (GetJobTaskGroupTaskVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (i GetJobTaskGroupTaskVolumeMountArgs) ToGetJobTaskGroupTaskVolumeMountOutput() GetJobTaskGroupTaskVolumeMountOutput {
	return i.ToGetJobTaskGroupTaskVolumeMountOutputWithContext(context.Background())
}

func (i GetJobTaskGroupTaskVolumeMountArgs) ToGetJobTaskGroupTaskVolumeMountOutputWithContext(ctx context.Context) GetJobTaskGroupTaskVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupTaskVolumeMountOutput)
}

// GetJobTaskGroupTaskVolumeMountArrayInput is an input type that accepts GetJobTaskGroupTaskVolumeMountArray and GetJobTaskGroupTaskVolumeMountArrayOutput values.
// You can construct a concrete instance of `GetJobTaskGroupTaskVolumeMountArrayInput` via:
//
//          GetJobTaskGroupTaskVolumeMountArray{ GetJobTaskGroupTaskVolumeMountArgs{...} }
type GetJobTaskGroupTaskVolumeMountArrayInput interface {
	pulumi.Input

	ToGetJobTaskGroupTaskVolumeMountArrayOutput() GetJobTaskGroupTaskVolumeMountArrayOutput
	ToGetJobTaskGroupTaskVolumeMountArrayOutputWithContext(context.Context) GetJobTaskGroupTaskVolumeMountArrayOutput
}

type GetJobTaskGroupTaskVolumeMountArray []GetJobTaskGroupTaskVolumeMountInput

func (GetJobTaskGroupTaskVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (i GetJobTaskGroupTaskVolumeMountArray) ToGetJobTaskGroupTaskVolumeMountArrayOutput() GetJobTaskGroupTaskVolumeMountArrayOutput {
	return i.ToGetJobTaskGroupTaskVolumeMountArrayOutputWithContext(context.Background())
}

func (i GetJobTaskGroupTaskVolumeMountArray) ToGetJobTaskGroupTaskVolumeMountArrayOutputWithContext(ctx context.Context) GetJobTaskGroupTaskVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupTaskVolumeMountArrayOutput)
}

type GetJobTaskGroupTaskVolumeMountOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupTaskVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (o GetJobTaskGroupTaskVolumeMountOutput) ToGetJobTaskGroupTaskVolumeMountOutput() GetJobTaskGroupTaskVolumeMountOutput {
	return o
}

func (o GetJobTaskGroupTaskVolumeMountOutput) ToGetJobTaskGroupTaskVolumeMountOutputWithContext(ctx context.Context) GetJobTaskGroupTaskVolumeMountOutput {
	return o
}

func (o GetJobTaskGroupTaskVolumeMountOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupTaskVolumeMount) string { return v.Destination }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupTaskVolumeMountOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobTaskGroupTaskVolumeMount) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

func (o GetJobTaskGroupTaskVolumeMountOutput) Volume() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupTaskVolumeMount) string { return v.Volume }).(pulumi.StringOutput)
}

type GetJobTaskGroupTaskVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupTaskVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (o GetJobTaskGroupTaskVolumeMountArrayOutput) ToGetJobTaskGroupTaskVolumeMountArrayOutput() GetJobTaskGroupTaskVolumeMountArrayOutput {
	return o
}

func (o GetJobTaskGroupTaskVolumeMountArrayOutput) ToGetJobTaskGroupTaskVolumeMountArrayOutputWithContext(ctx context.Context) GetJobTaskGroupTaskVolumeMountArrayOutput {
	return o
}

func (o GetJobTaskGroupTaskVolumeMountArrayOutput) Index(i pulumi.IntInput) GetJobTaskGroupTaskVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobTaskGroupTaskVolumeMount {
		return vs[0].([]GetJobTaskGroupTaskVolumeMount)[vs[1].(int)]
	}).(GetJobTaskGroupTaskVolumeMountOutput)
}

type GetJobTaskGroupVolume struct {
	Name     string `pulumi:"name"`
	ReadOnly bool   `pulumi:"readOnly"`
	Source   string `pulumi:"source"`
	Type     string `pulumi:"type"`
}

// GetJobTaskGroupVolumeInput is an input type that accepts GetJobTaskGroupVolumeArgs and GetJobTaskGroupVolumeOutput values.
// You can construct a concrete instance of `GetJobTaskGroupVolumeInput` via:
//
//          GetJobTaskGroupVolumeArgs{...}
type GetJobTaskGroupVolumeInput interface {
	pulumi.Input

	ToGetJobTaskGroupVolumeOutput() GetJobTaskGroupVolumeOutput
	ToGetJobTaskGroupVolumeOutputWithContext(context.Context) GetJobTaskGroupVolumeOutput
}

type GetJobTaskGroupVolumeArgs struct {
	Name     pulumi.StringInput `pulumi:"name"`
	ReadOnly pulumi.BoolInput   `pulumi:"readOnly"`
	Source   pulumi.StringInput `pulumi:"source"`
	Type     pulumi.StringInput `pulumi:"type"`
}

func (GetJobTaskGroupVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupVolume)(nil)).Elem()
}

func (i GetJobTaskGroupVolumeArgs) ToGetJobTaskGroupVolumeOutput() GetJobTaskGroupVolumeOutput {
	return i.ToGetJobTaskGroupVolumeOutputWithContext(context.Background())
}

func (i GetJobTaskGroupVolumeArgs) ToGetJobTaskGroupVolumeOutputWithContext(ctx context.Context) GetJobTaskGroupVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupVolumeOutput)
}

// GetJobTaskGroupVolumeArrayInput is an input type that accepts GetJobTaskGroupVolumeArray and GetJobTaskGroupVolumeArrayOutput values.
// You can construct a concrete instance of `GetJobTaskGroupVolumeArrayInput` via:
//
//          GetJobTaskGroupVolumeArray{ GetJobTaskGroupVolumeArgs{...} }
type GetJobTaskGroupVolumeArrayInput interface {
	pulumi.Input

	ToGetJobTaskGroupVolumeArrayOutput() GetJobTaskGroupVolumeArrayOutput
	ToGetJobTaskGroupVolumeArrayOutputWithContext(context.Context) GetJobTaskGroupVolumeArrayOutput
}

type GetJobTaskGroupVolumeArray []GetJobTaskGroupVolumeInput

func (GetJobTaskGroupVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupVolume)(nil)).Elem()
}

func (i GetJobTaskGroupVolumeArray) ToGetJobTaskGroupVolumeArrayOutput() GetJobTaskGroupVolumeArrayOutput {
	return i.ToGetJobTaskGroupVolumeArrayOutputWithContext(context.Background())
}

func (i GetJobTaskGroupVolumeArray) ToGetJobTaskGroupVolumeArrayOutputWithContext(ctx context.Context) GetJobTaskGroupVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupVolumeArrayOutput)
}

type GetJobTaskGroupVolumeOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupVolume)(nil)).Elem()
}

func (o GetJobTaskGroupVolumeOutput) ToGetJobTaskGroupVolumeOutput() GetJobTaskGroupVolumeOutput {
	return o
}

func (o GetJobTaskGroupVolumeOutput) ToGetJobTaskGroupVolumeOutputWithContext(ctx context.Context) GetJobTaskGroupVolumeOutput {
	return o
}

func (o GetJobTaskGroupVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupVolume) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupVolumeOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobTaskGroupVolume) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

func (o GetJobTaskGroupVolumeOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupVolume) string { return v.Source }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupVolumeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupVolume) string { return v.Type }).(pulumi.StringOutput)
}

type GetJobTaskGroupVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupVolume)(nil)).Elem()
}

func (o GetJobTaskGroupVolumeArrayOutput) ToGetJobTaskGroupVolumeArrayOutput() GetJobTaskGroupVolumeArrayOutput {
	return o
}

func (o GetJobTaskGroupVolumeArrayOutput) ToGetJobTaskGroupVolumeArrayOutputWithContext(ctx context.Context) GetJobTaskGroupVolumeArrayOutput {
	return o
}

func (o GetJobTaskGroupVolumeArrayOutput) Index(i pulumi.IntInput) GetJobTaskGroupVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobTaskGroupVolume {
		return vs[0].([]GetJobTaskGroupVolume)[vs[1].(int)]
	}).(GetJobTaskGroupVolumeOutput)
}

type GetPluginNode struct {
	Healthy            bool   `pulumi:"healthy"`
	HealthyDescription string `pulumi:"healthyDescription"`
	Name               string `pulumi:"name"`
}

// GetPluginNodeInput is an input type that accepts GetPluginNodeArgs and GetPluginNodeOutput values.
// You can construct a concrete instance of `GetPluginNodeInput` via:
//
//          GetPluginNodeArgs{...}
type GetPluginNodeInput interface {
	pulumi.Input

	ToGetPluginNodeOutput() GetPluginNodeOutput
	ToGetPluginNodeOutputWithContext(context.Context) GetPluginNodeOutput
}

type GetPluginNodeArgs struct {
	Healthy            pulumi.BoolInput   `pulumi:"healthy"`
	HealthyDescription pulumi.StringInput `pulumi:"healthyDescription"`
	Name               pulumi.StringInput `pulumi:"name"`
}

func (GetPluginNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPluginNode)(nil)).Elem()
}

func (i GetPluginNodeArgs) ToGetPluginNodeOutput() GetPluginNodeOutput {
	return i.ToGetPluginNodeOutputWithContext(context.Background())
}

func (i GetPluginNodeArgs) ToGetPluginNodeOutputWithContext(ctx context.Context) GetPluginNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPluginNodeOutput)
}

// GetPluginNodeArrayInput is an input type that accepts GetPluginNodeArray and GetPluginNodeArrayOutput values.
// You can construct a concrete instance of `GetPluginNodeArrayInput` via:
//
//          GetPluginNodeArray{ GetPluginNodeArgs{...} }
type GetPluginNodeArrayInput interface {
	pulumi.Input

	ToGetPluginNodeArrayOutput() GetPluginNodeArrayOutput
	ToGetPluginNodeArrayOutputWithContext(context.Context) GetPluginNodeArrayOutput
}

type GetPluginNodeArray []GetPluginNodeInput

func (GetPluginNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPluginNode)(nil)).Elem()
}

func (i GetPluginNodeArray) ToGetPluginNodeArrayOutput() GetPluginNodeArrayOutput {
	return i.ToGetPluginNodeArrayOutputWithContext(context.Background())
}

func (i GetPluginNodeArray) ToGetPluginNodeArrayOutputWithContext(ctx context.Context) GetPluginNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPluginNodeArrayOutput)
}

type GetPluginNodeOutput struct{ *pulumi.OutputState }

func (GetPluginNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPluginNode)(nil)).Elem()
}

func (o GetPluginNodeOutput) ToGetPluginNodeOutput() GetPluginNodeOutput {
	return o
}

func (o GetPluginNodeOutput) ToGetPluginNodeOutputWithContext(ctx context.Context) GetPluginNodeOutput {
	return o
}

func (o GetPluginNodeOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPluginNode) bool { return v.Healthy }).(pulumi.BoolOutput)
}

func (o GetPluginNodeOutput) HealthyDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetPluginNode) string { return v.HealthyDescription }).(pulumi.StringOutput)
}

func (o GetPluginNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPluginNode) string { return v.Name }).(pulumi.StringOutput)
}

type GetPluginNodeArrayOutput struct{ *pulumi.OutputState }

func (GetPluginNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPluginNode)(nil)).Elem()
}

func (o GetPluginNodeArrayOutput) ToGetPluginNodeArrayOutput() GetPluginNodeArrayOutput {
	return o
}

func (o GetPluginNodeArrayOutput) ToGetPluginNodeArrayOutputWithContext(ctx context.Context) GetPluginNodeArrayOutput {
	return o
}

func (o GetPluginNodeArrayOutput) Index(i pulumi.IntInput) GetPluginNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPluginNode {
		return vs[0].([]GetPluginNode)[vs[1].(int)]
	}).(GetPluginNodeOutput)
}

type GetScalingPoliciesPolicy struct {
	Enabled bool                   `pulumi:"enabled"`
	Id      string                 `pulumi:"id"`
	Target  map[string]interface{} `pulumi:"target"`
	// `(string)` - An optional string to filter scaling policies based on policy type. If not provided, policies of all types are returned.
	Type string `pulumi:"type"`
}

// GetScalingPoliciesPolicyInput is an input type that accepts GetScalingPoliciesPolicyArgs and GetScalingPoliciesPolicyOutput values.
// You can construct a concrete instance of `GetScalingPoliciesPolicyInput` via:
//
//          GetScalingPoliciesPolicyArgs{...}
type GetScalingPoliciesPolicyInput interface {
	pulumi.Input

	ToGetScalingPoliciesPolicyOutput() GetScalingPoliciesPolicyOutput
	ToGetScalingPoliciesPolicyOutputWithContext(context.Context) GetScalingPoliciesPolicyOutput
}

type GetScalingPoliciesPolicyArgs struct {
	Enabled pulumi.BoolInput   `pulumi:"enabled"`
	Id      pulumi.StringInput `pulumi:"id"`
	Target  pulumi.MapInput    `pulumi:"target"`
	// `(string)` - An optional string to filter scaling policies based on policy type. If not provided, policies of all types are returned.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetScalingPoliciesPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScalingPoliciesPolicy)(nil)).Elem()
}

func (i GetScalingPoliciesPolicyArgs) ToGetScalingPoliciesPolicyOutput() GetScalingPoliciesPolicyOutput {
	return i.ToGetScalingPoliciesPolicyOutputWithContext(context.Background())
}

func (i GetScalingPoliciesPolicyArgs) ToGetScalingPoliciesPolicyOutputWithContext(ctx context.Context) GetScalingPoliciesPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScalingPoliciesPolicyOutput)
}

// GetScalingPoliciesPolicyArrayInput is an input type that accepts GetScalingPoliciesPolicyArray and GetScalingPoliciesPolicyArrayOutput values.
// You can construct a concrete instance of `GetScalingPoliciesPolicyArrayInput` via:
//
//          GetScalingPoliciesPolicyArray{ GetScalingPoliciesPolicyArgs{...} }
type GetScalingPoliciesPolicyArrayInput interface {
	pulumi.Input

	ToGetScalingPoliciesPolicyArrayOutput() GetScalingPoliciesPolicyArrayOutput
	ToGetScalingPoliciesPolicyArrayOutputWithContext(context.Context) GetScalingPoliciesPolicyArrayOutput
}

type GetScalingPoliciesPolicyArray []GetScalingPoliciesPolicyInput

func (GetScalingPoliciesPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScalingPoliciesPolicy)(nil)).Elem()
}

func (i GetScalingPoliciesPolicyArray) ToGetScalingPoliciesPolicyArrayOutput() GetScalingPoliciesPolicyArrayOutput {
	return i.ToGetScalingPoliciesPolicyArrayOutputWithContext(context.Background())
}

func (i GetScalingPoliciesPolicyArray) ToGetScalingPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetScalingPoliciesPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScalingPoliciesPolicyArrayOutput)
}

type GetScalingPoliciesPolicyOutput struct{ *pulumi.OutputState }

func (GetScalingPoliciesPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScalingPoliciesPolicy)(nil)).Elem()
}

func (o GetScalingPoliciesPolicyOutput) ToGetScalingPoliciesPolicyOutput() GetScalingPoliciesPolicyOutput {
	return o
}

func (o GetScalingPoliciesPolicyOutput) ToGetScalingPoliciesPolicyOutputWithContext(ctx context.Context) GetScalingPoliciesPolicyOutput {
	return o
}

func (o GetScalingPoliciesPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetScalingPoliciesPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetScalingPoliciesPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetScalingPoliciesPolicy) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetScalingPoliciesPolicyOutput) Target() pulumi.MapOutput {
	return o.ApplyT(func(v GetScalingPoliciesPolicy) map[string]interface{} { return v.Target }).(pulumi.MapOutput)
}

// `(string)` - An optional string to filter scaling policies based on policy type. If not provided, policies of all types are returned.
func (o GetScalingPoliciesPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetScalingPoliciesPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type GetScalingPoliciesPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetScalingPoliciesPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScalingPoliciesPolicy)(nil)).Elem()
}

func (o GetScalingPoliciesPolicyArrayOutput) ToGetScalingPoliciesPolicyArrayOutput() GetScalingPoliciesPolicyArrayOutput {
	return o
}

func (o GetScalingPoliciesPolicyArrayOutput) ToGetScalingPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetScalingPoliciesPolicyArrayOutput {
	return o
}

func (o GetScalingPoliciesPolicyArrayOutput) Index(i pulumi.IntInput) GetScalingPoliciesPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScalingPoliciesPolicy {
		return vs[0].([]GetScalingPoliciesPolicy)[vs[1].(int)]
	}).(GetScalingPoliciesPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(ExternalVolumeCapabilityOutput{})
	pulumi.RegisterOutputType(ExternalVolumeCapabilityArrayOutput{})
	pulumi.RegisterOutputType(ExternalVolumeMountOptionsOutput{})
	pulumi.RegisterOutputType(ExternalVolumeMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(JobHcl2Output{})
	pulumi.RegisterOutputType(JobHcl2PtrOutput{})
	pulumi.RegisterOutputType(JobTaskGroupOutput{})
	pulumi.RegisterOutputType(JobTaskGroupArrayOutput{})
	pulumi.RegisterOutputType(JobTaskGroupTaskOutput{})
	pulumi.RegisterOutputType(JobTaskGroupTaskArrayOutput{})
	pulumi.RegisterOutputType(JobTaskGroupTaskVolumeMountOutput{})
	pulumi.RegisterOutputType(JobTaskGroupTaskVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(JobTaskGroupVolumeOutput{})
	pulumi.RegisterOutputType(JobTaskGroupVolumeArrayOutput{})
	pulumi.RegisterOutputType(ProviderHeaderOutput{})
	pulumi.RegisterOutputType(ProviderHeaderArrayOutput{})
	pulumi.RegisterOutputType(QuoteSpecificationLimitOutput{})
	pulumi.RegisterOutputType(QuoteSpecificationLimitArrayOutput{})
	pulumi.RegisterOutputType(QuoteSpecificationLimitRegionLimitOutput{})
	pulumi.RegisterOutputType(VolumeCapabilityOutput{})
	pulumi.RegisterOutputType(VolumeCapabilityArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountOptionsOutput{})
	pulumi.RegisterOutputType(VolumeMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(GetAclPoliciesPolicyOutput{})
	pulumi.RegisterOutputType(GetAclPoliciesPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetAclTokensAclTokenOutput{})
	pulumi.RegisterOutputType(GetAclTokensAclTokenArrayOutput{})
	pulumi.RegisterOutputType(GetJobConstraintOutput{})
	pulumi.RegisterOutputType(GetJobConstraintArrayOutput{})
	pulumi.RegisterOutputType(GetJobPeriodicConfigOutput{})
	pulumi.RegisterOutputType(GetJobPeriodicConfigArrayOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupArrayOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupTaskOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupTaskArrayOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupTaskVolumeMountOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupTaskVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupVolumeOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetPluginNodeOutput{})
	pulumi.RegisterOutputType(GetPluginNodeArrayOutput{})
	pulumi.RegisterOutputType(GetScalingPoliciesPolicyOutput{})
	pulumi.RegisterOutputType(GetScalingPoliciesPolicyArrayOutput{})
}
