// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AclAuthMethodConfig struct {
	// `([]string: <optional>)` - A list of allowed values
	// that can be used for the redirect URI.
	AllowedRedirectUris []string `pulumi:"allowedRedirectUris"`
	// `([]string: <optional>)` - List of auth claims that are
	// valid for login.
	BoundAudiences []string `pulumi:"boundAudiences"`
	// `([]string: <optional>)` - The value against which to match
	// the iss claim in a JWT.
	BoundIssuers []string `pulumi:"boundIssuers"`
	// Mappings of claims (key) that will be copied to a metadata field (value).
	ClaimMappings map[string]string `pulumi:"claimMappings"`
	// `(string: <optional>)` - Duration of leeway when validating
	// all claims in the form of a time duration such as "5m" or "1h".
	ClockSkewLeeway *string `pulumi:"clockSkewLeeway"`
	// `([]string: <optional>)` - PEM encoded CA certs for use
	// by the TLS client used to talk with the OIDC Discovery URL.
	DiscoveryCaPems []string `pulumi:"discoveryCaPems"`
	// `(string: <optional>)` - Duration of leeway when validating
	// expiration of a JWT in the form of a time duration such as "5m" or "1h".
	ExpirationLeeway *string `pulumi:"expirationLeeway"`
	// `(string: <optional>)` - PEM encoded CA cert for use by the
	// TLS client used to talk with the JWKS server.
	JwksCaCert *string `pulumi:"jwksCaCert"`
	// `(string: <optional>)` - JSON Web Key Sets url for authenticating
	// signatures.
	JwksUrl *string `pulumi:"jwksUrl"`
	// `([]string: <optional>)` - List of PEM-encoded
	// public keys to use to authenticate signatures locally.
	JwtValidationPubKeys []string `pulumi:"jwtValidationPubKeys"`
	// Mappings of list claims (key) that will be copied to a metadata field (value).
	ListClaimMappings map[string]string `pulumi:"listClaimMappings"`
	// `(string: <optional>)` - Duration of leeway when validating
	// not before values of a token in the form of a time duration such as "5m" or "1h".
	NotBeforeLeeway *string `pulumi:"notBeforeLeeway"`
	// `(OIDCClientAssertion: <optional>)` - Optionally
	// send a signed JWT ("[private key jwt][]") as a client assertion to the OIDC
	// provider. Browse to the [OIDC concepts][concepts-assertions] page to learn
	// more.
	OidcClientAssertion *AclAuthMethodConfigOidcClientAssertion `pulumi:"oidcClientAssertion"`
	// `(string: <optional>)` - The OAuth Client ID configured
	// with the OIDC provider.
	OidcClientId *string `pulumi:"oidcClientId"`
	// `(string: <optional>)` - The OAuth Client Secret
	// configured with the OIDC provider.
	OidcClientSecret *string `pulumi:"oidcClientSecret"`
	// `(bool: false)` - When set to `true`, Nomad will
	// not make a request to the identity provider to get OIDC `UserInfo`.
	// You may wish to set this if your identity provider doesn't send any
	// additional claims from the `UserInfo` endpoint.
	OidcDisableUserinfo *bool `pulumi:"oidcDisableUserinfo"`
	// `(string: <optional>)` - The OIDC Discovery URL,
	// without any .well-known component (base path).
	OidcDiscoveryUrl *string `pulumi:"oidcDiscoveryUrl"`
	// `(bool: false)` - When set to `true`, Nomad will include
	// [PKCE][] verification in the auth flow. Even with PKCE enabled in Nomad,
	// you may still need to enable it in your OIDC provider.
	OidcEnablePkce *bool `pulumi:"oidcEnablePkce"`
	// `([]string: <optional>)` - List of OIDC scopes.
	OidcScopes []string `pulumi:"oidcScopes"`
	// `([]string: <optional>)` - A list of supported signing
	// algorithms.
	SigningAlgs []string `pulumi:"signingAlgs"`
	// Enable OIDC verbose logging on the Nomad server.
	VerboseLogging *bool `pulumi:"verboseLogging"`
}

// AclAuthMethodConfigInput is an input type that accepts AclAuthMethodConfigArgs and AclAuthMethodConfigOutput values.
// You can construct a concrete instance of `AclAuthMethodConfigInput` via:
//
//	AclAuthMethodConfigArgs{...}
type AclAuthMethodConfigInput interface {
	pulumi.Input

	ToAclAuthMethodConfigOutput() AclAuthMethodConfigOutput
	ToAclAuthMethodConfigOutputWithContext(context.Context) AclAuthMethodConfigOutput
}

type AclAuthMethodConfigArgs struct {
	// `([]string: <optional>)` - A list of allowed values
	// that can be used for the redirect URI.
	AllowedRedirectUris pulumi.StringArrayInput `pulumi:"allowedRedirectUris"`
	// `([]string: <optional>)` - List of auth claims that are
	// valid for login.
	BoundAudiences pulumi.StringArrayInput `pulumi:"boundAudiences"`
	// `([]string: <optional>)` - The value against which to match
	// the iss claim in a JWT.
	BoundIssuers pulumi.StringArrayInput `pulumi:"boundIssuers"`
	// Mappings of claims (key) that will be copied to a metadata field (value).
	ClaimMappings pulumi.StringMapInput `pulumi:"claimMappings"`
	// `(string: <optional>)` - Duration of leeway when validating
	// all claims in the form of a time duration such as "5m" or "1h".
	ClockSkewLeeway pulumi.StringPtrInput `pulumi:"clockSkewLeeway"`
	// `([]string: <optional>)` - PEM encoded CA certs for use
	// by the TLS client used to talk with the OIDC Discovery URL.
	DiscoveryCaPems pulumi.StringArrayInput `pulumi:"discoveryCaPems"`
	// `(string: <optional>)` - Duration of leeway when validating
	// expiration of a JWT in the form of a time duration such as "5m" or "1h".
	ExpirationLeeway pulumi.StringPtrInput `pulumi:"expirationLeeway"`
	// `(string: <optional>)` - PEM encoded CA cert for use by the
	// TLS client used to talk with the JWKS server.
	JwksCaCert pulumi.StringPtrInput `pulumi:"jwksCaCert"`
	// `(string: <optional>)` - JSON Web Key Sets url for authenticating
	// signatures.
	JwksUrl pulumi.StringPtrInput `pulumi:"jwksUrl"`
	// `([]string: <optional>)` - List of PEM-encoded
	// public keys to use to authenticate signatures locally.
	JwtValidationPubKeys pulumi.StringArrayInput `pulumi:"jwtValidationPubKeys"`
	// Mappings of list claims (key) that will be copied to a metadata field (value).
	ListClaimMappings pulumi.StringMapInput `pulumi:"listClaimMappings"`
	// `(string: <optional>)` - Duration of leeway when validating
	// not before values of a token in the form of a time duration such as "5m" or "1h".
	NotBeforeLeeway pulumi.StringPtrInput `pulumi:"notBeforeLeeway"`
	// `(OIDCClientAssertion: <optional>)` - Optionally
	// send a signed JWT ("[private key jwt][]") as a client assertion to the OIDC
	// provider. Browse to the [OIDC concepts][concepts-assertions] page to learn
	// more.
	OidcClientAssertion AclAuthMethodConfigOidcClientAssertionPtrInput `pulumi:"oidcClientAssertion"`
	// `(string: <optional>)` - The OAuth Client ID configured
	// with the OIDC provider.
	OidcClientId pulumi.StringPtrInput `pulumi:"oidcClientId"`
	// `(string: <optional>)` - The OAuth Client Secret
	// configured with the OIDC provider.
	OidcClientSecret pulumi.StringPtrInput `pulumi:"oidcClientSecret"`
	// `(bool: false)` - When set to `true`, Nomad will
	// not make a request to the identity provider to get OIDC `UserInfo`.
	// You may wish to set this if your identity provider doesn't send any
	// additional claims from the `UserInfo` endpoint.
	OidcDisableUserinfo pulumi.BoolPtrInput `pulumi:"oidcDisableUserinfo"`
	// `(string: <optional>)` - The OIDC Discovery URL,
	// without any .well-known component (base path).
	OidcDiscoveryUrl pulumi.StringPtrInput `pulumi:"oidcDiscoveryUrl"`
	// `(bool: false)` - When set to `true`, Nomad will include
	// [PKCE][] verification in the auth flow. Even with PKCE enabled in Nomad,
	// you may still need to enable it in your OIDC provider.
	OidcEnablePkce pulumi.BoolPtrInput `pulumi:"oidcEnablePkce"`
	// `([]string: <optional>)` - List of OIDC scopes.
	OidcScopes pulumi.StringArrayInput `pulumi:"oidcScopes"`
	// `([]string: <optional>)` - A list of supported signing
	// algorithms.
	SigningAlgs pulumi.StringArrayInput `pulumi:"signingAlgs"`
	// Enable OIDC verbose logging on the Nomad server.
	VerboseLogging pulumi.BoolPtrInput `pulumi:"verboseLogging"`
}

func (AclAuthMethodConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAuthMethodConfig)(nil)).Elem()
}

func (i AclAuthMethodConfigArgs) ToAclAuthMethodConfigOutput() AclAuthMethodConfigOutput {
	return i.ToAclAuthMethodConfigOutputWithContext(context.Background())
}

func (i AclAuthMethodConfigArgs) ToAclAuthMethodConfigOutputWithContext(ctx context.Context) AclAuthMethodConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodConfigOutput)
}

func (i AclAuthMethodConfigArgs) ToAclAuthMethodConfigPtrOutput() AclAuthMethodConfigPtrOutput {
	return i.ToAclAuthMethodConfigPtrOutputWithContext(context.Background())
}

func (i AclAuthMethodConfigArgs) ToAclAuthMethodConfigPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodConfigOutput).ToAclAuthMethodConfigPtrOutputWithContext(ctx)
}

// AclAuthMethodConfigPtrInput is an input type that accepts AclAuthMethodConfigArgs, AclAuthMethodConfigPtr and AclAuthMethodConfigPtrOutput values.
// You can construct a concrete instance of `AclAuthMethodConfigPtrInput` via:
//
//	        AclAuthMethodConfigArgs{...}
//
//	or:
//
//	        nil
type AclAuthMethodConfigPtrInput interface {
	pulumi.Input

	ToAclAuthMethodConfigPtrOutput() AclAuthMethodConfigPtrOutput
	ToAclAuthMethodConfigPtrOutputWithContext(context.Context) AclAuthMethodConfigPtrOutput
}

type aclAuthMethodConfigPtrType AclAuthMethodConfigArgs

func AclAuthMethodConfigPtr(v *AclAuthMethodConfigArgs) AclAuthMethodConfigPtrInput {
	return (*aclAuthMethodConfigPtrType)(v)
}

func (*aclAuthMethodConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAuthMethodConfig)(nil)).Elem()
}

func (i *aclAuthMethodConfigPtrType) ToAclAuthMethodConfigPtrOutput() AclAuthMethodConfigPtrOutput {
	return i.ToAclAuthMethodConfigPtrOutputWithContext(context.Background())
}

func (i *aclAuthMethodConfigPtrType) ToAclAuthMethodConfigPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodConfigPtrOutput)
}

type AclAuthMethodConfigOutput struct{ *pulumi.OutputState }

func (AclAuthMethodConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAuthMethodConfig)(nil)).Elem()
}

func (o AclAuthMethodConfigOutput) ToAclAuthMethodConfigOutput() AclAuthMethodConfigOutput {
	return o
}

func (o AclAuthMethodConfigOutput) ToAclAuthMethodConfigOutputWithContext(ctx context.Context) AclAuthMethodConfigOutput {
	return o
}

func (o AclAuthMethodConfigOutput) ToAclAuthMethodConfigPtrOutput() AclAuthMethodConfigPtrOutput {
	return o.ToAclAuthMethodConfigPtrOutputWithContext(context.Background())
}

func (o AclAuthMethodConfigOutput) ToAclAuthMethodConfigPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AclAuthMethodConfig) *AclAuthMethodConfig {
		return &v
	}).(AclAuthMethodConfigPtrOutput)
}

// `([]string: <optional>)` - A list of allowed values
// that can be used for the redirect URI.
func (o AclAuthMethodConfigOutput) AllowedRedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) []string { return v.AllowedRedirectUris }).(pulumi.StringArrayOutput)
}

// `([]string: <optional>)` - List of auth claims that are
// valid for login.
func (o AclAuthMethodConfigOutput) BoundAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) []string { return v.BoundAudiences }).(pulumi.StringArrayOutput)
}

// `([]string: <optional>)` - The value against which to match
// the iss claim in a JWT.
func (o AclAuthMethodConfigOutput) BoundIssuers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) []string { return v.BoundIssuers }).(pulumi.StringArrayOutput)
}

// Mappings of claims (key) that will be copied to a metadata field (value).
func (o AclAuthMethodConfigOutput) ClaimMappings() pulumi.StringMapOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) map[string]string { return v.ClaimMappings }).(pulumi.StringMapOutput)
}

// `(string: <optional>)` - Duration of leeway when validating
// all claims in the form of a time duration such as "5m" or "1h".
func (o AclAuthMethodConfigOutput) ClockSkewLeeway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *string { return v.ClockSkewLeeway }).(pulumi.StringPtrOutput)
}

// `([]string: <optional>)` - PEM encoded CA certs for use
// by the TLS client used to talk with the OIDC Discovery URL.
func (o AclAuthMethodConfigOutput) DiscoveryCaPems() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) []string { return v.DiscoveryCaPems }).(pulumi.StringArrayOutput)
}

// `(string: <optional>)` - Duration of leeway when validating
// expiration of a JWT in the form of a time duration such as "5m" or "1h".
func (o AclAuthMethodConfigOutput) ExpirationLeeway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *string { return v.ExpirationLeeway }).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - PEM encoded CA cert for use by the
// TLS client used to talk with the JWKS server.
func (o AclAuthMethodConfigOutput) JwksCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *string { return v.JwksCaCert }).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - JSON Web Key Sets url for authenticating
// signatures.
func (o AclAuthMethodConfigOutput) JwksUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *string { return v.JwksUrl }).(pulumi.StringPtrOutput)
}

// `([]string: <optional>)` - List of PEM-encoded
// public keys to use to authenticate signatures locally.
func (o AclAuthMethodConfigOutput) JwtValidationPubKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) []string { return v.JwtValidationPubKeys }).(pulumi.StringArrayOutput)
}

// Mappings of list claims (key) that will be copied to a metadata field (value).
func (o AclAuthMethodConfigOutput) ListClaimMappings() pulumi.StringMapOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) map[string]string { return v.ListClaimMappings }).(pulumi.StringMapOutput)
}

// `(string: <optional>)` - Duration of leeway when validating
// not before values of a token in the form of a time duration such as "5m" or "1h".
func (o AclAuthMethodConfigOutput) NotBeforeLeeway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *string { return v.NotBeforeLeeway }).(pulumi.StringPtrOutput)
}

// `(OIDCClientAssertion: <optional>)` - Optionally
// send a signed JWT ("[private key jwt][]") as a client assertion to the OIDC
// provider. Browse to the [OIDC concepts][concepts-assertions] page to learn
// more.
func (o AclAuthMethodConfigOutput) OidcClientAssertion() AclAuthMethodConfigOidcClientAssertionPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *AclAuthMethodConfigOidcClientAssertion { return v.OidcClientAssertion }).(AclAuthMethodConfigOidcClientAssertionPtrOutput)
}

// `(string: <optional>)` - The OAuth Client ID configured
// with the OIDC provider.
func (o AclAuthMethodConfigOutput) OidcClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *string { return v.OidcClientId }).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - The OAuth Client Secret
// configured with the OIDC provider.
func (o AclAuthMethodConfigOutput) OidcClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *string { return v.OidcClientSecret }).(pulumi.StringPtrOutput)
}

// `(bool: false)` - When set to `true`, Nomad will
// not make a request to the identity provider to get OIDC `UserInfo`.
// You may wish to set this if your identity provider doesn't send any
// additional claims from the `UserInfo` endpoint.
func (o AclAuthMethodConfigOutput) OidcDisableUserinfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *bool { return v.OidcDisableUserinfo }).(pulumi.BoolPtrOutput)
}

// `(string: <optional>)` - The OIDC Discovery URL,
// without any .well-known component (base path).
func (o AclAuthMethodConfigOutput) OidcDiscoveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *string { return v.OidcDiscoveryUrl }).(pulumi.StringPtrOutput)
}

// `(bool: false)` - When set to `true`, Nomad will include
// [PKCE][] verification in the auth flow. Even with PKCE enabled in Nomad,
// you may still need to enable it in your OIDC provider.
func (o AclAuthMethodConfigOutput) OidcEnablePkce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *bool { return v.OidcEnablePkce }).(pulumi.BoolPtrOutput)
}

// `([]string: <optional>)` - List of OIDC scopes.
func (o AclAuthMethodConfigOutput) OidcScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) []string { return v.OidcScopes }).(pulumi.StringArrayOutput)
}

// `([]string: <optional>)` - A list of supported signing
// algorithms.
func (o AclAuthMethodConfigOutput) SigningAlgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) []string { return v.SigningAlgs }).(pulumi.StringArrayOutput)
}

// Enable OIDC verbose logging on the Nomad server.
func (o AclAuthMethodConfigOutput) VerboseLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfig) *bool { return v.VerboseLogging }).(pulumi.BoolPtrOutput)
}

type AclAuthMethodConfigPtrOutput struct{ *pulumi.OutputState }

func (AclAuthMethodConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAuthMethodConfig)(nil)).Elem()
}

func (o AclAuthMethodConfigPtrOutput) ToAclAuthMethodConfigPtrOutput() AclAuthMethodConfigPtrOutput {
	return o
}

func (o AclAuthMethodConfigPtrOutput) ToAclAuthMethodConfigPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigPtrOutput {
	return o
}

func (o AclAuthMethodConfigPtrOutput) Elem() AclAuthMethodConfigOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) AclAuthMethodConfig {
		if v != nil {
			return *v
		}
		var ret AclAuthMethodConfig
		return ret
	}).(AclAuthMethodConfigOutput)
}

// `([]string: <optional>)` - A list of allowed values
// that can be used for the redirect URI.
func (o AclAuthMethodConfigPtrOutput) AllowedRedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) []string {
		if v == nil {
			return nil
		}
		return v.AllowedRedirectUris
	}).(pulumi.StringArrayOutput)
}

// `([]string: <optional>)` - List of auth claims that are
// valid for login.
func (o AclAuthMethodConfigPtrOutput) BoundAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) []string {
		if v == nil {
			return nil
		}
		return v.BoundAudiences
	}).(pulumi.StringArrayOutput)
}

// `([]string: <optional>)` - The value against which to match
// the iss claim in a JWT.
func (o AclAuthMethodConfigPtrOutput) BoundIssuers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) []string {
		if v == nil {
			return nil
		}
		return v.BoundIssuers
	}).(pulumi.StringArrayOutput)
}

// Mappings of claims (key) that will be copied to a metadata field (value).
func (o AclAuthMethodConfigPtrOutput) ClaimMappings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClaimMappings
	}).(pulumi.StringMapOutput)
}

// `(string: <optional>)` - Duration of leeway when validating
// all claims in the form of a time duration such as "5m" or "1h".
func (o AclAuthMethodConfigPtrOutput) ClockSkewLeeway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClockSkewLeeway
	}).(pulumi.StringPtrOutput)
}

// `([]string: <optional>)` - PEM encoded CA certs for use
// by the TLS client used to talk with the OIDC Discovery URL.
func (o AclAuthMethodConfigPtrOutput) DiscoveryCaPems() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) []string {
		if v == nil {
			return nil
		}
		return v.DiscoveryCaPems
	}).(pulumi.StringArrayOutput)
}

// `(string: <optional>)` - Duration of leeway when validating
// expiration of a JWT in the form of a time duration such as "5m" or "1h".
func (o AclAuthMethodConfigPtrOutput) ExpirationLeeway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationLeeway
	}).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - PEM encoded CA cert for use by the
// TLS client used to talk with the JWKS server.
func (o AclAuthMethodConfigPtrOutput) JwksCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *string {
		if v == nil {
			return nil
		}
		return v.JwksCaCert
	}).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - JSON Web Key Sets url for authenticating
// signatures.
func (o AclAuthMethodConfigPtrOutput) JwksUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *string {
		if v == nil {
			return nil
		}
		return v.JwksUrl
	}).(pulumi.StringPtrOutput)
}

// `([]string: <optional>)` - List of PEM-encoded
// public keys to use to authenticate signatures locally.
func (o AclAuthMethodConfigPtrOutput) JwtValidationPubKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) []string {
		if v == nil {
			return nil
		}
		return v.JwtValidationPubKeys
	}).(pulumi.StringArrayOutput)
}

// Mappings of list claims (key) that will be copied to a metadata field (value).
func (o AclAuthMethodConfigPtrOutput) ListClaimMappings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.ListClaimMappings
	}).(pulumi.StringMapOutput)
}

// `(string: <optional>)` - Duration of leeway when validating
// not before values of a token in the form of a time duration such as "5m" or "1h".
func (o AclAuthMethodConfigPtrOutput) NotBeforeLeeway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *string {
		if v == nil {
			return nil
		}
		return v.NotBeforeLeeway
	}).(pulumi.StringPtrOutput)
}

// `(OIDCClientAssertion: <optional>)` - Optionally
// send a signed JWT ("[private key jwt][]") as a client assertion to the OIDC
// provider. Browse to the [OIDC concepts][concepts-assertions] page to learn
// more.
func (o AclAuthMethodConfigPtrOutput) OidcClientAssertion() AclAuthMethodConfigOidcClientAssertionPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *AclAuthMethodConfigOidcClientAssertion {
		if v == nil {
			return nil
		}
		return v.OidcClientAssertion
	}).(AclAuthMethodConfigOidcClientAssertionPtrOutput)
}

// `(string: <optional>)` - The OAuth Client ID configured
// with the OIDC provider.
func (o AclAuthMethodConfigPtrOutput) OidcClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *string {
		if v == nil {
			return nil
		}
		return v.OidcClientId
	}).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - The OAuth Client Secret
// configured with the OIDC provider.
func (o AclAuthMethodConfigPtrOutput) OidcClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *string {
		if v == nil {
			return nil
		}
		return v.OidcClientSecret
	}).(pulumi.StringPtrOutput)
}

// `(bool: false)` - When set to `true`, Nomad will
// not make a request to the identity provider to get OIDC `UserInfo`.
// You may wish to set this if your identity provider doesn't send any
// additional claims from the `UserInfo` endpoint.
func (o AclAuthMethodConfigPtrOutput) OidcDisableUserinfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *bool {
		if v == nil {
			return nil
		}
		return v.OidcDisableUserinfo
	}).(pulumi.BoolPtrOutput)
}

// `(string: <optional>)` - The OIDC Discovery URL,
// without any .well-known component (base path).
func (o AclAuthMethodConfigPtrOutput) OidcDiscoveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *string {
		if v == nil {
			return nil
		}
		return v.OidcDiscoveryUrl
	}).(pulumi.StringPtrOutput)
}

// `(bool: false)` - When set to `true`, Nomad will include
// [PKCE][] verification in the auth flow. Even with PKCE enabled in Nomad,
// you may still need to enable it in your OIDC provider.
func (o AclAuthMethodConfigPtrOutput) OidcEnablePkce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *bool {
		if v == nil {
			return nil
		}
		return v.OidcEnablePkce
	}).(pulumi.BoolPtrOutput)
}

// `([]string: <optional>)` - List of OIDC scopes.
func (o AclAuthMethodConfigPtrOutput) OidcScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) []string {
		if v == nil {
			return nil
		}
		return v.OidcScopes
	}).(pulumi.StringArrayOutput)
}

// `([]string: <optional>)` - A list of supported signing
// algorithms.
func (o AclAuthMethodConfigPtrOutput) SigningAlgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) []string {
		if v == nil {
			return nil
		}
		return v.SigningAlgs
	}).(pulumi.StringArrayOutput)
}

// Enable OIDC verbose logging on the Nomad server.
func (o AclAuthMethodConfigPtrOutput) VerboseLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfig) *bool {
		if v == nil {
			return nil
		}
		return v.VerboseLogging
	}).(pulumi.BoolPtrOutput)
}

type AclAuthMethodConfigOidcClientAssertion struct {
	// `([]string: optional)` - Who processes the assertion.
	// Defaults to the auth method's `oidcDiscoveryUrl`.
	Audiences []string `pulumi:"audiences"`
	// `(map[string]string: optional)` - Add to the JWT headers,
	// alongside "kid" and "type". Setting the "kid" header here is not allowed;
	// use `private_key.key_id`.
	ExtraHeaders map[string]string `pulumi:"extraHeaders"`
	// `(string: <optional>)` is the key's algorithm.
	// Its default values are based on the `keySource`:
	// - "nomad": "RS256"; this is from Nomad's keyring and must not be changed
	// - "privateKey": "RS256"; must be RS256, RS384, or RS512
	// - "clientSecret": "HS256"; must be HS256, HS384, or HS512
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// `(string: <required>)` - Specifies where to get the private
	// key to sign the JWT.
	// Available sources:
	// - "nomad": Use current active key in Nomad's keyring
	// - "privateKey": Use key material in the `privateKey` field
	// - "clientSecret": Use the `oidcClientSecret` as an HMAC key
	KeySource string `pulumi:"keySource"`
	// `(OIDCClientAssertionKey: <optional>)` - External key
	// to sign the JWT. `keySource` must be "privateKey" to enable this.
	PrivateKey *AclAuthMethodConfigOidcClientAssertionPrivateKey `pulumi:"privateKey"`
}

// AclAuthMethodConfigOidcClientAssertionInput is an input type that accepts AclAuthMethodConfigOidcClientAssertionArgs and AclAuthMethodConfigOidcClientAssertionOutput values.
// You can construct a concrete instance of `AclAuthMethodConfigOidcClientAssertionInput` via:
//
//	AclAuthMethodConfigOidcClientAssertionArgs{...}
type AclAuthMethodConfigOidcClientAssertionInput interface {
	pulumi.Input

	ToAclAuthMethodConfigOidcClientAssertionOutput() AclAuthMethodConfigOidcClientAssertionOutput
	ToAclAuthMethodConfigOidcClientAssertionOutputWithContext(context.Context) AclAuthMethodConfigOidcClientAssertionOutput
}

type AclAuthMethodConfigOidcClientAssertionArgs struct {
	// `([]string: optional)` - Who processes the assertion.
	// Defaults to the auth method's `oidcDiscoveryUrl`.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// `(map[string]string: optional)` - Add to the JWT headers,
	// alongside "kid" and "type". Setting the "kid" header here is not allowed;
	// use `private_key.key_id`.
	ExtraHeaders pulumi.StringMapInput `pulumi:"extraHeaders"`
	// `(string: <optional>)` is the key's algorithm.
	// Its default values are based on the `keySource`:
	// - "nomad": "RS256"; this is from Nomad's keyring and must not be changed
	// - "privateKey": "RS256"; must be RS256, RS384, or RS512
	// - "clientSecret": "HS256"; must be HS256, HS384, or HS512
	KeyAlgorithm pulumi.StringPtrInput `pulumi:"keyAlgorithm"`
	// `(string: <required>)` - Specifies where to get the private
	// key to sign the JWT.
	// Available sources:
	// - "nomad": Use current active key in Nomad's keyring
	// - "privateKey": Use key material in the `privateKey` field
	// - "clientSecret": Use the `oidcClientSecret` as an HMAC key
	KeySource pulumi.StringInput `pulumi:"keySource"`
	// `(OIDCClientAssertionKey: <optional>)` - External key
	// to sign the JWT. `keySource` must be "privateKey" to enable this.
	PrivateKey AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrInput `pulumi:"privateKey"`
}

func (AclAuthMethodConfigOidcClientAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAuthMethodConfigOidcClientAssertion)(nil)).Elem()
}

func (i AclAuthMethodConfigOidcClientAssertionArgs) ToAclAuthMethodConfigOidcClientAssertionOutput() AclAuthMethodConfigOidcClientAssertionOutput {
	return i.ToAclAuthMethodConfigOidcClientAssertionOutputWithContext(context.Background())
}

func (i AclAuthMethodConfigOidcClientAssertionArgs) ToAclAuthMethodConfigOidcClientAssertionOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodConfigOidcClientAssertionOutput)
}

func (i AclAuthMethodConfigOidcClientAssertionArgs) ToAclAuthMethodConfigOidcClientAssertionPtrOutput() AclAuthMethodConfigOidcClientAssertionPtrOutput {
	return i.ToAclAuthMethodConfigOidcClientAssertionPtrOutputWithContext(context.Background())
}

func (i AclAuthMethodConfigOidcClientAssertionArgs) ToAclAuthMethodConfigOidcClientAssertionPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodConfigOidcClientAssertionOutput).ToAclAuthMethodConfigOidcClientAssertionPtrOutputWithContext(ctx)
}

// AclAuthMethodConfigOidcClientAssertionPtrInput is an input type that accepts AclAuthMethodConfigOidcClientAssertionArgs, AclAuthMethodConfigOidcClientAssertionPtr and AclAuthMethodConfigOidcClientAssertionPtrOutput values.
// You can construct a concrete instance of `AclAuthMethodConfigOidcClientAssertionPtrInput` via:
//
//	        AclAuthMethodConfigOidcClientAssertionArgs{...}
//
//	or:
//
//	        nil
type AclAuthMethodConfigOidcClientAssertionPtrInput interface {
	pulumi.Input

	ToAclAuthMethodConfigOidcClientAssertionPtrOutput() AclAuthMethodConfigOidcClientAssertionPtrOutput
	ToAclAuthMethodConfigOidcClientAssertionPtrOutputWithContext(context.Context) AclAuthMethodConfigOidcClientAssertionPtrOutput
}

type aclAuthMethodConfigOidcClientAssertionPtrType AclAuthMethodConfigOidcClientAssertionArgs

func AclAuthMethodConfigOidcClientAssertionPtr(v *AclAuthMethodConfigOidcClientAssertionArgs) AclAuthMethodConfigOidcClientAssertionPtrInput {
	return (*aclAuthMethodConfigOidcClientAssertionPtrType)(v)
}

func (*aclAuthMethodConfigOidcClientAssertionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAuthMethodConfigOidcClientAssertion)(nil)).Elem()
}

func (i *aclAuthMethodConfigOidcClientAssertionPtrType) ToAclAuthMethodConfigOidcClientAssertionPtrOutput() AclAuthMethodConfigOidcClientAssertionPtrOutput {
	return i.ToAclAuthMethodConfigOidcClientAssertionPtrOutputWithContext(context.Background())
}

func (i *aclAuthMethodConfigOidcClientAssertionPtrType) ToAclAuthMethodConfigOidcClientAssertionPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodConfigOidcClientAssertionPtrOutput)
}

type AclAuthMethodConfigOidcClientAssertionOutput struct{ *pulumi.OutputState }

func (AclAuthMethodConfigOidcClientAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAuthMethodConfigOidcClientAssertion)(nil)).Elem()
}

func (o AclAuthMethodConfigOidcClientAssertionOutput) ToAclAuthMethodConfigOidcClientAssertionOutput() AclAuthMethodConfigOidcClientAssertionOutput {
	return o
}

func (o AclAuthMethodConfigOidcClientAssertionOutput) ToAclAuthMethodConfigOidcClientAssertionOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionOutput {
	return o
}

func (o AclAuthMethodConfigOidcClientAssertionOutput) ToAclAuthMethodConfigOidcClientAssertionPtrOutput() AclAuthMethodConfigOidcClientAssertionPtrOutput {
	return o.ToAclAuthMethodConfigOidcClientAssertionPtrOutputWithContext(context.Background())
}

func (o AclAuthMethodConfigOidcClientAssertionOutput) ToAclAuthMethodConfigOidcClientAssertionPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AclAuthMethodConfigOidcClientAssertion) *AclAuthMethodConfigOidcClientAssertion {
		return &v
	}).(AclAuthMethodConfigOidcClientAssertionPtrOutput)
}

// `([]string: optional)` - Who processes the assertion.
// Defaults to the auth method's `oidcDiscoveryUrl`.
func (o AclAuthMethodConfigOidcClientAssertionOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertion) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// `(map[string]string: optional)` - Add to the JWT headers,
// alongside "kid" and "type". Setting the "kid" header here is not allowed;
// use `private_key.key_id`.
func (o AclAuthMethodConfigOidcClientAssertionOutput) ExtraHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertion) map[string]string { return v.ExtraHeaders }).(pulumi.StringMapOutput)
}

// `(string: <optional>)` is the key's algorithm.
// Its default values are based on the `keySource`:
// - "nomad": "RS256"; this is from Nomad's keyring and must not be changed
// - "privateKey": "RS256"; must be RS256, RS384, or RS512
// - "clientSecret": "HS256"; must be HS256, HS384, or HS512
func (o AclAuthMethodConfigOidcClientAssertionOutput) KeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertion) *string { return v.KeyAlgorithm }).(pulumi.StringPtrOutput)
}

// `(string: <required>)` - Specifies where to get the private
// key to sign the JWT.
// Available sources:
// - "nomad": Use current active key in Nomad's keyring
// - "privateKey": Use key material in the `privateKey` field
// - "clientSecret": Use the `oidcClientSecret` as an HMAC key
func (o AclAuthMethodConfigOidcClientAssertionOutput) KeySource() pulumi.StringOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertion) string { return v.KeySource }).(pulumi.StringOutput)
}

// `(OIDCClientAssertionKey: <optional>)` - External key
// to sign the JWT. `keySource` must be "privateKey" to enable this.
func (o AclAuthMethodConfigOidcClientAssertionOutput) PrivateKey() AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertion) *AclAuthMethodConfigOidcClientAssertionPrivateKey {
		return v.PrivateKey
	}).(AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput)
}

type AclAuthMethodConfigOidcClientAssertionPtrOutput struct{ *pulumi.OutputState }

func (AclAuthMethodConfigOidcClientAssertionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAuthMethodConfigOidcClientAssertion)(nil)).Elem()
}

func (o AclAuthMethodConfigOidcClientAssertionPtrOutput) ToAclAuthMethodConfigOidcClientAssertionPtrOutput() AclAuthMethodConfigOidcClientAssertionPtrOutput {
	return o
}

func (o AclAuthMethodConfigOidcClientAssertionPtrOutput) ToAclAuthMethodConfigOidcClientAssertionPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionPtrOutput {
	return o
}

func (o AclAuthMethodConfigOidcClientAssertionPtrOutput) Elem() AclAuthMethodConfigOidcClientAssertionOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertion) AclAuthMethodConfigOidcClientAssertion {
		if v != nil {
			return *v
		}
		var ret AclAuthMethodConfigOidcClientAssertion
		return ret
	}).(AclAuthMethodConfigOidcClientAssertionOutput)
}

// `([]string: optional)` - Who processes the assertion.
// Defaults to the auth method's `oidcDiscoveryUrl`.
func (o AclAuthMethodConfigOidcClientAssertionPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertion) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// `(map[string]string: optional)` - Add to the JWT headers,
// alongside "kid" and "type". Setting the "kid" header here is not allowed;
// use `private_key.key_id`.
func (o AclAuthMethodConfigOidcClientAssertionPtrOutput) ExtraHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertion) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtraHeaders
	}).(pulumi.StringMapOutput)
}

// `(string: <optional>)` is the key's algorithm.
// Its default values are based on the `keySource`:
// - "nomad": "RS256"; this is from Nomad's keyring and must not be changed
// - "privateKey": "RS256"; must be RS256, RS384, or RS512
// - "clientSecret": "HS256"; must be HS256, HS384, or HS512
func (o AclAuthMethodConfigOidcClientAssertionPtrOutput) KeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertion) *string {
		if v == nil {
			return nil
		}
		return v.KeyAlgorithm
	}).(pulumi.StringPtrOutput)
}

// `(string: <required>)` - Specifies where to get the private
// key to sign the JWT.
// Available sources:
// - "nomad": Use current active key in Nomad's keyring
// - "privateKey": Use key material in the `privateKey` field
// - "clientSecret": Use the `oidcClientSecret` as an HMAC key
func (o AclAuthMethodConfigOidcClientAssertionPtrOutput) KeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertion) *string {
		if v == nil {
			return nil
		}
		return &v.KeySource
	}).(pulumi.StringPtrOutput)
}

// `(OIDCClientAssertionKey: <optional>)` - External key
// to sign the JWT. `keySource` must be "privateKey" to enable this.
func (o AclAuthMethodConfigOidcClientAssertionPtrOutput) PrivateKey() AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertion) *AclAuthMethodConfigOidcClientAssertionPrivateKey {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput)
}

type AclAuthMethodConfigOidcClientAssertionPrivateKey struct {
	// `(string: optional)` - Becomes the JWT's "kid" header.
	// Mutually exclusive with `pemCert` and `pemCertFile`.
	// Allowed `keyIdHeader` values: "kid" (the default)
	KeyId *string `pulumi:"keyId"`
	// `(string: optional)` - Which header the provider uses
	// to find the public key to verify the signed JWT.
	// The default and allowed values depend on whether you set `keyId`,
	// `pemCert`, or `pemCertFile`. You must set exactly one of those
	// options, so refer to them for their requirements.
	KeyIdHeader *string `pulumi:"keyIdHeader"`
	// `(string: optional)` - An x509 certificate, signed by the
	// private key or a CA, in pem format. Nomad uses this certificate to
	// derive an [x5t#S256][] (or [x5t][]) key_id.
	// Mutually exclusive with `pemCertFile` and `keyId`.
	// Allowed `keyIdHeader` values: "x5t", "x5t#S256" (default "x5t#S256")
	PemCert *string `pulumi:"pemCert"`
	// `(string: optional)` - An absolute path to an x509
	// certificate on Nomad servers' disk, signed by the private key or a CA,
	// in pem format.
	// Nomad uses this certificate to derive an [x5t#S256][] (or [x5t][])
	// header. Mutually exclusive with `pemCert` and key_id.
	// Allowed `keyIdHeader` values: "x5t", "x5t#S256" (default "x5t#S256")
	PemCertFile *string `pulumi:"pemCertFile"`
	// `(string: <optional>)` - An RSA private key, in pem format.
	// It is used to sign the JWT. Mutually exclusive with `pemKey`.
	PemKey *string `pulumi:"pemKey"`
	// `(string: optional)` - An absolute path to a private key
	// on Nomad servers' disk, in pem format. It is used to sign the JWT.
	// Mutually exclusive with `pemKeyFile`.
	PemKeyFile *string `pulumi:"pemKeyFile"`
}

// AclAuthMethodConfigOidcClientAssertionPrivateKeyInput is an input type that accepts AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs and AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput values.
// You can construct a concrete instance of `AclAuthMethodConfigOidcClientAssertionPrivateKeyInput` via:
//
//	AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs{...}
type AclAuthMethodConfigOidcClientAssertionPrivateKeyInput interface {
	pulumi.Input

	ToAclAuthMethodConfigOidcClientAssertionPrivateKeyOutput() AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput
	ToAclAuthMethodConfigOidcClientAssertionPrivateKeyOutputWithContext(context.Context) AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput
}

type AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs struct {
	// `(string: optional)` - Becomes the JWT's "kid" header.
	// Mutually exclusive with `pemCert` and `pemCertFile`.
	// Allowed `keyIdHeader` values: "kid" (the default)
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
	// `(string: optional)` - Which header the provider uses
	// to find the public key to verify the signed JWT.
	// The default and allowed values depend on whether you set `keyId`,
	// `pemCert`, or `pemCertFile`. You must set exactly one of those
	// options, so refer to them for their requirements.
	KeyIdHeader pulumi.StringPtrInput `pulumi:"keyIdHeader"`
	// `(string: optional)` - An x509 certificate, signed by the
	// private key or a CA, in pem format. Nomad uses this certificate to
	// derive an [x5t#S256][] (or [x5t][]) key_id.
	// Mutually exclusive with `pemCertFile` and `keyId`.
	// Allowed `keyIdHeader` values: "x5t", "x5t#S256" (default "x5t#S256")
	PemCert pulumi.StringPtrInput `pulumi:"pemCert"`
	// `(string: optional)` - An absolute path to an x509
	// certificate on Nomad servers' disk, signed by the private key or a CA,
	// in pem format.
	// Nomad uses this certificate to derive an [x5t#S256][] (or [x5t][])
	// header. Mutually exclusive with `pemCert` and key_id.
	// Allowed `keyIdHeader` values: "x5t", "x5t#S256" (default "x5t#S256")
	PemCertFile pulumi.StringPtrInput `pulumi:"pemCertFile"`
	// `(string: <optional>)` - An RSA private key, in pem format.
	// It is used to sign the JWT. Mutually exclusive with `pemKey`.
	PemKey pulumi.StringPtrInput `pulumi:"pemKey"`
	// `(string: optional)` - An absolute path to a private key
	// on Nomad servers' disk, in pem format. It is used to sign the JWT.
	// Mutually exclusive with `pemKeyFile`.
	PemKeyFile pulumi.StringPtrInput `pulumi:"pemKeyFile"`
}

func (AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAuthMethodConfigOidcClientAssertionPrivateKey)(nil)).Elem()
}

func (i AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyOutput() AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput {
	return i.ToAclAuthMethodConfigOidcClientAssertionPrivateKeyOutputWithContext(context.Background())
}

func (i AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput)
}

func (i AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput() AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput {
	return i.ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutputWithContext(context.Background())
}

func (i AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput).ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutputWithContext(ctx)
}

// AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrInput is an input type that accepts AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs, AclAuthMethodConfigOidcClientAssertionPrivateKeyPtr and AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput values.
// You can construct a concrete instance of `AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrInput` via:
//
//	        AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs{...}
//
//	or:
//
//	        nil
type AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrInput interface {
	pulumi.Input

	ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput() AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput
	ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutputWithContext(context.Context) AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput
}

type aclAuthMethodConfigOidcClientAssertionPrivateKeyPtrType AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs

func AclAuthMethodConfigOidcClientAssertionPrivateKeyPtr(v *AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs) AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrInput {
	return (*aclAuthMethodConfigOidcClientAssertionPrivateKeyPtrType)(v)
}

func (*aclAuthMethodConfigOidcClientAssertionPrivateKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAuthMethodConfigOidcClientAssertionPrivateKey)(nil)).Elem()
}

func (i *aclAuthMethodConfigOidcClientAssertionPrivateKeyPtrType) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput() AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput {
	return i.ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutputWithContext(context.Background())
}

func (i *aclAuthMethodConfigOidcClientAssertionPrivateKeyPtrType) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput)
}

type AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput struct{ *pulumi.OutputState }

func (AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAuthMethodConfigOidcClientAssertionPrivateKey)(nil)).Elem()
}

func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyOutput() AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput {
	return o
}

func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput {
	return o
}

func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput() AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput {
	return o.ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutputWithContext(context.Background())
}

func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AclAuthMethodConfigOidcClientAssertionPrivateKey) *AclAuthMethodConfigOidcClientAssertionPrivateKey {
		return &v
	}).(AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput)
}

// `(string: optional)` - Becomes the JWT's "kid" header.
// Mutually exclusive with `pemCert` and `pemCertFile`.
// Allowed `keyIdHeader` values: "kid" (the default)
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertionPrivateKey) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// `(string: optional)` - Which header the provider uses
// to find the public key to verify the signed JWT.
// The default and allowed values depend on whether you set `keyId`,
// `pemCert`, or `pemCertFile`. You must set exactly one of those
// options, so refer to them for their requirements.
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) KeyIdHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertionPrivateKey) *string { return v.KeyIdHeader }).(pulumi.StringPtrOutput)
}

// `(string: optional)` - An x509 certificate, signed by the
// private key or a CA, in pem format. Nomad uses this certificate to
// derive an [x5t#S256][] (or [x5t][]) key_id.
// Mutually exclusive with `pemCertFile` and `keyId`.
// Allowed `keyIdHeader` values: "x5t", "x5t#S256" (default "x5t#S256")
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) PemCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertionPrivateKey) *string { return v.PemCert }).(pulumi.StringPtrOutput)
}

// `(string: optional)` - An absolute path to an x509
// certificate on Nomad servers' disk, signed by the private key or a CA,
// in pem format.
// Nomad uses this certificate to derive an [x5t#S256][] (or [x5t][])
// header. Mutually exclusive with `pemCert` and key_id.
// Allowed `keyIdHeader` values: "x5t", "x5t#S256" (default "x5t#S256")
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) PemCertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertionPrivateKey) *string { return v.PemCertFile }).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - An RSA private key, in pem format.
// It is used to sign the JWT. Mutually exclusive with `pemKey`.
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) PemKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertionPrivateKey) *string { return v.PemKey }).(pulumi.StringPtrOutput)
}

// `(string: optional)` - An absolute path to a private key
// on Nomad servers' disk, in pem format. It is used to sign the JWT.
// Mutually exclusive with `pemKeyFile`.
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput) PemKeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAuthMethodConfigOidcClientAssertionPrivateKey) *string { return v.PemKeyFile }).(pulumi.StringPtrOutput)
}

type AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput struct{ *pulumi.OutputState }

func (AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAuthMethodConfigOidcClientAssertionPrivateKey)(nil)).Elem()
}

func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput() AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput {
	return o
}

func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput) ToAclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutputWithContext(ctx context.Context) AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput {
	return o
}

func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput) Elem() AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertionPrivateKey) AclAuthMethodConfigOidcClientAssertionPrivateKey {
		if v != nil {
			return *v
		}
		var ret AclAuthMethodConfigOidcClientAssertionPrivateKey
		return ret
	}).(AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput)
}

// `(string: optional)` - Becomes the JWT's "kid" header.
// Mutually exclusive with `pemCert` and `pemCertFile`.
// Allowed `keyIdHeader` values: "kid" (the default)
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertionPrivateKey) *string {
		if v == nil {
			return nil
		}
		return v.KeyId
	}).(pulumi.StringPtrOutput)
}

// `(string: optional)` - Which header the provider uses
// to find the public key to verify the signed JWT.
// The default and allowed values depend on whether you set `keyId`,
// `pemCert`, or `pemCertFile`. You must set exactly one of those
// options, so refer to them for their requirements.
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput) KeyIdHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertionPrivateKey) *string {
		if v == nil {
			return nil
		}
		return v.KeyIdHeader
	}).(pulumi.StringPtrOutput)
}

// `(string: optional)` - An x509 certificate, signed by the
// private key or a CA, in pem format. Nomad uses this certificate to
// derive an [x5t#S256][] (or [x5t][]) key_id.
// Mutually exclusive with `pemCertFile` and `keyId`.
// Allowed `keyIdHeader` values: "x5t", "x5t#S256" (default "x5t#S256")
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput) PemCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertionPrivateKey) *string {
		if v == nil {
			return nil
		}
		return v.PemCert
	}).(pulumi.StringPtrOutput)
}

// `(string: optional)` - An absolute path to an x509
// certificate on Nomad servers' disk, signed by the private key or a CA,
// in pem format.
// Nomad uses this certificate to derive an [x5t#S256][] (or [x5t][])
// header. Mutually exclusive with `pemCert` and key_id.
// Allowed `keyIdHeader` values: "x5t", "x5t#S256" (default "x5t#S256")
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput) PemCertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertionPrivateKey) *string {
		if v == nil {
			return nil
		}
		return v.PemCertFile
	}).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - An RSA private key, in pem format.
// It is used to sign the JWT. Mutually exclusive with `pemKey`.
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput) PemKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertionPrivateKey) *string {
		if v == nil {
			return nil
		}
		return v.PemKey
	}).(pulumi.StringPtrOutput)
}

// `(string: optional)` - An absolute path to a private key
// on Nomad servers' disk, in pem format. It is used to sign the JWT.
// Mutually exclusive with `pemKeyFile`.
func (o AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput) PemKeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAuthMethodConfigOidcClientAssertionPrivateKey) *string {
		if v == nil {
			return nil
		}
		return v.PemKeyFile
	}).(pulumi.StringPtrOutput)
}

type AclPolicyJobAcl struct {
	// Group
	Group *string `pulumi:"group"`
	// Job
	JobId string `pulumi:"jobId"`
	// Namespace
	Namespace *string `pulumi:"namespace"`
	// Task
	Task *string `pulumi:"task"`
}

// AclPolicyJobAclInput is an input type that accepts AclPolicyJobAclArgs and AclPolicyJobAclOutput values.
// You can construct a concrete instance of `AclPolicyJobAclInput` via:
//
//	AclPolicyJobAclArgs{...}
type AclPolicyJobAclInput interface {
	pulumi.Input

	ToAclPolicyJobAclOutput() AclPolicyJobAclOutput
	ToAclPolicyJobAclOutputWithContext(context.Context) AclPolicyJobAclOutput
}

type AclPolicyJobAclArgs struct {
	// Group
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Job
	JobId pulumi.StringInput `pulumi:"jobId"`
	// Namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Task
	Task pulumi.StringPtrInput `pulumi:"task"`
}

func (AclPolicyJobAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclPolicyJobAcl)(nil)).Elem()
}

func (i AclPolicyJobAclArgs) ToAclPolicyJobAclOutput() AclPolicyJobAclOutput {
	return i.ToAclPolicyJobAclOutputWithContext(context.Background())
}

func (i AclPolicyJobAclArgs) ToAclPolicyJobAclOutputWithContext(ctx context.Context) AclPolicyJobAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclPolicyJobAclOutput)
}

func (i AclPolicyJobAclArgs) ToAclPolicyJobAclPtrOutput() AclPolicyJobAclPtrOutput {
	return i.ToAclPolicyJobAclPtrOutputWithContext(context.Background())
}

func (i AclPolicyJobAclArgs) ToAclPolicyJobAclPtrOutputWithContext(ctx context.Context) AclPolicyJobAclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclPolicyJobAclOutput).ToAclPolicyJobAclPtrOutputWithContext(ctx)
}

// AclPolicyJobAclPtrInput is an input type that accepts AclPolicyJobAclArgs, AclPolicyJobAclPtr and AclPolicyJobAclPtrOutput values.
// You can construct a concrete instance of `AclPolicyJobAclPtrInput` via:
//
//	        AclPolicyJobAclArgs{...}
//
//	or:
//
//	        nil
type AclPolicyJobAclPtrInput interface {
	pulumi.Input

	ToAclPolicyJobAclPtrOutput() AclPolicyJobAclPtrOutput
	ToAclPolicyJobAclPtrOutputWithContext(context.Context) AclPolicyJobAclPtrOutput
}

type aclPolicyJobAclPtrType AclPolicyJobAclArgs

func AclPolicyJobAclPtr(v *AclPolicyJobAclArgs) AclPolicyJobAclPtrInput {
	return (*aclPolicyJobAclPtrType)(v)
}

func (*aclPolicyJobAclPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AclPolicyJobAcl)(nil)).Elem()
}

func (i *aclPolicyJobAclPtrType) ToAclPolicyJobAclPtrOutput() AclPolicyJobAclPtrOutput {
	return i.ToAclPolicyJobAclPtrOutputWithContext(context.Background())
}

func (i *aclPolicyJobAclPtrType) ToAclPolicyJobAclPtrOutputWithContext(ctx context.Context) AclPolicyJobAclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclPolicyJobAclPtrOutput)
}

type AclPolicyJobAclOutput struct{ *pulumi.OutputState }

func (AclPolicyJobAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclPolicyJobAcl)(nil)).Elem()
}

func (o AclPolicyJobAclOutput) ToAclPolicyJobAclOutput() AclPolicyJobAclOutput {
	return o
}

func (o AclPolicyJobAclOutput) ToAclPolicyJobAclOutputWithContext(ctx context.Context) AclPolicyJobAclOutput {
	return o
}

func (o AclPolicyJobAclOutput) ToAclPolicyJobAclPtrOutput() AclPolicyJobAclPtrOutput {
	return o.ToAclPolicyJobAclPtrOutputWithContext(context.Background())
}

func (o AclPolicyJobAclOutput) ToAclPolicyJobAclPtrOutputWithContext(ctx context.Context) AclPolicyJobAclPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AclPolicyJobAcl) *AclPolicyJobAcl {
		return &v
	}).(AclPolicyJobAclPtrOutput)
}

// Group
func (o AclPolicyJobAclOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclPolicyJobAcl) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Job
func (o AclPolicyJobAclOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v AclPolicyJobAcl) string { return v.JobId }).(pulumi.StringOutput)
}

// Namespace
func (o AclPolicyJobAclOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclPolicyJobAcl) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Task
func (o AclPolicyJobAclOutput) Task() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclPolicyJobAcl) *string { return v.Task }).(pulumi.StringPtrOutput)
}

type AclPolicyJobAclPtrOutput struct{ *pulumi.OutputState }

func (AclPolicyJobAclPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclPolicyJobAcl)(nil)).Elem()
}

func (o AclPolicyJobAclPtrOutput) ToAclPolicyJobAclPtrOutput() AclPolicyJobAclPtrOutput {
	return o
}

func (o AclPolicyJobAclPtrOutput) ToAclPolicyJobAclPtrOutputWithContext(ctx context.Context) AclPolicyJobAclPtrOutput {
	return o
}

func (o AclPolicyJobAclPtrOutput) Elem() AclPolicyJobAclOutput {
	return o.ApplyT(func(v *AclPolicyJobAcl) AclPolicyJobAcl {
		if v != nil {
			return *v
		}
		var ret AclPolicyJobAcl
		return ret
	}).(AclPolicyJobAclOutput)
}

// Group
func (o AclPolicyJobAclPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclPolicyJobAcl) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Job
func (o AclPolicyJobAclPtrOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclPolicyJobAcl) *string {
		if v == nil {
			return nil
		}
		return &v.JobId
	}).(pulumi.StringPtrOutput)
}

// Namespace
func (o AclPolicyJobAclPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclPolicyJobAcl) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Task
func (o AclPolicyJobAclPtrOutput) Task() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclPolicyJobAcl) *string {
		if v == nil {
			return nil
		}
		return v.Task
	}).(pulumi.StringPtrOutput)
}

type AclRolePolicy struct {
	// `(string: <required>)` - A human-friendly name for this ACL Role.
	Name string `pulumi:"name"`
}

// AclRolePolicyInput is an input type that accepts AclRolePolicyArgs and AclRolePolicyOutput values.
// You can construct a concrete instance of `AclRolePolicyInput` via:
//
//	AclRolePolicyArgs{...}
type AclRolePolicyInput interface {
	pulumi.Input

	ToAclRolePolicyOutput() AclRolePolicyOutput
	ToAclRolePolicyOutputWithContext(context.Context) AclRolePolicyOutput
}

type AclRolePolicyArgs struct {
	// `(string: <required>)` - A human-friendly name for this ACL Role.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AclRolePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclRolePolicy)(nil)).Elem()
}

func (i AclRolePolicyArgs) ToAclRolePolicyOutput() AclRolePolicyOutput {
	return i.ToAclRolePolicyOutputWithContext(context.Background())
}

func (i AclRolePolicyArgs) ToAclRolePolicyOutputWithContext(ctx context.Context) AclRolePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRolePolicyOutput)
}

// AclRolePolicyArrayInput is an input type that accepts AclRolePolicyArray and AclRolePolicyArrayOutput values.
// You can construct a concrete instance of `AclRolePolicyArrayInput` via:
//
//	AclRolePolicyArray{ AclRolePolicyArgs{...} }
type AclRolePolicyArrayInput interface {
	pulumi.Input

	ToAclRolePolicyArrayOutput() AclRolePolicyArrayOutput
	ToAclRolePolicyArrayOutputWithContext(context.Context) AclRolePolicyArrayOutput
}

type AclRolePolicyArray []AclRolePolicyInput

func (AclRolePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclRolePolicy)(nil)).Elem()
}

func (i AclRolePolicyArray) ToAclRolePolicyArrayOutput() AclRolePolicyArrayOutput {
	return i.ToAclRolePolicyArrayOutputWithContext(context.Background())
}

func (i AclRolePolicyArray) ToAclRolePolicyArrayOutputWithContext(ctx context.Context) AclRolePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRolePolicyArrayOutput)
}

type AclRolePolicyOutput struct{ *pulumi.OutputState }

func (AclRolePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclRolePolicy)(nil)).Elem()
}

func (o AclRolePolicyOutput) ToAclRolePolicyOutput() AclRolePolicyOutput {
	return o
}

func (o AclRolePolicyOutput) ToAclRolePolicyOutputWithContext(ctx context.Context) AclRolePolicyOutput {
	return o
}

// `(string: <required>)` - A human-friendly name for this ACL Role.
func (o AclRolePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AclRolePolicy) string { return v.Name }).(pulumi.StringOutput)
}

type AclRolePolicyArrayOutput struct{ *pulumi.OutputState }

func (AclRolePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclRolePolicy)(nil)).Elem()
}

func (o AclRolePolicyArrayOutput) ToAclRolePolicyArrayOutput() AclRolePolicyArrayOutput {
	return o
}

func (o AclRolePolicyArrayOutput) ToAclRolePolicyArrayOutputWithContext(ctx context.Context) AclRolePolicyArrayOutput {
	return o
}

func (o AclRolePolicyArrayOutput) Index(i pulumi.IntInput) AclRolePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclRolePolicy {
		return vs[0].([]AclRolePolicy)[vs[1].(int)]
	}).(AclRolePolicyOutput)
}

type AclTokenRole struct {
	// The ID of the ACL role to link.
	Id string `pulumi:"id"`
	// `(string: "")` - A human-friendly name for this token.
	Name *string `pulumi:"name"`
}

// AclTokenRoleInput is an input type that accepts AclTokenRoleArgs and AclTokenRoleOutput values.
// You can construct a concrete instance of `AclTokenRoleInput` via:
//
//	AclTokenRoleArgs{...}
type AclTokenRoleInput interface {
	pulumi.Input

	ToAclTokenRoleOutput() AclTokenRoleOutput
	ToAclTokenRoleOutputWithContext(context.Context) AclTokenRoleOutput
}

type AclTokenRoleArgs struct {
	// The ID of the ACL role to link.
	Id pulumi.StringInput `pulumi:"id"`
	// `(string: "")` - A human-friendly name for this token.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AclTokenRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclTokenRole)(nil)).Elem()
}

func (i AclTokenRoleArgs) ToAclTokenRoleOutput() AclTokenRoleOutput {
	return i.ToAclTokenRoleOutputWithContext(context.Background())
}

func (i AclTokenRoleArgs) ToAclTokenRoleOutputWithContext(ctx context.Context) AclTokenRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclTokenRoleOutput)
}

// AclTokenRoleArrayInput is an input type that accepts AclTokenRoleArray and AclTokenRoleArrayOutput values.
// You can construct a concrete instance of `AclTokenRoleArrayInput` via:
//
//	AclTokenRoleArray{ AclTokenRoleArgs{...} }
type AclTokenRoleArrayInput interface {
	pulumi.Input

	ToAclTokenRoleArrayOutput() AclTokenRoleArrayOutput
	ToAclTokenRoleArrayOutputWithContext(context.Context) AclTokenRoleArrayOutput
}

type AclTokenRoleArray []AclTokenRoleInput

func (AclTokenRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclTokenRole)(nil)).Elem()
}

func (i AclTokenRoleArray) ToAclTokenRoleArrayOutput() AclTokenRoleArrayOutput {
	return i.ToAclTokenRoleArrayOutputWithContext(context.Background())
}

func (i AclTokenRoleArray) ToAclTokenRoleArrayOutputWithContext(ctx context.Context) AclTokenRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclTokenRoleArrayOutput)
}

type AclTokenRoleOutput struct{ *pulumi.OutputState }

func (AclTokenRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclTokenRole)(nil)).Elem()
}

func (o AclTokenRoleOutput) ToAclTokenRoleOutput() AclTokenRoleOutput {
	return o
}

func (o AclTokenRoleOutput) ToAclTokenRoleOutputWithContext(ctx context.Context) AclTokenRoleOutput {
	return o
}

// The ID of the ACL role to link.
func (o AclTokenRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AclTokenRole) string { return v.Id }).(pulumi.StringOutput)
}

// `(string: "")` - A human-friendly name for this token.
func (o AclTokenRoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclTokenRole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AclTokenRoleArrayOutput struct{ *pulumi.OutputState }

func (AclTokenRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclTokenRole)(nil)).Elem()
}

func (o AclTokenRoleArrayOutput) ToAclTokenRoleArrayOutput() AclTokenRoleArrayOutput {
	return o
}

func (o AclTokenRoleArrayOutput) ToAclTokenRoleArrayOutputWithContext(ctx context.Context) AclTokenRoleArrayOutput {
	return o
}

func (o AclTokenRoleArrayOutput) Index(i pulumi.IntInput) AclTokenRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclTokenRole {
		return vs[0].([]AclTokenRole)[vs[1].(int)]
	}).(AclTokenRoleOutput)
}

type CsiVolumeCapability struct {
	// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	AccessMode string `pulumi:"accessMode"`
	// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
	// - `block-device`
	// - `file-system`
	AttachmentMode string `pulumi:"attachmentMode"`
}

// CsiVolumeCapabilityInput is an input type that accepts CsiVolumeCapabilityArgs and CsiVolumeCapabilityOutput values.
// You can construct a concrete instance of `CsiVolumeCapabilityInput` via:
//
//	CsiVolumeCapabilityArgs{...}
type CsiVolumeCapabilityInput interface {
	pulumi.Input

	ToCsiVolumeCapabilityOutput() CsiVolumeCapabilityOutput
	ToCsiVolumeCapabilityOutputWithContext(context.Context) CsiVolumeCapabilityOutput
}

type CsiVolumeCapabilityArgs struct {
	// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	AccessMode pulumi.StringInput `pulumi:"accessMode"`
	// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
	// - `block-device`
	// - `file-system`
	AttachmentMode pulumi.StringInput `pulumi:"attachmentMode"`
}

func (CsiVolumeCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeCapability)(nil)).Elem()
}

func (i CsiVolumeCapabilityArgs) ToCsiVolumeCapabilityOutput() CsiVolumeCapabilityOutput {
	return i.ToCsiVolumeCapabilityOutputWithContext(context.Background())
}

func (i CsiVolumeCapabilityArgs) ToCsiVolumeCapabilityOutputWithContext(ctx context.Context) CsiVolumeCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeCapabilityOutput)
}

// CsiVolumeCapabilityArrayInput is an input type that accepts CsiVolumeCapabilityArray and CsiVolumeCapabilityArrayOutput values.
// You can construct a concrete instance of `CsiVolumeCapabilityArrayInput` via:
//
//	CsiVolumeCapabilityArray{ CsiVolumeCapabilityArgs{...} }
type CsiVolumeCapabilityArrayInput interface {
	pulumi.Input

	ToCsiVolumeCapabilityArrayOutput() CsiVolumeCapabilityArrayOutput
	ToCsiVolumeCapabilityArrayOutputWithContext(context.Context) CsiVolumeCapabilityArrayOutput
}

type CsiVolumeCapabilityArray []CsiVolumeCapabilityInput

func (CsiVolumeCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeCapability)(nil)).Elem()
}

func (i CsiVolumeCapabilityArray) ToCsiVolumeCapabilityArrayOutput() CsiVolumeCapabilityArrayOutput {
	return i.ToCsiVolumeCapabilityArrayOutputWithContext(context.Background())
}

func (i CsiVolumeCapabilityArray) ToCsiVolumeCapabilityArrayOutputWithContext(ctx context.Context) CsiVolumeCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeCapabilityArrayOutput)
}

type CsiVolumeCapabilityOutput struct{ *pulumi.OutputState }

func (CsiVolumeCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeCapability)(nil)).Elem()
}

func (o CsiVolumeCapabilityOutput) ToCsiVolumeCapabilityOutput() CsiVolumeCapabilityOutput {
	return o
}

func (o CsiVolumeCapabilityOutput) ToCsiVolumeCapabilityOutputWithContext(ctx context.Context) CsiVolumeCapabilityOutput {
	return o
}

// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
// - `single-node-reader-only`
// - `single-node-writer`
// - `multi-node-reader-only`
// - `multi-node-single-writer`
// - `multi-node-multi-writer`
func (o CsiVolumeCapabilityOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v CsiVolumeCapability) string { return v.AccessMode }).(pulumi.StringOutput)
}

// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
// - `block-device`
// - `file-system`
func (o CsiVolumeCapabilityOutput) AttachmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v CsiVolumeCapability) string { return v.AttachmentMode }).(pulumi.StringOutput)
}

type CsiVolumeCapabilityArrayOutput struct{ *pulumi.OutputState }

func (CsiVolumeCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeCapability)(nil)).Elem()
}

func (o CsiVolumeCapabilityArrayOutput) ToCsiVolumeCapabilityArrayOutput() CsiVolumeCapabilityArrayOutput {
	return o
}

func (o CsiVolumeCapabilityArrayOutput) ToCsiVolumeCapabilityArrayOutputWithContext(ctx context.Context) CsiVolumeCapabilityArrayOutput {
	return o
}

func (o CsiVolumeCapabilityArrayOutput) Index(i pulumi.IntInput) CsiVolumeCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CsiVolumeCapability {
		return vs[0].([]CsiVolumeCapability)[vs[1].(int)]
	}).(CsiVolumeCapabilityOutput)
}

type CsiVolumeMountOptions struct {
	// `(string: optional)` - The file system type.
	FsType *string `pulumi:"fsType"`
	// `[]string: optional` - The flags passed to `mount`.
	MountFlags []string `pulumi:"mountFlags"`
}

// CsiVolumeMountOptionsInput is an input type that accepts CsiVolumeMountOptionsArgs and CsiVolumeMountOptionsOutput values.
// You can construct a concrete instance of `CsiVolumeMountOptionsInput` via:
//
//	CsiVolumeMountOptionsArgs{...}
type CsiVolumeMountOptionsInput interface {
	pulumi.Input

	ToCsiVolumeMountOptionsOutput() CsiVolumeMountOptionsOutput
	ToCsiVolumeMountOptionsOutputWithContext(context.Context) CsiVolumeMountOptionsOutput
}

type CsiVolumeMountOptionsArgs struct {
	// `(string: optional)` - The file system type.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// `[]string: optional` - The flags passed to `mount`.
	MountFlags pulumi.StringArrayInput `pulumi:"mountFlags"`
}

func (CsiVolumeMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeMountOptions)(nil)).Elem()
}

func (i CsiVolumeMountOptionsArgs) ToCsiVolumeMountOptionsOutput() CsiVolumeMountOptionsOutput {
	return i.ToCsiVolumeMountOptionsOutputWithContext(context.Background())
}

func (i CsiVolumeMountOptionsArgs) ToCsiVolumeMountOptionsOutputWithContext(ctx context.Context) CsiVolumeMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeMountOptionsOutput)
}

func (i CsiVolumeMountOptionsArgs) ToCsiVolumeMountOptionsPtrOutput() CsiVolumeMountOptionsPtrOutput {
	return i.ToCsiVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (i CsiVolumeMountOptionsArgs) ToCsiVolumeMountOptionsPtrOutputWithContext(ctx context.Context) CsiVolumeMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeMountOptionsOutput).ToCsiVolumeMountOptionsPtrOutputWithContext(ctx)
}

// CsiVolumeMountOptionsPtrInput is an input type that accepts CsiVolumeMountOptionsArgs, CsiVolumeMountOptionsPtr and CsiVolumeMountOptionsPtrOutput values.
// You can construct a concrete instance of `CsiVolumeMountOptionsPtrInput` via:
//
//	        CsiVolumeMountOptionsArgs{...}
//
//	or:
//
//	        nil
type CsiVolumeMountOptionsPtrInput interface {
	pulumi.Input

	ToCsiVolumeMountOptionsPtrOutput() CsiVolumeMountOptionsPtrOutput
	ToCsiVolumeMountOptionsPtrOutputWithContext(context.Context) CsiVolumeMountOptionsPtrOutput
}

type csiVolumeMountOptionsPtrType CsiVolumeMountOptionsArgs

func CsiVolumeMountOptionsPtr(v *CsiVolumeMountOptionsArgs) CsiVolumeMountOptionsPtrInput {
	return (*csiVolumeMountOptionsPtrType)(v)
}

func (*csiVolumeMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeMountOptions)(nil)).Elem()
}

func (i *csiVolumeMountOptionsPtrType) ToCsiVolumeMountOptionsPtrOutput() CsiVolumeMountOptionsPtrOutput {
	return i.ToCsiVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (i *csiVolumeMountOptionsPtrType) ToCsiVolumeMountOptionsPtrOutputWithContext(ctx context.Context) CsiVolumeMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeMountOptionsPtrOutput)
}

type CsiVolumeMountOptionsOutput struct{ *pulumi.OutputState }

func (CsiVolumeMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeMountOptions)(nil)).Elem()
}

func (o CsiVolumeMountOptionsOutput) ToCsiVolumeMountOptionsOutput() CsiVolumeMountOptionsOutput {
	return o
}

func (o CsiVolumeMountOptionsOutput) ToCsiVolumeMountOptionsOutputWithContext(ctx context.Context) CsiVolumeMountOptionsOutput {
	return o
}

func (o CsiVolumeMountOptionsOutput) ToCsiVolumeMountOptionsPtrOutput() CsiVolumeMountOptionsPtrOutput {
	return o.ToCsiVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (o CsiVolumeMountOptionsOutput) ToCsiVolumeMountOptionsPtrOutputWithContext(ctx context.Context) CsiVolumeMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CsiVolumeMountOptions) *CsiVolumeMountOptions {
		return &v
	}).(CsiVolumeMountOptionsPtrOutput)
}

// `(string: optional)` - The file system type.
func (o CsiVolumeMountOptionsOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsiVolumeMountOptions) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// `[]string: optional` - The flags passed to `mount`.
func (o CsiVolumeMountOptionsOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CsiVolumeMountOptions) []string { return v.MountFlags }).(pulumi.StringArrayOutput)
}

type CsiVolumeMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (CsiVolumeMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeMountOptions)(nil)).Elem()
}

func (o CsiVolumeMountOptionsPtrOutput) ToCsiVolumeMountOptionsPtrOutput() CsiVolumeMountOptionsPtrOutput {
	return o
}

func (o CsiVolumeMountOptionsPtrOutput) ToCsiVolumeMountOptionsPtrOutputWithContext(ctx context.Context) CsiVolumeMountOptionsPtrOutput {
	return o
}

func (o CsiVolumeMountOptionsPtrOutput) Elem() CsiVolumeMountOptionsOutput {
	return o.ApplyT(func(v *CsiVolumeMountOptions) CsiVolumeMountOptions {
		if v != nil {
			return *v
		}
		var ret CsiVolumeMountOptions
		return ret
	}).(CsiVolumeMountOptionsOutput)
}

// `(string: optional)` - The file system type.
func (o CsiVolumeMountOptionsPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsiVolumeMountOptions) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// `[]string: optional` - The flags passed to `mount`.
func (o CsiVolumeMountOptionsPtrOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CsiVolumeMountOptions) []string {
		if v == nil {
			return nil
		}
		return v.MountFlags
	}).(pulumi.StringArrayOutput)
}

type CsiVolumeRegistrationCapability struct {
	// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	AccessMode string `pulumi:"accessMode"`
	// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
	// - `block-device`
	// - `file-system`
	AttachmentMode string `pulumi:"attachmentMode"`
}

// CsiVolumeRegistrationCapabilityInput is an input type that accepts CsiVolumeRegistrationCapabilityArgs and CsiVolumeRegistrationCapabilityOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationCapabilityInput` via:
//
//	CsiVolumeRegistrationCapabilityArgs{...}
type CsiVolumeRegistrationCapabilityInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationCapabilityOutput() CsiVolumeRegistrationCapabilityOutput
	ToCsiVolumeRegistrationCapabilityOutputWithContext(context.Context) CsiVolumeRegistrationCapabilityOutput
}

type CsiVolumeRegistrationCapabilityArgs struct {
	// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	AccessMode pulumi.StringInput `pulumi:"accessMode"`
	// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
	// - `block-device`
	// - `file-system`
	AttachmentMode pulumi.StringInput `pulumi:"attachmentMode"`
}

func (CsiVolumeRegistrationCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationCapability)(nil)).Elem()
}

func (i CsiVolumeRegistrationCapabilityArgs) ToCsiVolumeRegistrationCapabilityOutput() CsiVolumeRegistrationCapabilityOutput {
	return i.ToCsiVolumeRegistrationCapabilityOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationCapabilityArgs) ToCsiVolumeRegistrationCapabilityOutputWithContext(ctx context.Context) CsiVolumeRegistrationCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationCapabilityOutput)
}

// CsiVolumeRegistrationCapabilityArrayInput is an input type that accepts CsiVolumeRegistrationCapabilityArray and CsiVolumeRegistrationCapabilityArrayOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationCapabilityArrayInput` via:
//
//	CsiVolumeRegistrationCapabilityArray{ CsiVolumeRegistrationCapabilityArgs{...} }
type CsiVolumeRegistrationCapabilityArrayInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationCapabilityArrayOutput() CsiVolumeRegistrationCapabilityArrayOutput
	ToCsiVolumeRegistrationCapabilityArrayOutputWithContext(context.Context) CsiVolumeRegistrationCapabilityArrayOutput
}

type CsiVolumeRegistrationCapabilityArray []CsiVolumeRegistrationCapabilityInput

func (CsiVolumeRegistrationCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeRegistrationCapability)(nil)).Elem()
}

func (i CsiVolumeRegistrationCapabilityArray) ToCsiVolumeRegistrationCapabilityArrayOutput() CsiVolumeRegistrationCapabilityArrayOutput {
	return i.ToCsiVolumeRegistrationCapabilityArrayOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationCapabilityArray) ToCsiVolumeRegistrationCapabilityArrayOutputWithContext(ctx context.Context) CsiVolumeRegistrationCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationCapabilityArrayOutput)
}

type CsiVolumeRegistrationCapabilityOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationCapability)(nil)).Elem()
}

func (o CsiVolumeRegistrationCapabilityOutput) ToCsiVolumeRegistrationCapabilityOutput() CsiVolumeRegistrationCapabilityOutput {
	return o
}

func (o CsiVolumeRegistrationCapabilityOutput) ToCsiVolumeRegistrationCapabilityOutputWithContext(ctx context.Context) CsiVolumeRegistrationCapabilityOutput {
	return o
}

// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
// - `single-node-reader-only`
// - `single-node-writer`
// - `multi-node-reader-only`
// - `multi-node-single-writer`
// - `multi-node-multi-writer`
func (o CsiVolumeRegistrationCapabilityOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v CsiVolumeRegistrationCapability) string { return v.AccessMode }).(pulumi.StringOutput)
}

// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
// - `block-device`
// - `file-system`
func (o CsiVolumeRegistrationCapabilityOutput) AttachmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v CsiVolumeRegistrationCapability) string { return v.AttachmentMode }).(pulumi.StringOutput)
}

type CsiVolumeRegistrationCapabilityArrayOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeRegistrationCapability)(nil)).Elem()
}

func (o CsiVolumeRegistrationCapabilityArrayOutput) ToCsiVolumeRegistrationCapabilityArrayOutput() CsiVolumeRegistrationCapabilityArrayOutput {
	return o
}

func (o CsiVolumeRegistrationCapabilityArrayOutput) ToCsiVolumeRegistrationCapabilityArrayOutputWithContext(ctx context.Context) CsiVolumeRegistrationCapabilityArrayOutput {
	return o
}

func (o CsiVolumeRegistrationCapabilityArrayOutput) Index(i pulumi.IntInput) CsiVolumeRegistrationCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CsiVolumeRegistrationCapability {
		return vs[0].([]CsiVolumeRegistrationCapability)[vs[1].(int)]
	}).(CsiVolumeRegistrationCapabilityOutput)
}

type CsiVolumeRegistrationMountOptions struct {
	// `(string: <optional>)` - The file system type.
	FsType *string `pulumi:"fsType"`
	// `([]string: <optional>)` - The flags passed to `mount`.
	MountFlags []string `pulumi:"mountFlags"`
}

// CsiVolumeRegistrationMountOptionsInput is an input type that accepts CsiVolumeRegistrationMountOptionsArgs and CsiVolumeRegistrationMountOptionsOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationMountOptionsInput` via:
//
//	CsiVolumeRegistrationMountOptionsArgs{...}
type CsiVolumeRegistrationMountOptionsInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationMountOptionsOutput() CsiVolumeRegistrationMountOptionsOutput
	ToCsiVolumeRegistrationMountOptionsOutputWithContext(context.Context) CsiVolumeRegistrationMountOptionsOutput
}

type CsiVolumeRegistrationMountOptionsArgs struct {
	// `(string: <optional>)` - The file system type.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// `([]string: <optional>)` - The flags passed to `mount`.
	MountFlags pulumi.StringArrayInput `pulumi:"mountFlags"`
}

func (CsiVolumeRegistrationMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationMountOptions)(nil)).Elem()
}

func (i CsiVolumeRegistrationMountOptionsArgs) ToCsiVolumeRegistrationMountOptionsOutput() CsiVolumeRegistrationMountOptionsOutput {
	return i.ToCsiVolumeRegistrationMountOptionsOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationMountOptionsArgs) ToCsiVolumeRegistrationMountOptionsOutputWithContext(ctx context.Context) CsiVolumeRegistrationMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationMountOptionsOutput)
}

func (i CsiVolumeRegistrationMountOptionsArgs) ToCsiVolumeRegistrationMountOptionsPtrOutput() CsiVolumeRegistrationMountOptionsPtrOutput {
	return i.ToCsiVolumeRegistrationMountOptionsPtrOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationMountOptionsArgs) ToCsiVolumeRegistrationMountOptionsPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationMountOptionsOutput).ToCsiVolumeRegistrationMountOptionsPtrOutputWithContext(ctx)
}

// CsiVolumeRegistrationMountOptionsPtrInput is an input type that accepts CsiVolumeRegistrationMountOptionsArgs, CsiVolumeRegistrationMountOptionsPtr and CsiVolumeRegistrationMountOptionsPtrOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationMountOptionsPtrInput` via:
//
//	        CsiVolumeRegistrationMountOptionsArgs{...}
//
//	or:
//
//	        nil
type CsiVolumeRegistrationMountOptionsPtrInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationMountOptionsPtrOutput() CsiVolumeRegistrationMountOptionsPtrOutput
	ToCsiVolumeRegistrationMountOptionsPtrOutputWithContext(context.Context) CsiVolumeRegistrationMountOptionsPtrOutput
}

type csiVolumeRegistrationMountOptionsPtrType CsiVolumeRegistrationMountOptionsArgs

func CsiVolumeRegistrationMountOptionsPtr(v *CsiVolumeRegistrationMountOptionsArgs) CsiVolumeRegistrationMountOptionsPtrInput {
	return (*csiVolumeRegistrationMountOptionsPtrType)(v)
}

func (*csiVolumeRegistrationMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeRegistrationMountOptions)(nil)).Elem()
}

func (i *csiVolumeRegistrationMountOptionsPtrType) ToCsiVolumeRegistrationMountOptionsPtrOutput() CsiVolumeRegistrationMountOptionsPtrOutput {
	return i.ToCsiVolumeRegistrationMountOptionsPtrOutputWithContext(context.Background())
}

func (i *csiVolumeRegistrationMountOptionsPtrType) ToCsiVolumeRegistrationMountOptionsPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationMountOptionsPtrOutput)
}

type CsiVolumeRegistrationMountOptionsOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationMountOptions)(nil)).Elem()
}

func (o CsiVolumeRegistrationMountOptionsOutput) ToCsiVolumeRegistrationMountOptionsOutput() CsiVolumeRegistrationMountOptionsOutput {
	return o
}

func (o CsiVolumeRegistrationMountOptionsOutput) ToCsiVolumeRegistrationMountOptionsOutputWithContext(ctx context.Context) CsiVolumeRegistrationMountOptionsOutput {
	return o
}

func (o CsiVolumeRegistrationMountOptionsOutput) ToCsiVolumeRegistrationMountOptionsPtrOutput() CsiVolumeRegistrationMountOptionsPtrOutput {
	return o.ToCsiVolumeRegistrationMountOptionsPtrOutputWithContext(context.Background())
}

func (o CsiVolumeRegistrationMountOptionsOutput) ToCsiVolumeRegistrationMountOptionsPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CsiVolumeRegistrationMountOptions) *CsiVolumeRegistrationMountOptions {
		return &v
	}).(CsiVolumeRegistrationMountOptionsPtrOutput)
}

// `(string: <optional>)` - The file system type.
func (o CsiVolumeRegistrationMountOptionsOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsiVolumeRegistrationMountOptions) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// `([]string: <optional>)` - The flags passed to `mount`.
func (o CsiVolumeRegistrationMountOptionsOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CsiVolumeRegistrationMountOptions) []string { return v.MountFlags }).(pulumi.StringArrayOutput)
}

type CsiVolumeRegistrationMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeRegistrationMountOptions)(nil)).Elem()
}

func (o CsiVolumeRegistrationMountOptionsPtrOutput) ToCsiVolumeRegistrationMountOptionsPtrOutput() CsiVolumeRegistrationMountOptionsPtrOutput {
	return o
}

func (o CsiVolumeRegistrationMountOptionsPtrOutput) ToCsiVolumeRegistrationMountOptionsPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationMountOptionsPtrOutput {
	return o
}

func (o CsiVolumeRegistrationMountOptionsPtrOutput) Elem() CsiVolumeRegistrationMountOptionsOutput {
	return o.ApplyT(func(v *CsiVolumeRegistrationMountOptions) CsiVolumeRegistrationMountOptions {
		if v != nil {
			return *v
		}
		var ret CsiVolumeRegistrationMountOptions
		return ret
	}).(CsiVolumeRegistrationMountOptionsOutput)
}

// `(string: <optional>)` - The file system type.
func (o CsiVolumeRegistrationMountOptionsPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsiVolumeRegistrationMountOptions) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// `([]string: <optional>)` - The flags passed to `mount`.
func (o CsiVolumeRegistrationMountOptionsPtrOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CsiVolumeRegistrationMountOptions) []string {
		if v == nil {
			return nil
		}
		return v.MountFlags
	}).(pulumi.StringArrayOutput)
}

type CsiVolumeRegistrationTopology struct {
	// `(map[string]string)` - Define the attributes for the topology request.
	//
	// In addition to the above arguments, the following attributes are exported and
	// can be referenced:
	Segments map[string]string `pulumi:"segments"`
}

// CsiVolumeRegistrationTopologyInput is an input type that accepts CsiVolumeRegistrationTopologyArgs and CsiVolumeRegistrationTopologyOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationTopologyInput` via:
//
//	CsiVolumeRegistrationTopologyArgs{...}
type CsiVolumeRegistrationTopologyInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationTopologyOutput() CsiVolumeRegistrationTopologyOutput
	ToCsiVolumeRegistrationTopologyOutputWithContext(context.Context) CsiVolumeRegistrationTopologyOutput
}

type CsiVolumeRegistrationTopologyArgs struct {
	// `(map[string]string)` - Define the attributes for the topology request.
	//
	// In addition to the above arguments, the following attributes are exported and
	// can be referenced:
	Segments pulumi.StringMapInput `pulumi:"segments"`
}

func (CsiVolumeRegistrationTopologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationTopology)(nil)).Elem()
}

func (i CsiVolumeRegistrationTopologyArgs) ToCsiVolumeRegistrationTopologyOutput() CsiVolumeRegistrationTopologyOutput {
	return i.ToCsiVolumeRegistrationTopologyOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationTopologyArgs) ToCsiVolumeRegistrationTopologyOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationTopologyOutput)
}

// CsiVolumeRegistrationTopologyArrayInput is an input type that accepts CsiVolumeRegistrationTopologyArray and CsiVolumeRegistrationTopologyArrayOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationTopologyArrayInput` via:
//
//	CsiVolumeRegistrationTopologyArray{ CsiVolumeRegistrationTopologyArgs{...} }
type CsiVolumeRegistrationTopologyArrayInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationTopologyArrayOutput() CsiVolumeRegistrationTopologyArrayOutput
	ToCsiVolumeRegistrationTopologyArrayOutputWithContext(context.Context) CsiVolumeRegistrationTopologyArrayOutput
}

type CsiVolumeRegistrationTopologyArray []CsiVolumeRegistrationTopologyInput

func (CsiVolumeRegistrationTopologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeRegistrationTopology)(nil)).Elem()
}

func (i CsiVolumeRegistrationTopologyArray) ToCsiVolumeRegistrationTopologyArrayOutput() CsiVolumeRegistrationTopologyArrayOutput {
	return i.ToCsiVolumeRegistrationTopologyArrayOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationTopologyArray) ToCsiVolumeRegistrationTopologyArrayOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationTopologyArrayOutput)
}

type CsiVolumeRegistrationTopologyOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationTopology)(nil)).Elem()
}

func (o CsiVolumeRegistrationTopologyOutput) ToCsiVolumeRegistrationTopologyOutput() CsiVolumeRegistrationTopologyOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyOutput) ToCsiVolumeRegistrationTopologyOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyOutput {
	return o
}

// `(map[string]string)` - Define the attributes for the topology request.
//
// In addition to the above arguments, the following attributes are exported and
// can be referenced:
func (o CsiVolumeRegistrationTopologyOutput) Segments() pulumi.StringMapOutput {
	return o.ApplyT(func(v CsiVolumeRegistrationTopology) map[string]string { return v.Segments }).(pulumi.StringMapOutput)
}

type CsiVolumeRegistrationTopologyArrayOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationTopologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeRegistrationTopology)(nil)).Elem()
}

func (o CsiVolumeRegistrationTopologyArrayOutput) ToCsiVolumeRegistrationTopologyArrayOutput() CsiVolumeRegistrationTopologyArrayOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyArrayOutput) ToCsiVolumeRegistrationTopologyArrayOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyArrayOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyArrayOutput) Index(i pulumi.IntInput) CsiVolumeRegistrationTopologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CsiVolumeRegistrationTopology {
		return vs[0].([]CsiVolumeRegistrationTopology)[vs[1].(int)]
	}).(CsiVolumeRegistrationTopologyOutput)
}

type CsiVolumeRegistrationTopologyRequest struct {
	// `(``Topology``: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
	Required *CsiVolumeRegistrationTopologyRequestRequired `pulumi:"required"`
}

// CsiVolumeRegistrationTopologyRequestInput is an input type that accepts CsiVolumeRegistrationTopologyRequestArgs and CsiVolumeRegistrationTopologyRequestOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationTopologyRequestInput` via:
//
//	CsiVolumeRegistrationTopologyRequestArgs{...}
type CsiVolumeRegistrationTopologyRequestInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationTopologyRequestOutput() CsiVolumeRegistrationTopologyRequestOutput
	ToCsiVolumeRegistrationTopologyRequestOutputWithContext(context.Context) CsiVolumeRegistrationTopologyRequestOutput
}

type CsiVolumeRegistrationTopologyRequestArgs struct {
	// `(``Topology``: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
	Required CsiVolumeRegistrationTopologyRequestRequiredPtrInput `pulumi:"required"`
}

func (CsiVolumeRegistrationTopologyRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationTopologyRequest)(nil)).Elem()
}

func (i CsiVolumeRegistrationTopologyRequestArgs) ToCsiVolumeRegistrationTopologyRequestOutput() CsiVolumeRegistrationTopologyRequestOutput {
	return i.ToCsiVolumeRegistrationTopologyRequestOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationTopologyRequestArgs) ToCsiVolumeRegistrationTopologyRequestOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationTopologyRequestOutput)
}

func (i CsiVolumeRegistrationTopologyRequestArgs) ToCsiVolumeRegistrationTopologyRequestPtrOutput() CsiVolumeRegistrationTopologyRequestPtrOutput {
	return i.ToCsiVolumeRegistrationTopologyRequestPtrOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationTopologyRequestArgs) ToCsiVolumeRegistrationTopologyRequestPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationTopologyRequestOutput).ToCsiVolumeRegistrationTopologyRequestPtrOutputWithContext(ctx)
}

// CsiVolumeRegistrationTopologyRequestPtrInput is an input type that accepts CsiVolumeRegistrationTopologyRequestArgs, CsiVolumeRegistrationTopologyRequestPtr and CsiVolumeRegistrationTopologyRequestPtrOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationTopologyRequestPtrInput` via:
//
//	        CsiVolumeRegistrationTopologyRequestArgs{...}
//
//	or:
//
//	        nil
type CsiVolumeRegistrationTopologyRequestPtrInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationTopologyRequestPtrOutput() CsiVolumeRegistrationTopologyRequestPtrOutput
	ToCsiVolumeRegistrationTopologyRequestPtrOutputWithContext(context.Context) CsiVolumeRegistrationTopologyRequestPtrOutput
}

type csiVolumeRegistrationTopologyRequestPtrType CsiVolumeRegistrationTopologyRequestArgs

func CsiVolumeRegistrationTopologyRequestPtr(v *CsiVolumeRegistrationTopologyRequestArgs) CsiVolumeRegistrationTopologyRequestPtrInput {
	return (*csiVolumeRegistrationTopologyRequestPtrType)(v)
}

func (*csiVolumeRegistrationTopologyRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeRegistrationTopologyRequest)(nil)).Elem()
}

func (i *csiVolumeRegistrationTopologyRequestPtrType) ToCsiVolumeRegistrationTopologyRequestPtrOutput() CsiVolumeRegistrationTopologyRequestPtrOutput {
	return i.ToCsiVolumeRegistrationTopologyRequestPtrOutputWithContext(context.Background())
}

func (i *csiVolumeRegistrationTopologyRequestPtrType) ToCsiVolumeRegistrationTopologyRequestPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationTopologyRequestPtrOutput)
}

type CsiVolumeRegistrationTopologyRequestOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationTopologyRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationTopologyRequest)(nil)).Elem()
}

func (o CsiVolumeRegistrationTopologyRequestOutput) ToCsiVolumeRegistrationTopologyRequestOutput() CsiVolumeRegistrationTopologyRequestOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestOutput) ToCsiVolumeRegistrationTopologyRequestOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestOutput) ToCsiVolumeRegistrationTopologyRequestPtrOutput() CsiVolumeRegistrationTopologyRequestPtrOutput {
	return o.ToCsiVolumeRegistrationTopologyRequestPtrOutputWithContext(context.Background())
}

func (o CsiVolumeRegistrationTopologyRequestOutput) ToCsiVolumeRegistrationTopologyRequestPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CsiVolumeRegistrationTopologyRequest) *CsiVolumeRegistrationTopologyRequest {
		return &v
	}).(CsiVolumeRegistrationTopologyRequestPtrOutput)
}

// `(“Topology“: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
func (o CsiVolumeRegistrationTopologyRequestOutput) Required() CsiVolumeRegistrationTopologyRequestRequiredPtrOutput {
	return o.ApplyT(func(v CsiVolumeRegistrationTopologyRequest) *CsiVolumeRegistrationTopologyRequestRequired {
		return v.Required
	}).(CsiVolumeRegistrationTopologyRequestRequiredPtrOutput)
}

type CsiVolumeRegistrationTopologyRequestPtrOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationTopologyRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeRegistrationTopologyRequest)(nil)).Elem()
}

func (o CsiVolumeRegistrationTopologyRequestPtrOutput) ToCsiVolumeRegistrationTopologyRequestPtrOutput() CsiVolumeRegistrationTopologyRequestPtrOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestPtrOutput) ToCsiVolumeRegistrationTopologyRequestPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestPtrOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestPtrOutput) Elem() CsiVolumeRegistrationTopologyRequestOutput {
	return o.ApplyT(func(v *CsiVolumeRegistrationTopologyRequest) CsiVolumeRegistrationTopologyRequest {
		if v != nil {
			return *v
		}
		var ret CsiVolumeRegistrationTopologyRequest
		return ret
	}).(CsiVolumeRegistrationTopologyRequestOutput)
}

// `(“Topology“: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
func (o CsiVolumeRegistrationTopologyRequestPtrOutput) Required() CsiVolumeRegistrationTopologyRequestRequiredPtrOutput {
	return o.ApplyT(func(v *CsiVolumeRegistrationTopologyRequest) *CsiVolumeRegistrationTopologyRequestRequired {
		if v == nil {
			return nil
		}
		return v.Required
	}).(CsiVolumeRegistrationTopologyRequestRequiredPtrOutput)
}

type CsiVolumeRegistrationTopologyRequestRequired struct {
	// Defines the location for the volume.
	Topologies []CsiVolumeRegistrationTopologyRequestRequiredTopology `pulumi:"topologies"`
}

// CsiVolumeRegistrationTopologyRequestRequiredInput is an input type that accepts CsiVolumeRegistrationTopologyRequestRequiredArgs and CsiVolumeRegistrationTopologyRequestRequiredOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationTopologyRequestRequiredInput` via:
//
//	CsiVolumeRegistrationTopologyRequestRequiredArgs{...}
type CsiVolumeRegistrationTopologyRequestRequiredInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationTopologyRequestRequiredOutput() CsiVolumeRegistrationTopologyRequestRequiredOutput
	ToCsiVolumeRegistrationTopologyRequestRequiredOutputWithContext(context.Context) CsiVolumeRegistrationTopologyRequestRequiredOutput
}

type CsiVolumeRegistrationTopologyRequestRequiredArgs struct {
	// Defines the location for the volume.
	Topologies CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayInput `pulumi:"topologies"`
}

func (CsiVolumeRegistrationTopologyRequestRequiredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationTopologyRequestRequired)(nil)).Elem()
}

func (i CsiVolumeRegistrationTopologyRequestRequiredArgs) ToCsiVolumeRegistrationTopologyRequestRequiredOutput() CsiVolumeRegistrationTopologyRequestRequiredOutput {
	return i.ToCsiVolumeRegistrationTopologyRequestRequiredOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationTopologyRequestRequiredArgs) ToCsiVolumeRegistrationTopologyRequestRequiredOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestRequiredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationTopologyRequestRequiredOutput)
}

func (i CsiVolumeRegistrationTopologyRequestRequiredArgs) ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutput() CsiVolumeRegistrationTopologyRequestRequiredPtrOutput {
	return i.ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationTopologyRequestRequiredArgs) ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestRequiredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationTopologyRequestRequiredOutput).ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutputWithContext(ctx)
}

// CsiVolumeRegistrationTopologyRequestRequiredPtrInput is an input type that accepts CsiVolumeRegistrationTopologyRequestRequiredArgs, CsiVolumeRegistrationTopologyRequestRequiredPtr and CsiVolumeRegistrationTopologyRequestRequiredPtrOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationTopologyRequestRequiredPtrInput` via:
//
//	        CsiVolumeRegistrationTopologyRequestRequiredArgs{...}
//
//	or:
//
//	        nil
type CsiVolumeRegistrationTopologyRequestRequiredPtrInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutput() CsiVolumeRegistrationTopologyRequestRequiredPtrOutput
	ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutputWithContext(context.Context) CsiVolumeRegistrationTopologyRequestRequiredPtrOutput
}

type csiVolumeRegistrationTopologyRequestRequiredPtrType CsiVolumeRegistrationTopologyRequestRequiredArgs

func CsiVolumeRegistrationTopologyRequestRequiredPtr(v *CsiVolumeRegistrationTopologyRequestRequiredArgs) CsiVolumeRegistrationTopologyRequestRequiredPtrInput {
	return (*csiVolumeRegistrationTopologyRequestRequiredPtrType)(v)
}

func (*csiVolumeRegistrationTopologyRequestRequiredPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeRegistrationTopologyRequestRequired)(nil)).Elem()
}

func (i *csiVolumeRegistrationTopologyRequestRequiredPtrType) ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutput() CsiVolumeRegistrationTopologyRequestRequiredPtrOutput {
	return i.ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (i *csiVolumeRegistrationTopologyRequestRequiredPtrType) ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestRequiredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationTopologyRequestRequiredPtrOutput)
}

type CsiVolumeRegistrationTopologyRequestRequiredOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationTopologyRequestRequiredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationTopologyRequestRequired)(nil)).Elem()
}

func (o CsiVolumeRegistrationTopologyRequestRequiredOutput) ToCsiVolumeRegistrationTopologyRequestRequiredOutput() CsiVolumeRegistrationTopologyRequestRequiredOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestRequiredOutput) ToCsiVolumeRegistrationTopologyRequestRequiredOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestRequiredOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestRequiredOutput) ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutput() CsiVolumeRegistrationTopologyRequestRequiredPtrOutput {
	return o.ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (o CsiVolumeRegistrationTopologyRequestRequiredOutput) ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestRequiredPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CsiVolumeRegistrationTopologyRequestRequired) *CsiVolumeRegistrationTopologyRequestRequired {
		return &v
	}).(CsiVolumeRegistrationTopologyRequestRequiredPtrOutput)
}

// Defines the location for the volume.
func (o CsiVolumeRegistrationTopologyRequestRequiredOutput) Topologies() CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput {
	return o.ApplyT(func(v CsiVolumeRegistrationTopologyRequestRequired) []CsiVolumeRegistrationTopologyRequestRequiredTopology {
		return v.Topologies
	}).(CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput)
}

type CsiVolumeRegistrationTopologyRequestRequiredPtrOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationTopologyRequestRequiredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeRegistrationTopologyRequestRequired)(nil)).Elem()
}

func (o CsiVolumeRegistrationTopologyRequestRequiredPtrOutput) ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutput() CsiVolumeRegistrationTopologyRequestRequiredPtrOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestRequiredPtrOutput) ToCsiVolumeRegistrationTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestRequiredPtrOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestRequiredPtrOutput) Elem() CsiVolumeRegistrationTopologyRequestRequiredOutput {
	return o.ApplyT(func(v *CsiVolumeRegistrationTopologyRequestRequired) CsiVolumeRegistrationTopologyRequestRequired {
		if v != nil {
			return *v
		}
		var ret CsiVolumeRegistrationTopologyRequestRequired
		return ret
	}).(CsiVolumeRegistrationTopologyRequestRequiredOutput)
}

// Defines the location for the volume.
func (o CsiVolumeRegistrationTopologyRequestRequiredPtrOutput) Topologies() CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput {
	return o.ApplyT(func(v *CsiVolumeRegistrationTopologyRequestRequired) []CsiVolumeRegistrationTopologyRequestRequiredTopology {
		if v == nil {
			return nil
		}
		return v.Topologies
	}).(CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput)
}

type CsiVolumeRegistrationTopologyRequestRequiredTopology struct {
	// Define attributes for the topology request.
	Segments map[string]string `pulumi:"segments"`
}

// CsiVolumeRegistrationTopologyRequestRequiredTopologyInput is an input type that accepts CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs and CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationTopologyRequestRequiredTopologyInput` via:
//
//	CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs{...}
type CsiVolumeRegistrationTopologyRequestRequiredTopologyInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationTopologyRequestRequiredTopologyOutput() CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput
	ToCsiVolumeRegistrationTopologyRequestRequiredTopologyOutputWithContext(context.Context) CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput
}

type CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs struct {
	// Define attributes for the topology request.
	Segments pulumi.StringMapInput `pulumi:"segments"`
}

func (CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationTopologyRequestRequiredTopology)(nil)).Elem()
}

func (i CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs) ToCsiVolumeRegistrationTopologyRequestRequiredTopologyOutput() CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput {
	return i.ToCsiVolumeRegistrationTopologyRequestRequiredTopologyOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs) ToCsiVolumeRegistrationTopologyRequestRequiredTopologyOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput)
}

// CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayInput is an input type that accepts CsiVolumeRegistrationTopologyRequestRequiredTopologyArray and CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput values.
// You can construct a concrete instance of `CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayInput` via:
//
//	CsiVolumeRegistrationTopologyRequestRequiredTopologyArray{ CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs{...} }
type CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayInput interface {
	pulumi.Input

	ToCsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput() CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput
	ToCsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutputWithContext(context.Context) CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput
}

type CsiVolumeRegistrationTopologyRequestRequiredTopologyArray []CsiVolumeRegistrationTopologyRequestRequiredTopologyInput

func (CsiVolumeRegistrationTopologyRequestRequiredTopologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeRegistrationTopologyRequestRequiredTopology)(nil)).Elem()
}

func (i CsiVolumeRegistrationTopologyRequestRequiredTopologyArray) ToCsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput() CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput {
	return i.ToCsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutputWithContext(context.Background())
}

func (i CsiVolumeRegistrationTopologyRequestRequiredTopologyArray) ToCsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput)
}

type CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeRegistrationTopologyRequestRequiredTopology)(nil)).Elem()
}

func (o CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput) ToCsiVolumeRegistrationTopologyRequestRequiredTopologyOutput() CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput) ToCsiVolumeRegistrationTopologyRequestRequiredTopologyOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput {
	return o
}

// Define attributes for the topology request.
func (o CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput) Segments() pulumi.StringMapOutput {
	return o.ApplyT(func(v CsiVolumeRegistrationTopologyRequestRequiredTopology) map[string]string { return v.Segments }).(pulumi.StringMapOutput)
}

type CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput struct{ *pulumi.OutputState }

func (CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeRegistrationTopologyRequestRequiredTopology)(nil)).Elem()
}

func (o CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput) ToCsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput() CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput) ToCsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutputWithContext(ctx context.Context) CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput {
	return o
}

func (o CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput) Index(i pulumi.IntInput) CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CsiVolumeRegistrationTopologyRequestRequiredTopology {
		return vs[0].([]CsiVolumeRegistrationTopologyRequestRequiredTopology)[vs[1].(int)]
	}).(CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput)
}

type CsiVolumeTopology struct {
	// `(map[string]string)` - Define the attributes for the topology request.
	//
	// In addition to the above arguments, the following attributes are exported and
	// can be referenced:
	Segments map[string]string `pulumi:"segments"`
}

// CsiVolumeTopologyInput is an input type that accepts CsiVolumeTopologyArgs and CsiVolumeTopologyOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyInput` via:
//
//	CsiVolumeTopologyArgs{...}
type CsiVolumeTopologyInput interface {
	pulumi.Input

	ToCsiVolumeTopologyOutput() CsiVolumeTopologyOutput
	ToCsiVolumeTopologyOutputWithContext(context.Context) CsiVolumeTopologyOutput
}

type CsiVolumeTopologyArgs struct {
	// `(map[string]string)` - Define the attributes for the topology request.
	//
	// In addition to the above arguments, the following attributes are exported and
	// can be referenced:
	Segments pulumi.StringMapInput `pulumi:"segments"`
}

func (CsiVolumeTopologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopology)(nil)).Elem()
}

func (i CsiVolumeTopologyArgs) ToCsiVolumeTopologyOutput() CsiVolumeTopologyOutput {
	return i.ToCsiVolumeTopologyOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyArgs) ToCsiVolumeTopologyOutputWithContext(ctx context.Context) CsiVolumeTopologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyOutput)
}

// CsiVolumeTopologyArrayInput is an input type that accepts CsiVolumeTopologyArray and CsiVolumeTopologyArrayOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyArrayInput` via:
//
//	CsiVolumeTopologyArray{ CsiVolumeTopologyArgs{...} }
type CsiVolumeTopologyArrayInput interface {
	pulumi.Input

	ToCsiVolumeTopologyArrayOutput() CsiVolumeTopologyArrayOutput
	ToCsiVolumeTopologyArrayOutputWithContext(context.Context) CsiVolumeTopologyArrayOutput
}

type CsiVolumeTopologyArray []CsiVolumeTopologyInput

func (CsiVolumeTopologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeTopology)(nil)).Elem()
}

func (i CsiVolumeTopologyArray) ToCsiVolumeTopologyArrayOutput() CsiVolumeTopologyArrayOutput {
	return i.ToCsiVolumeTopologyArrayOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyArray) ToCsiVolumeTopologyArrayOutputWithContext(ctx context.Context) CsiVolumeTopologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyArrayOutput)
}

type CsiVolumeTopologyOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopology)(nil)).Elem()
}

func (o CsiVolumeTopologyOutput) ToCsiVolumeTopologyOutput() CsiVolumeTopologyOutput {
	return o
}

func (o CsiVolumeTopologyOutput) ToCsiVolumeTopologyOutputWithContext(ctx context.Context) CsiVolumeTopologyOutput {
	return o
}

// `(map[string]string)` - Define the attributes for the topology request.
//
// In addition to the above arguments, the following attributes are exported and
// can be referenced:
func (o CsiVolumeTopologyOutput) Segments() pulumi.StringMapOutput {
	return o.ApplyT(func(v CsiVolumeTopology) map[string]string { return v.Segments }).(pulumi.StringMapOutput)
}

type CsiVolumeTopologyArrayOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeTopology)(nil)).Elem()
}

func (o CsiVolumeTopologyArrayOutput) ToCsiVolumeTopologyArrayOutput() CsiVolumeTopologyArrayOutput {
	return o
}

func (o CsiVolumeTopologyArrayOutput) ToCsiVolumeTopologyArrayOutputWithContext(ctx context.Context) CsiVolumeTopologyArrayOutput {
	return o
}

func (o CsiVolumeTopologyArrayOutput) Index(i pulumi.IntInput) CsiVolumeTopologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CsiVolumeTopology {
		return vs[0].([]CsiVolumeTopology)[vs[1].(int)]
	}).(CsiVolumeTopologyOutput)
}

type CsiVolumeTopologyRequest struct {
	// `(``Topology``: <optional>)` - Preferred topologies indicate that the volume should be created in a location accessible from some of the listed topologies.
	Preferred *CsiVolumeTopologyRequestPreferred `pulumi:"preferred"`
	// `(``Topology``: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
	Required *CsiVolumeTopologyRequestRequired `pulumi:"required"`
}

// CsiVolumeTopologyRequestInput is an input type that accepts CsiVolumeTopologyRequestArgs and CsiVolumeTopologyRequestOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyRequestInput` via:
//
//	CsiVolumeTopologyRequestArgs{...}
type CsiVolumeTopologyRequestInput interface {
	pulumi.Input

	ToCsiVolumeTopologyRequestOutput() CsiVolumeTopologyRequestOutput
	ToCsiVolumeTopologyRequestOutputWithContext(context.Context) CsiVolumeTopologyRequestOutput
}

type CsiVolumeTopologyRequestArgs struct {
	// `(``Topology``: <optional>)` - Preferred topologies indicate that the volume should be created in a location accessible from some of the listed topologies.
	Preferred CsiVolumeTopologyRequestPreferredPtrInput `pulumi:"preferred"`
	// `(``Topology``: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
	Required CsiVolumeTopologyRequestRequiredPtrInput `pulumi:"required"`
}

func (CsiVolumeTopologyRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopologyRequest)(nil)).Elem()
}

func (i CsiVolumeTopologyRequestArgs) ToCsiVolumeTopologyRequestOutput() CsiVolumeTopologyRequestOutput {
	return i.ToCsiVolumeTopologyRequestOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyRequestArgs) ToCsiVolumeTopologyRequestOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestOutput)
}

func (i CsiVolumeTopologyRequestArgs) ToCsiVolumeTopologyRequestPtrOutput() CsiVolumeTopologyRequestPtrOutput {
	return i.ToCsiVolumeTopologyRequestPtrOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyRequestArgs) ToCsiVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestOutput).ToCsiVolumeTopologyRequestPtrOutputWithContext(ctx)
}

// CsiVolumeTopologyRequestPtrInput is an input type that accepts CsiVolumeTopologyRequestArgs, CsiVolumeTopologyRequestPtr and CsiVolumeTopologyRequestPtrOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyRequestPtrInput` via:
//
//	        CsiVolumeTopologyRequestArgs{...}
//
//	or:
//
//	        nil
type CsiVolumeTopologyRequestPtrInput interface {
	pulumi.Input

	ToCsiVolumeTopologyRequestPtrOutput() CsiVolumeTopologyRequestPtrOutput
	ToCsiVolumeTopologyRequestPtrOutputWithContext(context.Context) CsiVolumeTopologyRequestPtrOutput
}

type csiVolumeTopologyRequestPtrType CsiVolumeTopologyRequestArgs

func CsiVolumeTopologyRequestPtr(v *CsiVolumeTopologyRequestArgs) CsiVolumeTopologyRequestPtrInput {
	return (*csiVolumeTopologyRequestPtrType)(v)
}

func (*csiVolumeTopologyRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeTopologyRequest)(nil)).Elem()
}

func (i *csiVolumeTopologyRequestPtrType) ToCsiVolumeTopologyRequestPtrOutput() CsiVolumeTopologyRequestPtrOutput {
	return i.ToCsiVolumeTopologyRequestPtrOutputWithContext(context.Background())
}

func (i *csiVolumeTopologyRequestPtrType) ToCsiVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestPtrOutput)
}

type CsiVolumeTopologyRequestOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopologyRequest)(nil)).Elem()
}

func (o CsiVolumeTopologyRequestOutput) ToCsiVolumeTopologyRequestOutput() CsiVolumeTopologyRequestOutput {
	return o
}

func (o CsiVolumeTopologyRequestOutput) ToCsiVolumeTopologyRequestOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestOutput {
	return o
}

func (o CsiVolumeTopologyRequestOutput) ToCsiVolumeTopologyRequestPtrOutput() CsiVolumeTopologyRequestPtrOutput {
	return o.ToCsiVolumeTopologyRequestPtrOutputWithContext(context.Background())
}

func (o CsiVolumeTopologyRequestOutput) ToCsiVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CsiVolumeTopologyRequest) *CsiVolumeTopologyRequest {
		return &v
	}).(CsiVolumeTopologyRequestPtrOutput)
}

// `(“Topology“: <optional>)` - Preferred topologies indicate that the volume should be created in a location accessible from some of the listed topologies.
func (o CsiVolumeTopologyRequestOutput) Preferred() CsiVolumeTopologyRequestPreferredPtrOutput {
	return o.ApplyT(func(v CsiVolumeTopologyRequest) *CsiVolumeTopologyRequestPreferred { return v.Preferred }).(CsiVolumeTopologyRequestPreferredPtrOutput)
}

// `(“Topology“: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
func (o CsiVolumeTopologyRequestOutput) Required() CsiVolumeTopologyRequestRequiredPtrOutput {
	return o.ApplyT(func(v CsiVolumeTopologyRequest) *CsiVolumeTopologyRequestRequired { return v.Required }).(CsiVolumeTopologyRequestRequiredPtrOutput)
}

type CsiVolumeTopologyRequestPtrOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeTopologyRequest)(nil)).Elem()
}

func (o CsiVolumeTopologyRequestPtrOutput) ToCsiVolumeTopologyRequestPtrOutput() CsiVolumeTopologyRequestPtrOutput {
	return o
}

func (o CsiVolumeTopologyRequestPtrOutput) ToCsiVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPtrOutput {
	return o
}

func (o CsiVolumeTopologyRequestPtrOutput) Elem() CsiVolumeTopologyRequestOutput {
	return o.ApplyT(func(v *CsiVolumeTopologyRequest) CsiVolumeTopologyRequest {
		if v != nil {
			return *v
		}
		var ret CsiVolumeTopologyRequest
		return ret
	}).(CsiVolumeTopologyRequestOutput)
}

// `(“Topology“: <optional>)` - Preferred topologies indicate that the volume should be created in a location accessible from some of the listed topologies.
func (o CsiVolumeTopologyRequestPtrOutput) Preferred() CsiVolumeTopologyRequestPreferredPtrOutput {
	return o.ApplyT(func(v *CsiVolumeTopologyRequest) *CsiVolumeTopologyRequestPreferred {
		if v == nil {
			return nil
		}
		return v.Preferred
	}).(CsiVolumeTopologyRequestPreferredPtrOutput)
}

// `(“Topology“: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
func (o CsiVolumeTopologyRequestPtrOutput) Required() CsiVolumeTopologyRequestRequiredPtrOutput {
	return o.ApplyT(func(v *CsiVolumeTopologyRequest) *CsiVolumeTopologyRequestRequired {
		if v == nil {
			return nil
		}
		return v.Required
	}).(CsiVolumeTopologyRequestRequiredPtrOutput)
}

type CsiVolumeTopologyRequestPreferred struct {
	// Defines the location for the volume.
	Topologies []CsiVolumeTopologyRequestPreferredTopology `pulumi:"topologies"`
}

// CsiVolumeTopologyRequestPreferredInput is an input type that accepts CsiVolumeTopologyRequestPreferredArgs and CsiVolumeTopologyRequestPreferredOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyRequestPreferredInput` via:
//
//	CsiVolumeTopologyRequestPreferredArgs{...}
type CsiVolumeTopologyRequestPreferredInput interface {
	pulumi.Input

	ToCsiVolumeTopologyRequestPreferredOutput() CsiVolumeTopologyRequestPreferredOutput
	ToCsiVolumeTopologyRequestPreferredOutputWithContext(context.Context) CsiVolumeTopologyRequestPreferredOutput
}

type CsiVolumeTopologyRequestPreferredArgs struct {
	// Defines the location for the volume.
	Topologies CsiVolumeTopologyRequestPreferredTopologyArrayInput `pulumi:"topologies"`
}

func (CsiVolumeTopologyRequestPreferredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopologyRequestPreferred)(nil)).Elem()
}

func (i CsiVolumeTopologyRequestPreferredArgs) ToCsiVolumeTopologyRequestPreferredOutput() CsiVolumeTopologyRequestPreferredOutput {
	return i.ToCsiVolumeTopologyRequestPreferredOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyRequestPreferredArgs) ToCsiVolumeTopologyRequestPreferredOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPreferredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestPreferredOutput)
}

func (i CsiVolumeTopologyRequestPreferredArgs) ToCsiVolumeTopologyRequestPreferredPtrOutput() CsiVolumeTopologyRequestPreferredPtrOutput {
	return i.ToCsiVolumeTopologyRequestPreferredPtrOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyRequestPreferredArgs) ToCsiVolumeTopologyRequestPreferredPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPreferredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestPreferredOutput).ToCsiVolumeTopologyRequestPreferredPtrOutputWithContext(ctx)
}

// CsiVolumeTopologyRequestPreferredPtrInput is an input type that accepts CsiVolumeTopologyRequestPreferredArgs, CsiVolumeTopologyRequestPreferredPtr and CsiVolumeTopologyRequestPreferredPtrOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyRequestPreferredPtrInput` via:
//
//	        CsiVolumeTopologyRequestPreferredArgs{...}
//
//	or:
//
//	        nil
type CsiVolumeTopologyRequestPreferredPtrInput interface {
	pulumi.Input

	ToCsiVolumeTopologyRequestPreferredPtrOutput() CsiVolumeTopologyRequestPreferredPtrOutput
	ToCsiVolumeTopologyRequestPreferredPtrOutputWithContext(context.Context) CsiVolumeTopologyRequestPreferredPtrOutput
}

type csiVolumeTopologyRequestPreferredPtrType CsiVolumeTopologyRequestPreferredArgs

func CsiVolumeTopologyRequestPreferredPtr(v *CsiVolumeTopologyRequestPreferredArgs) CsiVolumeTopologyRequestPreferredPtrInput {
	return (*csiVolumeTopologyRequestPreferredPtrType)(v)
}

func (*csiVolumeTopologyRequestPreferredPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeTopologyRequestPreferred)(nil)).Elem()
}

func (i *csiVolumeTopologyRequestPreferredPtrType) ToCsiVolumeTopologyRequestPreferredPtrOutput() CsiVolumeTopologyRequestPreferredPtrOutput {
	return i.ToCsiVolumeTopologyRequestPreferredPtrOutputWithContext(context.Background())
}

func (i *csiVolumeTopologyRequestPreferredPtrType) ToCsiVolumeTopologyRequestPreferredPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPreferredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestPreferredPtrOutput)
}

type CsiVolumeTopologyRequestPreferredOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyRequestPreferredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopologyRequestPreferred)(nil)).Elem()
}

func (o CsiVolumeTopologyRequestPreferredOutput) ToCsiVolumeTopologyRequestPreferredOutput() CsiVolumeTopologyRequestPreferredOutput {
	return o
}

func (o CsiVolumeTopologyRequestPreferredOutput) ToCsiVolumeTopologyRequestPreferredOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPreferredOutput {
	return o
}

func (o CsiVolumeTopologyRequestPreferredOutput) ToCsiVolumeTopologyRequestPreferredPtrOutput() CsiVolumeTopologyRequestPreferredPtrOutput {
	return o.ToCsiVolumeTopologyRequestPreferredPtrOutputWithContext(context.Background())
}

func (o CsiVolumeTopologyRequestPreferredOutput) ToCsiVolumeTopologyRequestPreferredPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPreferredPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CsiVolumeTopologyRequestPreferred) *CsiVolumeTopologyRequestPreferred {
		return &v
	}).(CsiVolumeTopologyRequestPreferredPtrOutput)
}

// Defines the location for the volume.
func (o CsiVolumeTopologyRequestPreferredOutput) Topologies() CsiVolumeTopologyRequestPreferredTopologyArrayOutput {
	return o.ApplyT(func(v CsiVolumeTopologyRequestPreferred) []CsiVolumeTopologyRequestPreferredTopology {
		return v.Topologies
	}).(CsiVolumeTopologyRequestPreferredTopologyArrayOutput)
}

type CsiVolumeTopologyRequestPreferredPtrOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyRequestPreferredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeTopologyRequestPreferred)(nil)).Elem()
}

func (o CsiVolumeTopologyRequestPreferredPtrOutput) ToCsiVolumeTopologyRequestPreferredPtrOutput() CsiVolumeTopologyRequestPreferredPtrOutput {
	return o
}

func (o CsiVolumeTopologyRequestPreferredPtrOutput) ToCsiVolumeTopologyRequestPreferredPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPreferredPtrOutput {
	return o
}

func (o CsiVolumeTopologyRequestPreferredPtrOutput) Elem() CsiVolumeTopologyRequestPreferredOutput {
	return o.ApplyT(func(v *CsiVolumeTopologyRequestPreferred) CsiVolumeTopologyRequestPreferred {
		if v != nil {
			return *v
		}
		var ret CsiVolumeTopologyRequestPreferred
		return ret
	}).(CsiVolumeTopologyRequestPreferredOutput)
}

// Defines the location for the volume.
func (o CsiVolumeTopologyRequestPreferredPtrOutput) Topologies() CsiVolumeTopologyRequestPreferredTopologyArrayOutput {
	return o.ApplyT(func(v *CsiVolumeTopologyRequestPreferred) []CsiVolumeTopologyRequestPreferredTopology {
		if v == nil {
			return nil
		}
		return v.Topologies
	}).(CsiVolumeTopologyRequestPreferredTopologyArrayOutput)
}

type CsiVolumeTopologyRequestPreferredTopology struct {
	// Define the attributes for the topology request.
	Segments map[string]string `pulumi:"segments"`
}

// CsiVolumeTopologyRequestPreferredTopologyInput is an input type that accepts CsiVolumeTopologyRequestPreferredTopologyArgs and CsiVolumeTopologyRequestPreferredTopologyOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyRequestPreferredTopologyInput` via:
//
//	CsiVolumeTopologyRequestPreferredTopologyArgs{...}
type CsiVolumeTopologyRequestPreferredTopologyInput interface {
	pulumi.Input

	ToCsiVolumeTopologyRequestPreferredTopologyOutput() CsiVolumeTopologyRequestPreferredTopologyOutput
	ToCsiVolumeTopologyRequestPreferredTopologyOutputWithContext(context.Context) CsiVolumeTopologyRequestPreferredTopologyOutput
}

type CsiVolumeTopologyRequestPreferredTopologyArgs struct {
	// Define the attributes for the topology request.
	Segments pulumi.StringMapInput `pulumi:"segments"`
}

func (CsiVolumeTopologyRequestPreferredTopologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopologyRequestPreferredTopology)(nil)).Elem()
}

func (i CsiVolumeTopologyRequestPreferredTopologyArgs) ToCsiVolumeTopologyRequestPreferredTopologyOutput() CsiVolumeTopologyRequestPreferredTopologyOutput {
	return i.ToCsiVolumeTopologyRequestPreferredTopologyOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyRequestPreferredTopologyArgs) ToCsiVolumeTopologyRequestPreferredTopologyOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPreferredTopologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestPreferredTopologyOutput)
}

// CsiVolumeTopologyRequestPreferredTopologyArrayInput is an input type that accepts CsiVolumeTopologyRequestPreferredTopologyArray and CsiVolumeTopologyRequestPreferredTopologyArrayOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyRequestPreferredTopologyArrayInput` via:
//
//	CsiVolumeTopologyRequestPreferredTopologyArray{ CsiVolumeTopologyRequestPreferredTopologyArgs{...} }
type CsiVolumeTopologyRequestPreferredTopologyArrayInput interface {
	pulumi.Input

	ToCsiVolumeTopologyRequestPreferredTopologyArrayOutput() CsiVolumeTopologyRequestPreferredTopologyArrayOutput
	ToCsiVolumeTopologyRequestPreferredTopologyArrayOutputWithContext(context.Context) CsiVolumeTopologyRequestPreferredTopologyArrayOutput
}

type CsiVolumeTopologyRequestPreferredTopologyArray []CsiVolumeTopologyRequestPreferredTopologyInput

func (CsiVolumeTopologyRequestPreferredTopologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeTopologyRequestPreferredTopology)(nil)).Elem()
}

func (i CsiVolumeTopologyRequestPreferredTopologyArray) ToCsiVolumeTopologyRequestPreferredTopologyArrayOutput() CsiVolumeTopologyRequestPreferredTopologyArrayOutput {
	return i.ToCsiVolumeTopologyRequestPreferredTopologyArrayOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyRequestPreferredTopologyArray) ToCsiVolumeTopologyRequestPreferredTopologyArrayOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPreferredTopologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestPreferredTopologyArrayOutput)
}

type CsiVolumeTopologyRequestPreferredTopologyOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyRequestPreferredTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopologyRequestPreferredTopology)(nil)).Elem()
}

func (o CsiVolumeTopologyRequestPreferredTopologyOutput) ToCsiVolumeTopologyRequestPreferredTopologyOutput() CsiVolumeTopologyRequestPreferredTopologyOutput {
	return o
}

func (o CsiVolumeTopologyRequestPreferredTopologyOutput) ToCsiVolumeTopologyRequestPreferredTopologyOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPreferredTopologyOutput {
	return o
}

// Define the attributes for the topology request.
func (o CsiVolumeTopologyRequestPreferredTopologyOutput) Segments() pulumi.StringMapOutput {
	return o.ApplyT(func(v CsiVolumeTopologyRequestPreferredTopology) map[string]string { return v.Segments }).(pulumi.StringMapOutput)
}

type CsiVolumeTopologyRequestPreferredTopologyArrayOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyRequestPreferredTopologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeTopologyRequestPreferredTopology)(nil)).Elem()
}

func (o CsiVolumeTopologyRequestPreferredTopologyArrayOutput) ToCsiVolumeTopologyRequestPreferredTopologyArrayOutput() CsiVolumeTopologyRequestPreferredTopologyArrayOutput {
	return o
}

func (o CsiVolumeTopologyRequestPreferredTopologyArrayOutput) ToCsiVolumeTopologyRequestPreferredTopologyArrayOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestPreferredTopologyArrayOutput {
	return o
}

func (o CsiVolumeTopologyRequestPreferredTopologyArrayOutput) Index(i pulumi.IntInput) CsiVolumeTopologyRequestPreferredTopologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CsiVolumeTopologyRequestPreferredTopology {
		return vs[0].([]CsiVolumeTopologyRequestPreferredTopology)[vs[1].(int)]
	}).(CsiVolumeTopologyRequestPreferredTopologyOutput)
}

type CsiVolumeTopologyRequestRequired struct {
	// Defines the location for the volume.
	Topologies []CsiVolumeTopologyRequestRequiredTopology `pulumi:"topologies"`
}

// CsiVolumeTopologyRequestRequiredInput is an input type that accepts CsiVolumeTopologyRequestRequiredArgs and CsiVolumeTopologyRequestRequiredOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyRequestRequiredInput` via:
//
//	CsiVolumeTopologyRequestRequiredArgs{...}
type CsiVolumeTopologyRequestRequiredInput interface {
	pulumi.Input

	ToCsiVolumeTopologyRequestRequiredOutput() CsiVolumeTopologyRequestRequiredOutput
	ToCsiVolumeTopologyRequestRequiredOutputWithContext(context.Context) CsiVolumeTopologyRequestRequiredOutput
}

type CsiVolumeTopologyRequestRequiredArgs struct {
	// Defines the location for the volume.
	Topologies CsiVolumeTopologyRequestRequiredTopologyArrayInput `pulumi:"topologies"`
}

func (CsiVolumeTopologyRequestRequiredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopologyRequestRequired)(nil)).Elem()
}

func (i CsiVolumeTopologyRequestRequiredArgs) ToCsiVolumeTopologyRequestRequiredOutput() CsiVolumeTopologyRequestRequiredOutput {
	return i.ToCsiVolumeTopologyRequestRequiredOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyRequestRequiredArgs) ToCsiVolumeTopologyRequestRequiredOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestRequiredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestRequiredOutput)
}

func (i CsiVolumeTopologyRequestRequiredArgs) ToCsiVolumeTopologyRequestRequiredPtrOutput() CsiVolumeTopologyRequestRequiredPtrOutput {
	return i.ToCsiVolumeTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyRequestRequiredArgs) ToCsiVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestRequiredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestRequiredOutput).ToCsiVolumeTopologyRequestRequiredPtrOutputWithContext(ctx)
}

// CsiVolumeTopologyRequestRequiredPtrInput is an input type that accepts CsiVolumeTopologyRequestRequiredArgs, CsiVolumeTopologyRequestRequiredPtr and CsiVolumeTopologyRequestRequiredPtrOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyRequestRequiredPtrInput` via:
//
//	        CsiVolumeTopologyRequestRequiredArgs{...}
//
//	or:
//
//	        nil
type CsiVolumeTopologyRequestRequiredPtrInput interface {
	pulumi.Input

	ToCsiVolumeTopologyRequestRequiredPtrOutput() CsiVolumeTopologyRequestRequiredPtrOutput
	ToCsiVolumeTopologyRequestRequiredPtrOutputWithContext(context.Context) CsiVolumeTopologyRequestRequiredPtrOutput
}

type csiVolumeTopologyRequestRequiredPtrType CsiVolumeTopologyRequestRequiredArgs

func CsiVolumeTopologyRequestRequiredPtr(v *CsiVolumeTopologyRequestRequiredArgs) CsiVolumeTopologyRequestRequiredPtrInput {
	return (*csiVolumeTopologyRequestRequiredPtrType)(v)
}

func (*csiVolumeTopologyRequestRequiredPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeTopologyRequestRequired)(nil)).Elem()
}

func (i *csiVolumeTopologyRequestRequiredPtrType) ToCsiVolumeTopologyRequestRequiredPtrOutput() CsiVolumeTopologyRequestRequiredPtrOutput {
	return i.ToCsiVolumeTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (i *csiVolumeTopologyRequestRequiredPtrType) ToCsiVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestRequiredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestRequiredPtrOutput)
}

type CsiVolumeTopologyRequestRequiredOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyRequestRequiredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopologyRequestRequired)(nil)).Elem()
}

func (o CsiVolumeTopologyRequestRequiredOutput) ToCsiVolumeTopologyRequestRequiredOutput() CsiVolumeTopologyRequestRequiredOutput {
	return o
}

func (o CsiVolumeTopologyRequestRequiredOutput) ToCsiVolumeTopologyRequestRequiredOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestRequiredOutput {
	return o
}

func (o CsiVolumeTopologyRequestRequiredOutput) ToCsiVolumeTopologyRequestRequiredPtrOutput() CsiVolumeTopologyRequestRequiredPtrOutput {
	return o.ToCsiVolumeTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (o CsiVolumeTopologyRequestRequiredOutput) ToCsiVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestRequiredPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CsiVolumeTopologyRequestRequired) *CsiVolumeTopologyRequestRequired {
		return &v
	}).(CsiVolumeTopologyRequestRequiredPtrOutput)
}

// Defines the location for the volume.
func (o CsiVolumeTopologyRequestRequiredOutput) Topologies() CsiVolumeTopologyRequestRequiredTopologyArrayOutput {
	return o.ApplyT(func(v CsiVolumeTopologyRequestRequired) []CsiVolumeTopologyRequestRequiredTopology {
		return v.Topologies
	}).(CsiVolumeTopologyRequestRequiredTopologyArrayOutput)
}

type CsiVolumeTopologyRequestRequiredPtrOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyRequestRequiredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsiVolumeTopologyRequestRequired)(nil)).Elem()
}

func (o CsiVolumeTopologyRequestRequiredPtrOutput) ToCsiVolumeTopologyRequestRequiredPtrOutput() CsiVolumeTopologyRequestRequiredPtrOutput {
	return o
}

func (o CsiVolumeTopologyRequestRequiredPtrOutput) ToCsiVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestRequiredPtrOutput {
	return o
}

func (o CsiVolumeTopologyRequestRequiredPtrOutput) Elem() CsiVolumeTopologyRequestRequiredOutput {
	return o.ApplyT(func(v *CsiVolumeTopologyRequestRequired) CsiVolumeTopologyRequestRequired {
		if v != nil {
			return *v
		}
		var ret CsiVolumeTopologyRequestRequired
		return ret
	}).(CsiVolumeTopologyRequestRequiredOutput)
}

// Defines the location for the volume.
func (o CsiVolumeTopologyRequestRequiredPtrOutput) Topologies() CsiVolumeTopologyRequestRequiredTopologyArrayOutput {
	return o.ApplyT(func(v *CsiVolumeTopologyRequestRequired) []CsiVolumeTopologyRequestRequiredTopology {
		if v == nil {
			return nil
		}
		return v.Topologies
	}).(CsiVolumeTopologyRequestRequiredTopologyArrayOutput)
}

type CsiVolumeTopologyRequestRequiredTopology struct {
	// Define the attributes for the topology request.
	Segments map[string]string `pulumi:"segments"`
}

// CsiVolumeTopologyRequestRequiredTopologyInput is an input type that accepts CsiVolumeTopologyRequestRequiredTopologyArgs and CsiVolumeTopologyRequestRequiredTopologyOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyRequestRequiredTopologyInput` via:
//
//	CsiVolumeTopologyRequestRequiredTopologyArgs{...}
type CsiVolumeTopologyRequestRequiredTopologyInput interface {
	pulumi.Input

	ToCsiVolumeTopologyRequestRequiredTopologyOutput() CsiVolumeTopologyRequestRequiredTopologyOutput
	ToCsiVolumeTopologyRequestRequiredTopologyOutputWithContext(context.Context) CsiVolumeTopologyRequestRequiredTopologyOutput
}

type CsiVolumeTopologyRequestRequiredTopologyArgs struct {
	// Define the attributes for the topology request.
	Segments pulumi.StringMapInput `pulumi:"segments"`
}

func (CsiVolumeTopologyRequestRequiredTopologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (i CsiVolumeTopologyRequestRequiredTopologyArgs) ToCsiVolumeTopologyRequestRequiredTopologyOutput() CsiVolumeTopologyRequestRequiredTopologyOutput {
	return i.ToCsiVolumeTopologyRequestRequiredTopologyOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyRequestRequiredTopologyArgs) ToCsiVolumeTopologyRequestRequiredTopologyOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestRequiredTopologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestRequiredTopologyOutput)
}

// CsiVolumeTopologyRequestRequiredTopologyArrayInput is an input type that accepts CsiVolumeTopologyRequestRequiredTopologyArray and CsiVolumeTopologyRequestRequiredTopologyArrayOutput values.
// You can construct a concrete instance of `CsiVolumeTopologyRequestRequiredTopologyArrayInput` via:
//
//	CsiVolumeTopologyRequestRequiredTopologyArray{ CsiVolumeTopologyRequestRequiredTopologyArgs{...} }
type CsiVolumeTopologyRequestRequiredTopologyArrayInput interface {
	pulumi.Input

	ToCsiVolumeTopologyRequestRequiredTopologyArrayOutput() CsiVolumeTopologyRequestRequiredTopologyArrayOutput
	ToCsiVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(context.Context) CsiVolumeTopologyRequestRequiredTopologyArrayOutput
}

type CsiVolumeTopologyRequestRequiredTopologyArray []CsiVolumeTopologyRequestRequiredTopologyInput

func (CsiVolumeTopologyRequestRequiredTopologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (i CsiVolumeTopologyRequestRequiredTopologyArray) ToCsiVolumeTopologyRequestRequiredTopologyArrayOutput() CsiVolumeTopologyRequestRequiredTopologyArrayOutput {
	return i.ToCsiVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(context.Background())
}

func (i CsiVolumeTopologyRequestRequiredTopologyArray) ToCsiVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestRequiredTopologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsiVolumeTopologyRequestRequiredTopologyArrayOutput)
}

type CsiVolumeTopologyRequestRequiredTopologyOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyRequestRequiredTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsiVolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (o CsiVolumeTopologyRequestRequiredTopologyOutput) ToCsiVolumeTopologyRequestRequiredTopologyOutput() CsiVolumeTopologyRequestRequiredTopologyOutput {
	return o
}

func (o CsiVolumeTopologyRequestRequiredTopologyOutput) ToCsiVolumeTopologyRequestRequiredTopologyOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestRequiredTopologyOutput {
	return o
}

// Define the attributes for the topology request.
func (o CsiVolumeTopologyRequestRequiredTopologyOutput) Segments() pulumi.StringMapOutput {
	return o.ApplyT(func(v CsiVolumeTopologyRequestRequiredTopology) map[string]string { return v.Segments }).(pulumi.StringMapOutput)
}

type CsiVolumeTopologyRequestRequiredTopologyArrayOutput struct{ *pulumi.OutputState }

func (CsiVolumeTopologyRequestRequiredTopologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CsiVolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (o CsiVolumeTopologyRequestRequiredTopologyArrayOutput) ToCsiVolumeTopologyRequestRequiredTopologyArrayOutput() CsiVolumeTopologyRequestRequiredTopologyArrayOutput {
	return o
}

func (o CsiVolumeTopologyRequestRequiredTopologyArrayOutput) ToCsiVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(ctx context.Context) CsiVolumeTopologyRequestRequiredTopologyArrayOutput {
	return o
}

func (o CsiVolumeTopologyRequestRequiredTopologyArrayOutput) Index(i pulumi.IntInput) CsiVolumeTopologyRequestRequiredTopologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CsiVolumeTopologyRequestRequiredTopology {
		return vs[0].([]CsiVolumeTopologyRequestRequiredTopology)[vs[1].(int)]
	}).(CsiVolumeTopologyRequestRequiredTopologyOutput)
}

type DynamicHostVolumeCapability struct {
	// `(string)` - How the volume can be mounted by
	// allocations. Refer to the [`accessMode`][] documentation for details.
	AccessMode string `pulumi:"accessMode"`
	// `(string)` - The storage API that will be used by the
	// volume. Refer to the [`attachmentMode`][] documentation.
	AttachmentMode string `pulumi:"attachmentMode"`
}

// DynamicHostVolumeCapabilityInput is an input type that accepts DynamicHostVolumeCapabilityArgs and DynamicHostVolumeCapabilityOutput values.
// You can construct a concrete instance of `DynamicHostVolumeCapabilityInput` via:
//
//	DynamicHostVolumeCapabilityArgs{...}
type DynamicHostVolumeCapabilityInput interface {
	pulumi.Input

	ToDynamicHostVolumeCapabilityOutput() DynamicHostVolumeCapabilityOutput
	ToDynamicHostVolumeCapabilityOutputWithContext(context.Context) DynamicHostVolumeCapabilityOutput
}

type DynamicHostVolumeCapabilityArgs struct {
	// `(string)` - How the volume can be mounted by
	// allocations. Refer to the [`accessMode`][] documentation for details.
	AccessMode pulumi.StringInput `pulumi:"accessMode"`
	// `(string)` - The storage API that will be used by the
	// volume. Refer to the [`attachmentMode`][] documentation.
	AttachmentMode pulumi.StringInput `pulumi:"attachmentMode"`
}

func (DynamicHostVolumeCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicHostVolumeCapability)(nil)).Elem()
}

func (i DynamicHostVolumeCapabilityArgs) ToDynamicHostVolumeCapabilityOutput() DynamicHostVolumeCapabilityOutput {
	return i.ToDynamicHostVolumeCapabilityOutputWithContext(context.Background())
}

func (i DynamicHostVolumeCapabilityArgs) ToDynamicHostVolumeCapabilityOutputWithContext(ctx context.Context) DynamicHostVolumeCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeCapabilityOutput)
}

// DynamicHostVolumeCapabilityArrayInput is an input type that accepts DynamicHostVolumeCapabilityArray and DynamicHostVolumeCapabilityArrayOutput values.
// You can construct a concrete instance of `DynamicHostVolumeCapabilityArrayInput` via:
//
//	DynamicHostVolumeCapabilityArray{ DynamicHostVolumeCapabilityArgs{...} }
type DynamicHostVolumeCapabilityArrayInput interface {
	pulumi.Input

	ToDynamicHostVolumeCapabilityArrayOutput() DynamicHostVolumeCapabilityArrayOutput
	ToDynamicHostVolumeCapabilityArrayOutputWithContext(context.Context) DynamicHostVolumeCapabilityArrayOutput
}

type DynamicHostVolumeCapabilityArray []DynamicHostVolumeCapabilityInput

func (DynamicHostVolumeCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicHostVolumeCapability)(nil)).Elem()
}

func (i DynamicHostVolumeCapabilityArray) ToDynamicHostVolumeCapabilityArrayOutput() DynamicHostVolumeCapabilityArrayOutput {
	return i.ToDynamicHostVolumeCapabilityArrayOutputWithContext(context.Background())
}

func (i DynamicHostVolumeCapabilityArray) ToDynamicHostVolumeCapabilityArrayOutputWithContext(ctx context.Context) DynamicHostVolumeCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeCapabilityArrayOutput)
}

type DynamicHostVolumeCapabilityOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicHostVolumeCapability)(nil)).Elem()
}

func (o DynamicHostVolumeCapabilityOutput) ToDynamicHostVolumeCapabilityOutput() DynamicHostVolumeCapabilityOutput {
	return o
}

func (o DynamicHostVolumeCapabilityOutput) ToDynamicHostVolumeCapabilityOutputWithContext(ctx context.Context) DynamicHostVolumeCapabilityOutput {
	return o
}

// `(string)` - How the volume can be mounted by
// allocations. Refer to the [`accessMode`][] documentation for details.
func (o DynamicHostVolumeCapabilityOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicHostVolumeCapability) string { return v.AccessMode }).(pulumi.StringOutput)
}

// `(string)` - The storage API that will be used by the
// volume. Refer to the [`attachmentMode`][] documentation.
func (o DynamicHostVolumeCapabilityOutput) AttachmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicHostVolumeCapability) string { return v.AttachmentMode }).(pulumi.StringOutput)
}

type DynamicHostVolumeCapabilityArrayOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicHostVolumeCapability)(nil)).Elem()
}

func (o DynamicHostVolumeCapabilityArrayOutput) ToDynamicHostVolumeCapabilityArrayOutput() DynamicHostVolumeCapabilityArrayOutput {
	return o
}

func (o DynamicHostVolumeCapabilityArrayOutput) ToDynamicHostVolumeCapabilityArrayOutputWithContext(ctx context.Context) DynamicHostVolumeCapabilityArrayOutput {
	return o
}

func (o DynamicHostVolumeCapabilityArrayOutput) Index(i pulumi.IntInput) DynamicHostVolumeCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicHostVolumeCapability {
		return vs[0].([]DynamicHostVolumeCapability)[vs[1].(int)]
	}).(DynamicHostVolumeCapabilityOutput)
}

type DynamicHostVolumeConstraint struct {
	// `(string)` - The [node attribute][] to check for the constraint.
	Attribute string `pulumi:"attribute"`
	// `(string)`- The operator to use in the comparison.
	Operator *string `pulumi:"operator"`
	// `(string)` - The value of the attribute to compare against.
	Value *string `pulumi:"value"`
}

// DynamicHostVolumeConstraintInput is an input type that accepts DynamicHostVolumeConstraintArgs and DynamicHostVolumeConstraintOutput values.
// You can construct a concrete instance of `DynamicHostVolumeConstraintInput` via:
//
//	DynamicHostVolumeConstraintArgs{...}
type DynamicHostVolumeConstraintInput interface {
	pulumi.Input

	ToDynamicHostVolumeConstraintOutput() DynamicHostVolumeConstraintOutput
	ToDynamicHostVolumeConstraintOutputWithContext(context.Context) DynamicHostVolumeConstraintOutput
}

type DynamicHostVolumeConstraintArgs struct {
	// `(string)` - The [node attribute][] to check for the constraint.
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// `(string)`- The operator to use in the comparison.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// `(string)` - The value of the attribute to compare against.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DynamicHostVolumeConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicHostVolumeConstraint)(nil)).Elem()
}

func (i DynamicHostVolumeConstraintArgs) ToDynamicHostVolumeConstraintOutput() DynamicHostVolumeConstraintOutput {
	return i.ToDynamicHostVolumeConstraintOutputWithContext(context.Background())
}

func (i DynamicHostVolumeConstraintArgs) ToDynamicHostVolumeConstraintOutputWithContext(ctx context.Context) DynamicHostVolumeConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeConstraintOutput)
}

// DynamicHostVolumeConstraintArrayInput is an input type that accepts DynamicHostVolumeConstraintArray and DynamicHostVolumeConstraintArrayOutput values.
// You can construct a concrete instance of `DynamicHostVolumeConstraintArrayInput` via:
//
//	DynamicHostVolumeConstraintArray{ DynamicHostVolumeConstraintArgs{...} }
type DynamicHostVolumeConstraintArrayInput interface {
	pulumi.Input

	ToDynamicHostVolumeConstraintArrayOutput() DynamicHostVolumeConstraintArrayOutput
	ToDynamicHostVolumeConstraintArrayOutputWithContext(context.Context) DynamicHostVolumeConstraintArrayOutput
}

type DynamicHostVolumeConstraintArray []DynamicHostVolumeConstraintInput

func (DynamicHostVolumeConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicHostVolumeConstraint)(nil)).Elem()
}

func (i DynamicHostVolumeConstraintArray) ToDynamicHostVolumeConstraintArrayOutput() DynamicHostVolumeConstraintArrayOutput {
	return i.ToDynamicHostVolumeConstraintArrayOutputWithContext(context.Background())
}

func (i DynamicHostVolumeConstraintArray) ToDynamicHostVolumeConstraintArrayOutputWithContext(ctx context.Context) DynamicHostVolumeConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeConstraintArrayOutput)
}

type DynamicHostVolumeConstraintOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicHostVolumeConstraint)(nil)).Elem()
}

func (o DynamicHostVolumeConstraintOutput) ToDynamicHostVolumeConstraintOutput() DynamicHostVolumeConstraintOutput {
	return o
}

func (o DynamicHostVolumeConstraintOutput) ToDynamicHostVolumeConstraintOutputWithContext(ctx context.Context) DynamicHostVolumeConstraintOutput {
	return o
}

// `(string)` - The [node attribute][] to check for the constraint.
func (o DynamicHostVolumeConstraintOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicHostVolumeConstraint) string { return v.Attribute }).(pulumi.StringOutput)
}

// `(string)`- The operator to use in the comparison.
func (o DynamicHostVolumeConstraintOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicHostVolumeConstraint) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// `(string)` - The value of the attribute to compare against.
func (o DynamicHostVolumeConstraintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicHostVolumeConstraint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DynamicHostVolumeConstraintArrayOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicHostVolumeConstraint)(nil)).Elem()
}

func (o DynamicHostVolumeConstraintArrayOutput) ToDynamicHostVolumeConstraintArrayOutput() DynamicHostVolumeConstraintArrayOutput {
	return o
}

func (o DynamicHostVolumeConstraintArrayOutput) ToDynamicHostVolumeConstraintArrayOutputWithContext(ctx context.Context) DynamicHostVolumeConstraintArrayOutput {
	return o
}

func (o DynamicHostVolumeConstraintArrayOutput) Index(i pulumi.IntInput) DynamicHostVolumeConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicHostVolumeConstraint {
		return vs[0].([]DynamicHostVolumeConstraint)[vs[1].(int)]
	}).(DynamicHostVolumeConstraintOutput)
}

type DynamicHostVolumeRegistrationCapability struct {
	// `(string)` - How the volume can be mounted by
	// allocations. Refer to the [`accessMode`][] documentation for details.
	AccessMode string `pulumi:"accessMode"`
	// `(string)` - The storage API that will be used by the
	// volume. Refer to the [`attachmentMode`][] documentation.
	AttachmentMode string `pulumi:"attachmentMode"`
}

// DynamicHostVolumeRegistrationCapabilityInput is an input type that accepts DynamicHostVolumeRegistrationCapabilityArgs and DynamicHostVolumeRegistrationCapabilityOutput values.
// You can construct a concrete instance of `DynamicHostVolumeRegistrationCapabilityInput` via:
//
//	DynamicHostVolumeRegistrationCapabilityArgs{...}
type DynamicHostVolumeRegistrationCapabilityInput interface {
	pulumi.Input

	ToDynamicHostVolumeRegistrationCapabilityOutput() DynamicHostVolumeRegistrationCapabilityOutput
	ToDynamicHostVolumeRegistrationCapabilityOutputWithContext(context.Context) DynamicHostVolumeRegistrationCapabilityOutput
}

type DynamicHostVolumeRegistrationCapabilityArgs struct {
	// `(string)` - How the volume can be mounted by
	// allocations. Refer to the [`accessMode`][] documentation for details.
	AccessMode pulumi.StringInput `pulumi:"accessMode"`
	// `(string)` - The storage API that will be used by the
	// volume. Refer to the [`attachmentMode`][] documentation.
	AttachmentMode pulumi.StringInput `pulumi:"attachmentMode"`
}

func (DynamicHostVolumeRegistrationCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicHostVolumeRegistrationCapability)(nil)).Elem()
}

func (i DynamicHostVolumeRegistrationCapabilityArgs) ToDynamicHostVolumeRegistrationCapabilityOutput() DynamicHostVolumeRegistrationCapabilityOutput {
	return i.ToDynamicHostVolumeRegistrationCapabilityOutputWithContext(context.Background())
}

func (i DynamicHostVolumeRegistrationCapabilityArgs) ToDynamicHostVolumeRegistrationCapabilityOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeRegistrationCapabilityOutput)
}

// DynamicHostVolumeRegistrationCapabilityArrayInput is an input type that accepts DynamicHostVolumeRegistrationCapabilityArray and DynamicHostVolumeRegistrationCapabilityArrayOutput values.
// You can construct a concrete instance of `DynamicHostVolumeRegistrationCapabilityArrayInput` via:
//
//	DynamicHostVolumeRegistrationCapabilityArray{ DynamicHostVolumeRegistrationCapabilityArgs{...} }
type DynamicHostVolumeRegistrationCapabilityArrayInput interface {
	pulumi.Input

	ToDynamicHostVolumeRegistrationCapabilityArrayOutput() DynamicHostVolumeRegistrationCapabilityArrayOutput
	ToDynamicHostVolumeRegistrationCapabilityArrayOutputWithContext(context.Context) DynamicHostVolumeRegistrationCapabilityArrayOutput
}

type DynamicHostVolumeRegistrationCapabilityArray []DynamicHostVolumeRegistrationCapabilityInput

func (DynamicHostVolumeRegistrationCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicHostVolumeRegistrationCapability)(nil)).Elem()
}

func (i DynamicHostVolumeRegistrationCapabilityArray) ToDynamicHostVolumeRegistrationCapabilityArrayOutput() DynamicHostVolumeRegistrationCapabilityArrayOutput {
	return i.ToDynamicHostVolumeRegistrationCapabilityArrayOutputWithContext(context.Background())
}

func (i DynamicHostVolumeRegistrationCapabilityArray) ToDynamicHostVolumeRegistrationCapabilityArrayOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeRegistrationCapabilityArrayOutput)
}

type DynamicHostVolumeRegistrationCapabilityOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeRegistrationCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicHostVolumeRegistrationCapability)(nil)).Elem()
}

func (o DynamicHostVolumeRegistrationCapabilityOutput) ToDynamicHostVolumeRegistrationCapabilityOutput() DynamicHostVolumeRegistrationCapabilityOutput {
	return o
}

func (o DynamicHostVolumeRegistrationCapabilityOutput) ToDynamicHostVolumeRegistrationCapabilityOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationCapabilityOutput {
	return o
}

// `(string)` - How the volume can be mounted by
// allocations. Refer to the [`accessMode`][] documentation for details.
func (o DynamicHostVolumeRegistrationCapabilityOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicHostVolumeRegistrationCapability) string { return v.AccessMode }).(pulumi.StringOutput)
}

// `(string)` - The storage API that will be used by the
// volume. Refer to the [`attachmentMode`][] documentation.
func (o DynamicHostVolumeRegistrationCapabilityOutput) AttachmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicHostVolumeRegistrationCapability) string { return v.AttachmentMode }).(pulumi.StringOutput)
}

type DynamicHostVolumeRegistrationCapabilityArrayOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeRegistrationCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicHostVolumeRegistrationCapability)(nil)).Elem()
}

func (o DynamicHostVolumeRegistrationCapabilityArrayOutput) ToDynamicHostVolumeRegistrationCapabilityArrayOutput() DynamicHostVolumeRegistrationCapabilityArrayOutput {
	return o
}

func (o DynamicHostVolumeRegistrationCapabilityArrayOutput) ToDynamicHostVolumeRegistrationCapabilityArrayOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationCapabilityArrayOutput {
	return o
}

func (o DynamicHostVolumeRegistrationCapabilityArrayOutput) Index(i pulumi.IntInput) DynamicHostVolumeRegistrationCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicHostVolumeRegistrationCapability {
		return vs[0].([]DynamicHostVolumeRegistrationCapability)[vs[1].(int)]
	}).(DynamicHostVolumeRegistrationCapabilityOutput)
}

type DynamicHostVolumeRegistrationConstraint struct {
	// An attribute to check to constrain volume placement
	Attribute string `pulumi:"attribute"`
	// The operator to use for comparison
	Operator *string `pulumi:"operator"`
	// The requested value of the attribute
	Value *string `pulumi:"value"`
}

// DynamicHostVolumeRegistrationConstraintInput is an input type that accepts DynamicHostVolumeRegistrationConstraintArgs and DynamicHostVolumeRegistrationConstraintOutput values.
// You can construct a concrete instance of `DynamicHostVolumeRegistrationConstraintInput` via:
//
//	DynamicHostVolumeRegistrationConstraintArgs{...}
type DynamicHostVolumeRegistrationConstraintInput interface {
	pulumi.Input

	ToDynamicHostVolumeRegistrationConstraintOutput() DynamicHostVolumeRegistrationConstraintOutput
	ToDynamicHostVolumeRegistrationConstraintOutputWithContext(context.Context) DynamicHostVolumeRegistrationConstraintOutput
}

type DynamicHostVolumeRegistrationConstraintArgs struct {
	// An attribute to check to constrain volume placement
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// The operator to use for comparison
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The requested value of the attribute
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DynamicHostVolumeRegistrationConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicHostVolumeRegistrationConstraint)(nil)).Elem()
}

func (i DynamicHostVolumeRegistrationConstraintArgs) ToDynamicHostVolumeRegistrationConstraintOutput() DynamicHostVolumeRegistrationConstraintOutput {
	return i.ToDynamicHostVolumeRegistrationConstraintOutputWithContext(context.Background())
}

func (i DynamicHostVolumeRegistrationConstraintArgs) ToDynamicHostVolumeRegistrationConstraintOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeRegistrationConstraintOutput)
}

// DynamicHostVolumeRegistrationConstraintArrayInput is an input type that accepts DynamicHostVolumeRegistrationConstraintArray and DynamicHostVolumeRegistrationConstraintArrayOutput values.
// You can construct a concrete instance of `DynamicHostVolumeRegistrationConstraintArrayInput` via:
//
//	DynamicHostVolumeRegistrationConstraintArray{ DynamicHostVolumeRegistrationConstraintArgs{...} }
type DynamicHostVolumeRegistrationConstraintArrayInput interface {
	pulumi.Input

	ToDynamicHostVolumeRegistrationConstraintArrayOutput() DynamicHostVolumeRegistrationConstraintArrayOutput
	ToDynamicHostVolumeRegistrationConstraintArrayOutputWithContext(context.Context) DynamicHostVolumeRegistrationConstraintArrayOutput
}

type DynamicHostVolumeRegistrationConstraintArray []DynamicHostVolumeRegistrationConstraintInput

func (DynamicHostVolumeRegistrationConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicHostVolumeRegistrationConstraint)(nil)).Elem()
}

func (i DynamicHostVolumeRegistrationConstraintArray) ToDynamicHostVolumeRegistrationConstraintArrayOutput() DynamicHostVolumeRegistrationConstraintArrayOutput {
	return i.ToDynamicHostVolumeRegistrationConstraintArrayOutputWithContext(context.Background())
}

func (i DynamicHostVolumeRegistrationConstraintArray) ToDynamicHostVolumeRegistrationConstraintArrayOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeRegistrationConstraintArrayOutput)
}

type DynamicHostVolumeRegistrationConstraintOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeRegistrationConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicHostVolumeRegistrationConstraint)(nil)).Elem()
}

func (o DynamicHostVolumeRegistrationConstraintOutput) ToDynamicHostVolumeRegistrationConstraintOutput() DynamicHostVolumeRegistrationConstraintOutput {
	return o
}

func (o DynamicHostVolumeRegistrationConstraintOutput) ToDynamicHostVolumeRegistrationConstraintOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationConstraintOutput {
	return o
}

// An attribute to check to constrain volume placement
func (o DynamicHostVolumeRegistrationConstraintOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicHostVolumeRegistrationConstraint) string { return v.Attribute }).(pulumi.StringOutput)
}

// The operator to use for comparison
func (o DynamicHostVolumeRegistrationConstraintOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicHostVolumeRegistrationConstraint) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The requested value of the attribute
func (o DynamicHostVolumeRegistrationConstraintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicHostVolumeRegistrationConstraint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DynamicHostVolumeRegistrationConstraintArrayOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeRegistrationConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicHostVolumeRegistrationConstraint)(nil)).Elem()
}

func (o DynamicHostVolumeRegistrationConstraintArrayOutput) ToDynamicHostVolumeRegistrationConstraintArrayOutput() DynamicHostVolumeRegistrationConstraintArrayOutput {
	return o
}

func (o DynamicHostVolumeRegistrationConstraintArrayOutput) ToDynamicHostVolumeRegistrationConstraintArrayOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationConstraintArrayOutput {
	return o
}

func (o DynamicHostVolumeRegistrationConstraintArrayOutput) Index(i pulumi.IntInput) DynamicHostVolumeRegistrationConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicHostVolumeRegistrationConstraint {
		return vs[0].([]DynamicHostVolumeRegistrationConstraint)[vs[1].(int)]
	}).(DynamicHostVolumeRegistrationConstraintOutput)
}

type ExternalVolumeCapability struct {
	// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	AccessMode string `pulumi:"accessMode"`
	// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
	// - `block-device`
	// - `file-system`
	AttachmentMode string `pulumi:"attachmentMode"`
}

// ExternalVolumeCapabilityInput is an input type that accepts ExternalVolumeCapabilityArgs and ExternalVolumeCapabilityOutput values.
// You can construct a concrete instance of `ExternalVolumeCapabilityInput` via:
//
//	ExternalVolumeCapabilityArgs{...}
type ExternalVolumeCapabilityInput interface {
	pulumi.Input

	ToExternalVolumeCapabilityOutput() ExternalVolumeCapabilityOutput
	ToExternalVolumeCapabilityOutputWithContext(context.Context) ExternalVolumeCapabilityOutput
}

type ExternalVolumeCapabilityArgs struct {
	// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	AccessMode pulumi.StringInput `pulumi:"accessMode"`
	// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
	// - `block-device`
	// - `file-system`
	AttachmentMode pulumi.StringInput `pulumi:"attachmentMode"`
}

func (ExternalVolumeCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeCapability)(nil)).Elem()
}

func (i ExternalVolumeCapabilityArgs) ToExternalVolumeCapabilityOutput() ExternalVolumeCapabilityOutput {
	return i.ToExternalVolumeCapabilityOutputWithContext(context.Background())
}

func (i ExternalVolumeCapabilityArgs) ToExternalVolumeCapabilityOutputWithContext(ctx context.Context) ExternalVolumeCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeCapabilityOutput)
}

// ExternalVolumeCapabilityArrayInput is an input type that accepts ExternalVolumeCapabilityArray and ExternalVolumeCapabilityArrayOutput values.
// You can construct a concrete instance of `ExternalVolumeCapabilityArrayInput` via:
//
//	ExternalVolumeCapabilityArray{ ExternalVolumeCapabilityArgs{...} }
type ExternalVolumeCapabilityArrayInput interface {
	pulumi.Input

	ToExternalVolumeCapabilityArrayOutput() ExternalVolumeCapabilityArrayOutput
	ToExternalVolumeCapabilityArrayOutputWithContext(context.Context) ExternalVolumeCapabilityArrayOutput
}

type ExternalVolumeCapabilityArray []ExternalVolumeCapabilityInput

func (ExternalVolumeCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVolumeCapability)(nil)).Elem()
}

func (i ExternalVolumeCapabilityArray) ToExternalVolumeCapabilityArrayOutput() ExternalVolumeCapabilityArrayOutput {
	return i.ToExternalVolumeCapabilityArrayOutputWithContext(context.Background())
}

func (i ExternalVolumeCapabilityArray) ToExternalVolumeCapabilityArrayOutputWithContext(ctx context.Context) ExternalVolumeCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeCapabilityArrayOutput)
}

type ExternalVolumeCapabilityOutput struct{ *pulumi.OutputState }

func (ExternalVolumeCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeCapability)(nil)).Elem()
}

func (o ExternalVolumeCapabilityOutput) ToExternalVolumeCapabilityOutput() ExternalVolumeCapabilityOutput {
	return o
}

func (o ExternalVolumeCapabilityOutput) ToExternalVolumeCapabilityOutputWithContext(ctx context.Context) ExternalVolumeCapabilityOutput {
	return o
}

// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
// - `single-node-reader-only`
// - `single-node-writer`
// - `multi-node-reader-only`
// - `multi-node-single-writer`
// - `multi-node-multi-writer`
func (o ExternalVolumeCapabilityOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalVolumeCapability) string { return v.AccessMode }).(pulumi.StringOutput)
}

// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
// - `block-device`
// - `file-system`
func (o ExternalVolumeCapabilityOutput) AttachmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalVolumeCapability) string { return v.AttachmentMode }).(pulumi.StringOutput)
}

type ExternalVolumeCapabilityArrayOutput struct{ *pulumi.OutputState }

func (ExternalVolumeCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVolumeCapability)(nil)).Elem()
}

func (o ExternalVolumeCapabilityArrayOutput) ToExternalVolumeCapabilityArrayOutput() ExternalVolumeCapabilityArrayOutput {
	return o
}

func (o ExternalVolumeCapabilityArrayOutput) ToExternalVolumeCapabilityArrayOutputWithContext(ctx context.Context) ExternalVolumeCapabilityArrayOutput {
	return o
}

func (o ExternalVolumeCapabilityArrayOutput) Index(i pulumi.IntInput) ExternalVolumeCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalVolumeCapability {
		return vs[0].([]ExternalVolumeCapability)[vs[1].(int)]
	}).(ExternalVolumeCapabilityOutput)
}

type ExternalVolumeMountOptions struct {
	// `(string: optional)` - The file system type.
	FsType *string `pulumi:"fsType"`
	// `[]string: optional` - The flags passed to `mount`.
	MountFlags []string `pulumi:"mountFlags"`
}

// ExternalVolumeMountOptionsInput is an input type that accepts ExternalVolumeMountOptionsArgs and ExternalVolumeMountOptionsOutput values.
// You can construct a concrete instance of `ExternalVolumeMountOptionsInput` via:
//
//	ExternalVolumeMountOptionsArgs{...}
type ExternalVolumeMountOptionsInput interface {
	pulumi.Input

	ToExternalVolumeMountOptionsOutput() ExternalVolumeMountOptionsOutput
	ToExternalVolumeMountOptionsOutputWithContext(context.Context) ExternalVolumeMountOptionsOutput
}

type ExternalVolumeMountOptionsArgs struct {
	// `(string: optional)` - The file system type.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// `[]string: optional` - The flags passed to `mount`.
	MountFlags pulumi.StringArrayInput `pulumi:"mountFlags"`
}

func (ExternalVolumeMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeMountOptions)(nil)).Elem()
}

func (i ExternalVolumeMountOptionsArgs) ToExternalVolumeMountOptionsOutput() ExternalVolumeMountOptionsOutput {
	return i.ToExternalVolumeMountOptionsOutputWithContext(context.Background())
}

func (i ExternalVolumeMountOptionsArgs) ToExternalVolumeMountOptionsOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeMountOptionsOutput)
}

func (i ExternalVolumeMountOptionsArgs) ToExternalVolumeMountOptionsPtrOutput() ExternalVolumeMountOptionsPtrOutput {
	return i.ToExternalVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (i ExternalVolumeMountOptionsArgs) ToExternalVolumeMountOptionsPtrOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeMountOptionsOutput).ToExternalVolumeMountOptionsPtrOutputWithContext(ctx)
}

// ExternalVolumeMountOptionsPtrInput is an input type that accepts ExternalVolumeMountOptionsArgs, ExternalVolumeMountOptionsPtr and ExternalVolumeMountOptionsPtrOutput values.
// You can construct a concrete instance of `ExternalVolumeMountOptionsPtrInput` via:
//
//	        ExternalVolumeMountOptionsArgs{...}
//
//	or:
//
//	        nil
type ExternalVolumeMountOptionsPtrInput interface {
	pulumi.Input

	ToExternalVolumeMountOptionsPtrOutput() ExternalVolumeMountOptionsPtrOutput
	ToExternalVolumeMountOptionsPtrOutputWithContext(context.Context) ExternalVolumeMountOptionsPtrOutput
}

type externalVolumeMountOptionsPtrType ExternalVolumeMountOptionsArgs

func ExternalVolumeMountOptionsPtr(v *ExternalVolumeMountOptionsArgs) ExternalVolumeMountOptionsPtrInput {
	return (*externalVolumeMountOptionsPtrType)(v)
}

func (*externalVolumeMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolumeMountOptions)(nil)).Elem()
}

func (i *externalVolumeMountOptionsPtrType) ToExternalVolumeMountOptionsPtrOutput() ExternalVolumeMountOptionsPtrOutput {
	return i.ToExternalVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (i *externalVolumeMountOptionsPtrType) ToExternalVolumeMountOptionsPtrOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeMountOptionsPtrOutput)
}

type ExternalVolumeMountOptionsOutput struct{ *pulumi.OutputState }

func (ExternalVolumeMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeMountOptions)(nil)).Elem()
}

func (o ExternalVolumeMountOptionsOutput) ToExternalVolumeMountOptionsOutput() ExternalVolumeMountOptionsOutput {
	return o
}

func (o ExternalVolumeMountOptionsOutput) ToExternalVolumeMountOptionsOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsOutput {
	return o
}

func (o ExternalVolumeMountOptionsOutput) ToExternalVolumeMountOptionsPtrOutput() ExternalVolumeMountOptionsPtrOutput {
	return o.ToExternalVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (o ExternalVolumeMountOptionsOutput) ToExternalVolumeMountOptionsPtrOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalVolumeMountOptions) *ExternalVolumeMountOptions {
		return &v
	}).(ExternalVolumeMountOptionsPtrOutput)
}

// `(string: optional)` - The file system type.
func (o ExternalVolumeMountOptionsOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalVolumeMountOptions) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// `[]string: optional` - The flags passed to `mount`.
func (o ExternalVolumeMountOptionsOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExternalVolumeMountOptions) []string { return v.MountFlags }).(pulumi.StringArrayOutput)
}

type ExternalVolumeMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (ExternalVolumeMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolumeMountOptions)(nil)).Elem()
}

func (o ExternalVolumeMountOptionsPtrOutput) ToExternalVolumeMountOptionsPtrOutput() ExternalVolumeMountOptionsPtrOutput {
	return o
}

func (o ExternalVolumeMountOptionsPtrOutput) ToExternalVolumeMountOptionsPtrOutputWithContext(ctx context.Context) ExternalVolumeMountOptionsPtrOutput {
	return o
}

func (o ExternalVolumeMountOptionsPtrOutput) Elem() ExternalVolumeMountOptionsOutput {
	return o.ApplyT(func(v *ExternalVolumeMountOptions) ExternalVolumeMountOptions {
		if v != nil {
			return *v
		}
		var ret ExternalVolumeMountOptions
		return ret
	}).(ExternalVolumeMountOptionsOutput)
}

// `(string: optional)` - The file system type.
func (o ExternalVolumeMountOptionsPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalVolumeMountOptions) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// `[]string: optional` - The flags passed to `mount`.
func (o ExternalVolumeMountOptionsPtrOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExternalVolumeMountOptions) []string {
		if v == nil {
			return nil
		}
		return v.MountFlags
	}).(pulumi.StringArrayOutput)
}

type ExternalVolumeTopology struct {
	// `(map[string]string)` - Define the attributes for the topology request.
	//
	// In addition to the above arguments, the following attributes are exported and
	// can be referenced:
	Segments map[string]string `pulumi:"segments"`
}

// ExternalVolumeTopologyInput is an input type that accepts ExternalVolumeTopologyArgs and ExternalVolumeTopologyOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyInput` via:
//
//	ExternalVolumeTopologyArgs{...}
type ExternalVolumeTopologyInput interface {
	pulumi.Input

	ToExternalVolumeTopologyOutput() ExternalVolumeTopologyOutput
	ToExternalVolumeTopologyOutputWithContext(context.Context) ExternalVolumeTopologyOutput
}

type ExternalVolumeTopologyArgs struct {
	// `(map[string]string)` - Define the attributes for the topology request.
	//
	// In addition to the above arguments, the following attributes are exported and
	// can be referenced:
	Segments pulumi.StringMapInput `pulumi:"segments"`
}

func (ExternalVolumeTopologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopology)(nil)).Elem()
}

func (i ExternalVolumeTopologyArgs) ToExternalVolumeTopologyOutput() ExternalVolumeTopologyOutput {
	return i.ToExternalVolumeTopologyOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyArgs) ToExternalVolumeTopologyOutputWithContext(ctx context.Context) ExternalVolumeTopologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyOutput)
}

// ExternalVolumeTopologyArrayInput is an input type that accepts ExternalVolumeTopologyArray and ExternalVolumeTopologyArrayOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyArrayInput` via:
//
//	ExternalVolumeTopologyArray{ ExternalVolumeTopologyArgs{...} }
type ExternalVolumeTopologyArrayInput interface {
	pulumi.Input

	ToExternalVolumeTopologyArrayOutput() ExternalVolumeTopologyArrayOutput
	ToExternalVolumeTopologyArrayOutputWithContext(context.Context) ExternalVolumeTopologyArrayOutput
}

type ExternalVolumeTopologyArray []ExternalVolumeTopologyInput

func (ExternalVolumeTopologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVolumeTopology)(nil)).Elem()
}

func (i ExternalVolumeTopologyArray) ToExternalVolumeTopologyArrayOutput() ExternalVolumeTopologyArrayOutput {
	return i.ToExternalVolumeTopologyArrayOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyArray) ToExternalVolumeTopologyArrayOutputWithContext(ctx context.Context) ExternalVolumeTopologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyArrayOutput)
}

type ExternalVolumeTopologyOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopology)(nil)).Elem()
}

func (o ExternalVolumeTopologyOutput) ToExternalVolumeTopologyOutput() ExternalVolumeTopologyOutput {
	return o
}

func (o ExternalVolumeTopologyOutput) ToExternalVolumeTopologyOutputWithContext(ctx context.Context) ExternalVolumeTopologyOutput {
	return o
}

// `(map[string]string)` - Define the attributes for the topology request.
//
// In addition to the above arguments, the following attributes are exported and
// can be referenced:
func (o ExternalVolumeTopologyOutput) Segments() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExternalVolumeTopology) map[string]string { return v.Segments }).(pulumi.StringMapOutput)
}

type ExternalVolumeTopologyArrayOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVolumeTopology)(nil)).Elem()
}

func (o ExternalVolumeTopologyArrayOutput) ToExternalVolumeTopologyArrayOutput() ExternalVolumeTopologyArrayOutput {
	return o
}

func (o ExternalVolumeTopologyArrayOutput) ToExternalVolumeTopologyArrayOutputWithContext(ctx context.Context) ExternalVolumeTopologyArrayOutput {
	return o
}

func (o ExternalVolumeTopologyArrayOutput) Index(i pulumi.IntInput) ExternalVolumeTopologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalVolumeTopology {
		return vs[0].([]ExternalVolumeTopology)[vs[1].(int)]
	}).(ExternalVolumeTopologyOutput)
}

type ExternalVolumeTopologyRequest struct {
	// `(``Topology``: <optional>)` - Preferred topologies indicate that the volume should be created in a location accessible from some of the listed topologies.
	Preferred *ExternalVolumeTopologyRequestPreferred `pulumi:"preferred"`
	// `(``Topology``: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
	Required *ExternalVolumeTopologyRequestRequired `pulumi:"required"`
}

// ExternalVolumeTopologyRequestInput is an input type that accepts ExternalVolumeTopologyRequestArgs and ExternalVolumeTopologyRequestOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyRequestInput` via:
//
//	ExternalVolumeTopologyRequestArgs{...}
type ExternalVolumeTopologyRequestInput interface {
	pulumi.Input

	ToExternalVolumeTopologyRequestOutput() ExternalVolumeTopologyRequestOutput
	ToExternalVolumeTopologyRequestOutputWithContext(context.Context) ExternalVolumeTopologyRequestOutput
}

type ExternalVolumeTopologyRequestArgs struct {
	// `(``Topology``: <optional>)` - Preferred topologies indicate that the volume should be created in a location accessible from some of the listed topologies.
	Preferred ExternalVolumeTopologyRequestPreferredPtrInput `pulumi:"preferred"`
	// `(``Topology``: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
	Required ExternalVolumeTopologyRequestRequiredPtrInput `pulumi:"required"`
}

func (ExternalVolumeTopologyRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopologyRequest)(nil)).Elem()
}

func (i ExternalVolumeTopologyRequestArgs) ToExternalVolumeTopologyRequestOutput() ExternalVolumeTopologyRequestOutput {
	return i.ToExternalVolumeTopologyRequestOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyRequestArgs) ToExternalVolumeTopologyRequestOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestOutput)
}

func (i ExternalVolumeTopologyRequestArgs) ToExternalVolumeTopologyRequestPtrOutput() ExternalVolumeTopologyRequestPtrOutput {
	return i.ToExternalVolumeTopologyRequestPtrOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyRequestArgs) ToExternalVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestOutput).ToExternalVolumeTopologyRequestPtrOutputWithContext(ctx)
}

// ExternalVolumeTopologyRequestPtrInput is an input type that accepts ExternalVolumeTopologyRequestArgs, ExternalVolumeTopologyRequestPtr and ExternalVolumeTopologyRequestPtrOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyRequestPtrInput` via:
//
//	        ExternalVolumeTopologyRequestArgs{...}
//
//	or:
//
//	        nil
type ExternalVolumeTopologyRequestPtrInput interface {
	pulumi.Input

	ToExternalVolumeTopologyRequestPtrOutput() ExternalVolumeTopologyRequestPtrOutput
	ToExternalVolumeTopologyRequestPtrOutputWithContext(context.Context) ExternalVolumeTopologyRequestPtrOutput
}

type externalVolumeTopologyRequestPtrType ExternalVolumeTopologyRequestArgs

func ExternalVolumeTopologyRequestPtr(v *ExternalVolumeTopologyRequestArgs) ExternalVolumeTopologyRequestPtrInput {
	return (*externalVolumeTopologyRequestPtrType)(v)
}

func (*externalVolumeTopologyRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolumeTopologyRequest)(nil)).Elem()
}

func (i *externalVolumeTopologyRequestPtrType) ToExternalVolumeTopologyRequestPtrOutput() ExternalVolumeTopologyRequestPtrOutput {
	return i.ToExternalVolumeTopologyRequestPtrOutputWithContext(context.Background())
}

func (i *externalVolumeTopologyRequestPtrType) ToExternalVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestPtrOutput)
}

type ExternalVolumeTopologyRequestOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopologyRequest)(nil)).Elem()
}

func (o ExternalVolumeTopologyRequestOutput) ToExternalVolumeTopologyRequestOutput() ExternalVolumeTopologyRequestOutput {
	return o
}

func (o ExternalVolumeTopologyRequestOutput) ToExternalVolumeTopologyRequestOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestOutput {
	return o
}

func (o ExternalVolumeTopologyRequestOutput) ToExternalVolumeTopologyRequestPtrOutput() ExternalVolumeTopologyRequestPtrOutput {
	return o.ToExternalVolumeTopologyRequestPtrOutputWithContext(context.Background())
}

func (o ExternalVolumeTopologyRequestOutput) ToExternalVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalVolumeTopologyRequest) *ExternalVolumeTopologyRequest {
		return &v
	}).(ExternalVolumeTopologyRequestPtrOutput)
}

// `(“Topology“: <optional>)` - Preferred topologies indicate that the volume should be created in a location accessible from some of the listed topologies.
func (o ExternalVolumeTopologyRequestOutput) Preferred() ExternalVolumeTopologyRequestPreferredPtrOutput {
	return o.ApplyT(func(v ExternalVolumeTopologyRequest) *ExternalVolumeTopologyRequestPreferred { return v.Preferred }).(ExternalVolumeTopologyRequestPreferredPtrOutput)
}

// `(“Topology“: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
func (o ExternalVolumeTopologyRequestOutput) Required() ExternalVolumeTopologyRequestRequiredPtrOutput {
	return o.ApplyT(func(v ExternalVolumeTopologyRequest) *ExternalVolumeTopologyRequestRequired { return v.Required }).(ExternalVolumeTopologyRequestRequiredPtrOutput)
}

type ExternalVolumeTopologyRequestPtrOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolumeTopologyRequest)(nil)).Elem()
}

func (o ExternalVolumeTopologyRequestPtrOutput) ToExternalVolumeTopologyRequestPtrOutput() ExternalVolumeTopologyRequestPtrOutput {
	return o
}

func (o ExternalVolumeTopologyRequestPtrOutput) ToExternalVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPtrOutput {
	return o
}

func (o ExternalVolumeTopologyRequestPtrOutput) Elem() ExternalVolumeTopologyRequestOutput {
	return o.ApplyT(func(v *ExternalVolumeTopologyRequest) ExternalVolumeTopologyRequest {
		if v != nil {
			return *v
		}
		var ret ExternalVolumeTopologyRequest
		return ret
	}).(ExternalVolumeTopologyRequestOutput)
}

// `(“Topology“: <optional>)` - Preferred topologies indicate that the volume should be created in a location accessible from some of the listed topologies.
func (o ExternalVolumeTopologyRequestPtrOutput) Preferred() ExternalVolumeTopologyRequestPreferredPtrOutput {
	return o.ApplyT(func(v *ExternalVolumeTopologyRequest) *ExternalVolumeTopologyRequestPreferred {
		if v == nil {
			return nil
		}
		return v.Preferred
	}).(ExternalVolumeTopologyRequestPreferredPtrOutput)
}

// `(“Topology“: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
func (o ExternalVolumeTopologyRequestPtrOutput) Required() ExternalVolumeTopologyRequestRequiredPtrOutput {
	return o.ApplyT(func(v *ExternalVolumeTopologyRequest) *ExternalVolumeTopologyRequestRequired {
		if v == nil {
			return nil
		}
		return v.Required
	}).(ExternalVolumeTopologyRequestRequiredPtrOutput)
}

type ExternalVolumeTopologyRequestPreferred struct {
	// Defines the location for the volume.
	Topologies []ExternalVolumeTopologyRequestPreferredTopology `pulumi:"topologies"`
}

// ExternalVolumeTopologyRequestPreferredInput is an input type that accepts ExternalVolumeTopologyRequestPreferredArgs and ExternalVolumeTopologyRequestPreferredOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyRequestPreferredInput` via:
//
//	ExternalVolumeTopologyRequestPreferredArgs{...}
type ExternalVolumeTopologyRequestPreferredInput interface {
	pulumi.Input

	ToExternalVolumeTopologyRequestPreferredOutput() ExternalVolumeTopologyRequestPreferredOutput
	ToExternalVolumeTopologyRequestPreferredOutputWithContext(context.Context) ExternalVolumeTopologyRequestPreferredOutput
}

type ExternalVolumeTopologyRequestPreferredArgs struct {
	// Defines the location for the volume.
	Topologies ExternalVolumeTopologyRequestPreferredTopologyArrayInput `pulumi:"topologies"`
}

func (ExternalVolumeTopologyRequestPreferredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopologyRequestPreferred)(nil)).Elem()
}

func (i ExternalVolumeTopologyRequestPreferredArgs) ToExternalVolumeTopologyRequestPreferredOutput() ExternalVolumeTopologyRequestPreferredOutput {
	return i.ToExternalVolumeTopologyRequestPreferredOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyRequestPreferredArgs) ToExternalVolumeTopologyRequestPreferredOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPreferredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestPreferredOutput)
}

func (i ExternalVolumeTopologyRequestPreferredArgs) ToExternalVolumeTopologyRequestPreferredPtrOutput() ExternalVolumeTopologyRequestPreferredPtrOutput {
	return i.ToExternalVolumeTopologyRequestPreferredPtrOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyRequestPreferredArgs) ToExternalVolumeTopologyRequestPreferredPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPreferredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestPreferredOutput).ToExternalVolumeTopologyRequestPreferredPtrOutputWithContext(ctx)
}

// ExternalVolumeTopologyRequestPreferredPtrInput is an input type that accepts ExternalVolumeTopologyRequestPreferredArgs, ExternalVolumeTopologyRequestPreferredPtr and ExternalVolumeTopologyRequestPreferredPtrOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyRequestPreferredPtrInput` via:
//
//	        ExternalVolumeTopologyRequestPreferredArgs{...}
//
//	or:
//
//	        nil
type ExternalVolumeTopologyRequestPreferredPtrInput interface {
	pulumi.Input

	ToExternalVolumeTopologyRequestPreferredPtrOutput() ExternalVolumeTopologyRequestPreferredPtrOutput
	ToExternalVolumeTopologyRequestPreferredPtrOutputWithContext(context.Context) ExternalVolumeTopologyRequestPreferredPtrOutput
}

type externalVolumeTopologyRequestPreferredPtrType ExternalVolumeTopologyRequestPreferredArgs

func ExternalVolumeTopologyRequestPreferredPtr(v *ExternalVolumeTopologyRequestPreferredArgs) ExternalVolumeTopologyRequestPreferredPtrInput {
	return (*externalVolumeTopologyRequestPreferredPtrType)(v)
}

func (*externalVolumeTopologyRequestPreferredPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolumeTopologyRequestPreferred)(nil)).Elem()
}

func (i *externalVolumeTopologyRequestPreferredPtrType) ToExternalVolumeTopologyRequestPreferredPtrOutput() ExternalVolumeTopologyRequestPreferredPtrOutput {
	return i.ToExternalVolumeTopologyRequestPreferredPtrOutputWithContext(context.Background())
}

func (i *externalVolumeTopologyRequestPreferredPtrType) ToExternalVolumeTopologyRequestPreferredPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPreferredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestPreferredPtrOutput)
}

type ExternalVolumeTopologyRequestPreferredOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyRequestPreferredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopologyRequestPreferred)(nil)).Elem()
}

func (o ExternalVolumeTopologyRequestPreferredOutput) ToExternalVolumeTopologyRequestPreferredOutput() ExternalVolumeTopologyRequestPreferredOutput {
	return o
}

func (o ExternalVolumeTopologyRequestPreferredOutput) ToExternalVolumeTopologyRequestPreferredOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPreferredOutput {
	return o
}

func (o ExternalVolumeTopologyRequestPreferredOutput) ToExternalVolumeTopologyRequestPreferredPtrOutput() ExternalVolumeTopologyRequestPreferredPtrOutput {
	return o.ToExternalVolumeTopologyRequestPreferredPtrOutputWithContext(context.Background())
}

func (o ExternalVolumeTopologyRequestPreferredOutput) ToExternalVolumeTopologyRequestPreferredPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPreferredPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalVolumeTopologyRequestPreferred) *ExternalVolumeTopologyRequestPreferred {
		return &v
	}).(ExternalVolumeTopologyRequestPreferredPtrOutput)
}

// Defines the location for the volume.
func (o ExternalVolumeTopologyRequestPreferredOutput) Topologies() ExternalVolumeTopologyRequestPreferredTopologyArrayOutput {
	return o.ApplyT(func(v ExternalVolumeTopologyRequestPreferred) []ExternalVolumeTopologyRequestPreferredTopology {
		return v.Topologies
	}).(ExternalVolumeTopologyRequestPreferredTopologyArrayOutput)
}

type ExternalVolumeTopologyRequestPreferredPtrOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyRequestPreferredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolumeTopologyRequestPreferred)(nil)).Elem()
}

func (o ExternalVolumeTopologyRequestPreferredPtrOutput) ToExternalVolumeTopologyRequestPreferredPtrOutput() ExternalVolumeTopologyRequestPreferredPtrOutput {
	return o
}

func (o ExternalVolumeTopologyRequestPreferredPtrOutput) ToExternalVolumeTopologyRequestPreferredPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPreferredPtrOutput {
	return o
}

func (o ExternalVolumeTopologyRequestPreferredPtrOutput) Elem() ExternalVolumeTopologyRequestPreferredOutput {
	return o.ApplyT(func(v *ExternalVolumeTopologyRequestPreferred) ExternalVolumeTopologyRequestPreferred {
		if v != nil {
			return *v
		}
		var ret ExternalVolumeTopologyRequestPreferred
		return ret
	}).(ExternalVolumeTopologyRequestPreferredOutput)
}

// Defines the location for the volume.
func (o ExternalVolumeTopologyRequestPreferredPtrOutput) Topologies() ExternalVolumeTopologyRequestPreferredTopologyArrayOutput {
	return o.ApplyT(func(v *ExternalVolumeTopologyRequestPreferred) []ExternalVolumeTopologyRequestPreferredTopology {
		if v == nil {
			return nil
		}
		return v.Topologies
	}).(ExternalVolumeTopologyRequestPreferredTopologyArrayOutput)
}

type ExternalVolumeTopologyRequestPreferredTopology struct {
	// Define the attributes for the topology request.
	Segments map[string]string `pulumi:"segments"`
}

// ExternalVolumeTopologyRequestPreferredTopologyInput is an input type that accepts ExternalVolumeTopologyRequestPreferredTopologyArgs and ExternalVolumeTopologyRequestPreferredTopologyOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyRequestPreferredTopologyInput` via:
//
//	ExternalVolumeTopologyRequestPreferredTopologyArgs{...}
type ExternalVolumeTopologyRequestPreferredTopologyInput interface {
	pulumi.Input

	ToExternalVolumeTopologyRequestPreferredTopologyOutput() ExternalVolumeTopologyRequestPreferredTopologyOutput
	ToExternalVolumeTopologyRequestPreferredTopologyOutputWithContext(context.Context) ExternalVolumeTopologyRequestPreferredTopologyOutput
}

type ExternalVolumeTopologyRequestPreferredTopologyArgs struct {
	// Define the attributes for the topology request.
	Segments pulumi.StringMapInput `pulumi:"segments"`
}

func (ExternalVolumeTopologyRequestPreferredTopologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopologyRequestPreferredTopology)(nil)).Elem()
}

func (i ExternalVolumeTopologyRequestPreferredTopologyArgs) ToExternalVolumeTopologyRequestPreferredTopologyOutput() ExternalVolumeTopologyRequestPreferredTopologyOutput {
	return i.ToExternalVolumeTopologyRequestPreferredTopologyOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyRequestPreferredTopologyArgs) ToExternalVolumeTopologyRequestPreferredTopologyOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPreferredTopologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestPreferredTopologyOutput)
}

// ExternalVolumeTopologyRequestPreferredTopologyArrayInput is an input type that accepts ExternalVolumeTopologyRequestPreferredTopologyArray and ExternalVolumeTopologyRequestPreferredTopologyArrayOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyRequestPreferredTopologyArrayInput` via:
//
//	ExternalVolumeTopologyRequestPreferredTopologyArray{ ExternalVolumeTopologyRequestPreferredTopologyArgs{...} }
type ExternalVolumeTopologyRequestPreferredTopologyArrayInput interface {
	pulumi.Input

	ToExternalVolumeTopologyRequestPreferredTopologyArrayOutput() ExternalVolumeTopologyRequestPreferredTopologyArrayOutput
	ToExternalVolumeTopologyRequestPreferredTopologyArrayOutputWithContext(context.Context) ExternalVolumeTopologyRequestPreferredTopologyArrayOutput
}

type ExternalVolumeTopologyRequestPreferredTopologyArray []ExternalVolumeTopologyRequestPreferredTopologyInput

func (ExternalVolumeTopologyRequestPreferredTopologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVolumeTopologyRequestPreferredTopology)(nil)).Elem()
}

func (i ExternalVolumeTopologyRequestPreferredTopologyArray) ToExternalVolumeTopologyRequestPreferredTopologyArrayOutput() ExternalVolumeTopologyRequestPreferredTopologyArrayOutput {
	return i.ToExternalVolumeTopologyRequestPreferredTopologyArrayOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyRequestPreferredTopologyArray) ToExternalVolumeTopologyRequestPreferredTopologyArrayOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPreferredTopologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestPreferredTopologyArrayOutput)
}

type ExternalVolumeTopologyRequestPreferredTopologyOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyRequestPreferredTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopologyRequestPreferredTopology)(nil)).Elem()
}

func (o ExternalVolumeTopologyRequestPreferredTopologyOutput) ToExternalVolumeTopologyRequestPreferredTopologyOutput() ExternalVolumeTopologyRequestPreferredTopologyOutput {
	return o
}

func (o ExternalVolumeTopologyRequestPreferredTopologyOutput) ToExternalVolumeTopologyRequestPreferredTopologyOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPreferredTopologyOutput {
	return o
}

// Define the attributes for the topology request.
func (o ExternalVolumeTopologyRequestPreferredTopologyOutput) Segments() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExternalVolumeTopologyRequestPreferredTopology) map[string]string { return v.Segments }).(pulumi.StringMapOutput)
}

type ExternalVolumeTopologyRequestPreferredTopologyArrayOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyRequestPreferredTopologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVolumeTopologyRequestPreferredTopology)(nil)).Elem()
}

func (o ExternalVolumeTopologyRequestPreferredTopologyArrayOutput) ToExternalVolumeTopologyRequestPreferredTopologyArrayOutput() ExternalVolumeTopologyRequestPreferredTopologyArrayOutput {
	return o
}

func (o ExternalVolumeTopologyRequestPreferredTopologyArrayOutput) ToExternalVolumeTopologyRequestPreferredTopologyArrayOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestPreferredTopologyArrayOutput {
	return o
}

func (o ExternalVolumeTopologyRequestPreferredTopologyArrayOutput) Index(i pulumi.IntInput) ExternalVolumeTopologyRequestPreferredTopologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalVolumeTopologyRequestPreferredTopology {
		return vs[0].([]ExternalVolumeTopologyRequestPreferredTopology)[vs[1].(int)]
	}).(ExternalVolumeTopologyRequestPreferredTopologyOutput)
}

type ExternalVolumeTopologyRequestRequired struct {
	// Defines the location for the volume.
	Topologies []ExternalVolumeTopologyRequestRequiredTopology `pulumi:"topologies"`
}

// ExternalVolumeTopologyRequestRequiredInput is an input type that accepts ExternalVolumeTopologyRequestRequiredArgs and ExternalVolumeTopologyRequestRequiredOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyRequestRequiredInput` via:
//
//	ExternalVolumeTopologyRequestRequiredArgs{...}
type ExternalVolumeTopologyRequestRequiredInput interface {
	pulumi.Input

	ToExternalVolumeTopologyRequestRequiredOutput() ExternalVolumeTopologyRequestRequiredOutput
	ToExternalVolumeTopologyRequestRequiredOutputWithContext(context.Context) ExternalVolumeTopologyRequestRequiredOutput
}

type ExternalVolumeTopologyRequestRequiredArgs struct {
	// Defines the location for the volume.
	Topologies ExternalVolumeTopologyRequestRequiredTopologyArrayInput `pulumi:"topologies"`
}

func (ExternalVolumeTopologyRequestRequiredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopologyRequestRequired)(nil)).Elem()
}

func (i ExternalVolumeTopologyRequestRequiredArgs) ToExternalVolumeTopologyRequestRequiredOutput() ExternalVolumeTopologyRequestRequiredOutput {
	return i.ToExternalVolumeTopologyRequestRequiredOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyRequestRequiredArgs) ToExternalVolumeTopologyRequestRequiredOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestRequiredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestRequiredOutput)
}

func (i ExternalVolumeTopologyRequestRequiredArgs) ToExternalVolumeTopologyRequestRequiredPtrOutput() ExternalVolumeTopologyRequestRequiredPtrOutput {
	return i.ToExternalVolumeTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyRequestRequiredArgs) ToExternalVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestRequiredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestRequiredOutput).ToExternalVolumeTopologyRequestRequiredPtrOutputWithContext(ctx)
}

// ExternalVolumeTopologyRequestRequiredPtrInput is an input type that accepts ExternalVolumeTopologyRequestRequiredArgs, ExternalVolumeTopologyRequestRequiredPtr and ExternalVolumeTopologyRequestRequiredPtrOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyRequestRequiredPtrInput` via:
//
//	        ExternalVolumeTopologyRequestRequiredArgs{...}
//
//	or:
//
//	        nil
type ExternalVolumeTopologyRequestRequiredPtrInput interface {
	pulumi.Input

	ToExternalVolumeTopologyRequestRequiredPtrOutput() ExternalVolumeTopologyRequestRequiredPtrOutput
	ToExternalVolumeTopologyRequestRequiredPtrOutputWithContext(context.Context) ExternalVolumeTopologyRequestRequiredPtrOutput
}

type externalVolumeTopologyRequestRequiredPtrType ExternalVolumeTopologyRequestRequiredArgs

func ExternalVolumeTopologyRequestRequiredPtr(v *ExternalVolumeTopologyRequestRequiredArgs) ExternalVolumeTopologyRequestRequiredPtrInput {
	return (*externalVolumeTopologyRequestRequiredPtrType)(v)
}

func (*externalVolumeTopologyRequestRequiredPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolumeTopologyRequestRequired)(nil)).Elem()
}

func (i *externalVolumeTopologyRequestRequiredPtrType) ToExternalVolumeTopologyRequestRequiredPtrOutput() ExternalVolumeTopologyRequestRequiredPtrOutput {
	return i.ToExternalVolumeTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (i *externalVolumeTopologyRequestRequiredPtrType) ToExternalVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestRequiredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestRequiredPtrOutput)
}

type ExternalVolumeTopologyRequestRequiredOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyRequestRequiredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopologyRequestRequired)(nil)).Elem()
}

func (o ExternalVolumeTopologyRequestRequiredOutput) ToExternalVolumeTopologyRequestRequiredOutput() ExternalVolumeTopologyRequestRequiredOutput {
	return o
}

func (o ExternalVolumeTopologyRequestRequiredOutput) ToExternalVolumeTopologyRequestRequiredOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestRequiredOutput {
	return o
}

func (o ExternalVolumeTopologyRequestRequiredOutput) ToExternalVolumeTopologyRequestRequiredPtrOutput() ExternalVolumeTopologyRequestRequiredPtrOutput {
	return o.ToExternalVolumeTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (o ExternalVolumeTopologyRequestRequiredOutput) ToExternalVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestRequiredPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalVolumeTopologyRequestRequired) *ExternalVolumeTopologyRequestRequired {
		return &v
	}).(ExternalVolumeTopologyRequestRequiredPtrOutput)
}

// Defines the location for the volume.
func (o ExternalVolumeTopologyRequestRequiredOutput) Topologies() ExternalVolumeTopologyRequestRequiredTopologyArrayOutput {
	return o.ApplyT(func(v ExternalVolumeTopologyRequestRequired) []ExternalVolumeTopologyRequestRequiredTopology {
		return v.Topologies
	}).(ExternalVolumeTopologyRequestRequiredTopologyArrayOutput)
}

type ExternalVolumeTopologyRequestRequiredPtrOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyRequestRequiredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolumeTopologyRequestRequired)(nil)).Elem()
}

func (o ExternalVolumeTopologyRequestRequiredPtrOutput) ToExternalVolumeTopologyRequestRequiredPtrOutput() ExternalVolumeTopologyRequestRequiredPtrOutput {
	return o
}

func (o ExternalVolumeTopologyRequestRequiredPtrOutput) ToExternalVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestRequiredPtrOutput {
	return o
}

func (o ExternalVolumeTopologyRequestRequiredPtrOutput) Elem() ExternalVolumeTopologyRequestRequiredOutput {
	return o.ApplyT(func(v *ExternalVolumeTopologyRequestRequired) ExternalVolumeTopologyRequestRequired {
		if v != nil {
			return *v
		}
		var ret ExternalVolumeTopologyRequestRequired
		return ret
	}).(ExternalVolumeTopologyRequestRequiredOutput)
}

// Defines the location for the volume.
func (o ExternalVolumeTopologyRequestRequiredPtrOutput) Topologies() ExternalVolumeTopologyRequestRequiredTopologyArrayOutput {
	return o.ApplyT(func(v *ExternalVolumeTopologyRequestRequired) []ExternalVolumeTopologyRequestRequiredTopology {
		if v == nil {
			return nil
		}
		return v.Topologies
	}).(ExternalVolumeTopologyRequestRequiredTopologyArrayOutput)
}

type ExternalVolumeTopologyRequestRequiredTopology struct {
	// Define the attributes for the topology request.
	Segments map[string]string `pulumi:"segments"`
}

// ExternalVolumeTopologyRequestRequiredTopologyInput is an input type that accepts ExternalVolumeTopologyRequestRequiredTopologyArgs and ExternalVolumeTopologyRequestRequiredTopologyOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyRequestRequiredTopologyInput` via:
//
//	ExternalVolumeTopologyRequestRequiredTopologyArgs{...}
type ExternalVolumeTopologyRequestRequiredTopologyInput interface {
	pulumi.Input

	ToExternalVolumeTopologyRequestRequiredTopologyOutput() ExternalVolumeTopologyRequestRequiredTopologyOutput
	ToExternalVolumeTopologyRequestRequiredTopologyOutputWithContext(context.Context) ExternalVolumeTopologyRequestRequiredTopologyOutput
}

type ExternalVolumeTopologyRequestRequiredTopologyArgs struct {
	// Define the attributes for the topology request.
	Segments pulumi.StringMapInput `pulumi:"segments"`
}

func (ExternalVolumeTopologyRequestRequiredTopologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (i ExternalVolumeTopologyRequestRequiredTopologyArgs) ToExternalVolumeTopologyRequestRequiredTopologyOutput() ExternalVolumeTopologyRequestRequiredTopologyOutput {
	return i.ToExternalVolumeTopologyRequestRequiredTopologyOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyRequestRequiredTopologyArgs) ToExternalVolumeTopologyRequestRequiredTopologyOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestRequiredTopologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestRequiredTopologyOutput)
}

// ExternalVolumeTopologyRequestRequiredTopologyArrayInput is an input type that accepts ExternalVolumeTopologyRequestRequiredTopologyArray and ExternalVolumeTopologyRequestRequiredTopologyArrayOutput values.
// You can construct a concrete instance of `ExternalVolumeTopologyRequestRequiredTopologyArrayInput` via:
//
//	ExternalVolumeTopologyRequestRequiredTopologyArray{ ExternalVolumeTopologyRequestRequiredTopologyArgs{...} }
type ExternalVolumeTopologyRequestRequiredTopologyArrayInput interface {
	pulumi.Input

	ToExternalVolumeTopologyRequestRequiredTopologyArrayOutput() ExternalVolumeTopologyRequestRequiredTopologyArrayOutput
	ToExternalVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(context.Context) ExternalVolumeTopologyRequestRequiredTopologyArrayOutput
}

type ExternalVolumeTopologyRequestRequiredTopologyArray []ExternalVolumeTopologyRequestRequiredTopologyInput

func (ExternalVolumeTopologyRequestRequiredTopologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (i ExternalVolumeTopologyRequestRequiredTopologyArray) ToExternalVolumeTopologyRequestRequiredTopologyArrayOutput() ExternalVolumeTopologyRequestRequiredTopologyArrayOutput {
	return i.ToExternalVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(context.Background())
}

func (i ExternalVolumeTopologyRequestRequiredTopologyArray) ToExternalVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestRequiredTopologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeTopologyRequestRequiredTopologyArrayOutput)
}

type ExternalVolumeTopologyRequestRequiredTopologyOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyRequestRequiredTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (o ExternalVolumeTopologyRequestRequiredTopologyOutput) ToExternalVolumeTopologyRequestRequiredTopologyOutput() ExternalVolumeTopologyRequestRequiredTopologyOutput {
	return o
}

func (o ExternalVolumeTopologyRequestRequiredTopologyOutput) ToExternalVolumeTopologyRequestRequiredTopologyOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestRequiredTopologyOutput {
	return o
}

// Define the attributes for the topology request.
func (o ExternalVolumeTopologyRequestRequiredTopologyOutput) Segments() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExternalVolumeTopologyRequestRequiredTopology) map[string]string { return v.Segments }).(pulumi.StringMapOutput)
}

type ExternalVolumeTopologyRequestRequiredTopologyArrayOutput struct{ *pulumi.OutputState }

func (ExternalVolumeTopologyRequestRequiredTopologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (o ExternalVolumeTopologyRequestRequiredTopologyArrayOutput) ToExternalVolumeTopologyRequestRequiredTopologyArrayOutput() ExternalVolumeTopologyRequestRequiredTopologyArrayOutput {
	return o
}

func (o ExternalVolumeTopologyRequestRequiredTopologyArrayOutput) ToExternalVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(ctx context.Context) ExternalVolumeTopologyRequestRequiredTopologyArrayOutput {
	return o
}

func (o ExternalVolumeTopologyRequestRequiredTopologyArrayOutput) Index(i pulumi.IntInput) ExternalVolumeTopologyRequestRequiredTopologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalVolumeTopologyRequestRequiredTopology {
		return vs[0].([]ExternalVolumeTopologyRequestRequiredTopology)[vs[1].(int)]
	}).(ExternalVolumeTopologyRequestRequiredTopologyOutput)
}

type JobHcl2 struct {
	// `(boolean: false)` - Set this to `true` to be able to use
	// HCL2 filesystem functions
	AllowFs *bool `pulumi:"allowFs"`
	// Additional variables to use when templating the job with HCL2
	Vars map[string]string `pulumi:"vars"`
}

// JobHcl2Input is an input type that accepts JobHcl2Args and JobHcl2Output values.
// You can construct a concrete instance of `JobHcl2Input` via:
//
//	JobHcl2Args{...}
type JobHcl2Input interface {
	pulumi.Input

	ToJobHcl2Output() JobHcl2Output
	ToJobHcl2OutputWithContext(context.Context) JobHcl2Output
}

type JobHcl2Args struct {
	// `(boolean: false)` - Set this to `true` to be able to use
	// HCL2 filesystem functions
	AllowFs pulumi.BoolPtrInput `pulumi:"allowFs"`
	// Additional variables to use when templating the job with HCL2
	Vars pulumi.StringMapInput `pulumi:"vars"`
}

func (JobHcl2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*JobHcl2)(nil)).Elem()
}

func (i JobHcl2Args) ToJobHcl2Output() JobHcl2Output {
	return i.ToJobHcl2OutputWithContext(context.Background())
}

func (i JobHcl2Args) ToJobHcl2OutputWithContext(ctx context.Context) JobHcl2Output {
	return pulumi.ToOutputWithContext(ctx, i).(JobHcl2Output)
}

func (i JobHcl2Args) ToJobHcl2PtrOutput() JobHcl2PtrOutput {
	return i.ToJobHcl2PtrOutputWithContext(context.Background())
}

func (i JobHcl2Args) ToJobHcl2PtrOutputWithContext(ctx context.Context) JobHcl2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobHcl2Output).ToJobHcl2PtrOutputWithContext(ctx)
}

// JobHcl2PtrInput is an input type that accepts JobHcl2Args, JobHcl2Ptr and JobHcl2PtrOutput values.
// You can construct a concrete instance of `JobHcl2PtrInput` via:
//
//	        JobHcl2Args{...}
//
//	or:
//
//	        nil
type JobHcl2PtrInput interface {
	pulumi.Input

	ToJobHcl2PtrOutput() JobHcl2PtrOutput
	ToJobHcl2PtrOutputWithContext(context.Context) JobHcl2PtrOutput
}

type jobHcl2PtrType JobHcl2Args

func JobHcl2Ptr(v *JobHcl2Args) JobHcl2PtrInput {
	return (*jobHcl2PtrType)(v)
}

func (*jobHcl2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobHcl2)(nil)).Elem()
}

func (i *jobHcl2PtrType) ToJobHcl2PtrOutput() JobHcl2PtrOutput {
	return i.ToJobHcl2PtrOutputWithContext(context.Background())
}

func (i *jobHcl2PtrType) ToJobHcl2PtrOutputWithContext(ctx context.Context) JobHcl2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobHcl2PtrOutput)
}

type JobHcl2Output struct{ *pulumi.OutputState }

func (JobHcl2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*JobHcl2)(nil)).Elem()
}

func (o JobHcl2Output) ToJobHcl2Output() JobHcl2Output {
	return o
}

func (o JobHcl2Output) ToJobHcl2OutputWithContext(ctx context.Context) JobHcl2Output {
	return o
}

func (o JobHcl2Output) ToJobHcl2PtrOutput() JobHcl2PtrOutput {
	return o.ToJobHcl2PtrOutputWithContext(context.Background())
}

func (o JobHcl2Output) ToJobHcl2PtrOutputWithContext(ctx context.Context) JobHcl2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobHcl2) *JobHcl2 {
		return &v
	}).(JobHcl2PtrOutput)
}

// `(boolean: false)` - Set this to `true` to be able to use
// HCL2 filesystem functions
func (o JobHcl2Output) AllowFs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobHcl2) *bool { return v.AllowFs }).(pulumi.BoolPtrOutput)
}

// Additional variables to use when templating the job with HCL2
func (o JobHcl2Output) Vars() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobHcl2) map[string]string { return v.Vars }).(pulumi.StringMapOutput)
}

type JobHcl2PtrOutput struct{ *pulumi.OutputState }

func (JobHcl2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobHcl2)(nil)).Elem()
}

func (o JobHcl2PtrOutput) ToJobHcl2PtrOutput() JobHcl2PtrOutput {
	return o
}

func (o JobHcl2PtrOutput) ToJobHcl2PtrOutputWithContext(ctx context.Context) JobHcl2PtrOutput {
	return o
}

func (o JobHcl2PtrOutput) Elem() JobHcl2Output {
	return o.ApplyT(func(v *JobHcl2) JobHcl2 {
		if v != nil {
			return *v
		}
		var ret JobHcl2
		return ret
	}).(JobHcl2Output)
}

// `(boolean: false)` - Set this to `true` to be able to use
// HCL2 filesystem functions
func (o JobHcl2PtrOutput) AllowFs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobHcl2) *bool {
		if v == nil {
			return nil
		}
		return v.AllowFs
	}).(pulumi.BoolPtrOutput)
}

// Additional variables to use when templating the job with HCL2
func (o JobHcl2PtrOutput) Vars() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobHcl2) map[string]string {
		if v == nil {
			return nil
		}
		return v.Vars
	}).(pulumi.StringMapOutput)
}

type JobTaskGroup struct {
	Count   *int                 `pulumi:"count"`
	Meta    map[string]string    `pulumi:"meta"`
	Name    *string              `pulumi:"name"`
	Tasks   []JobTaskGroupTask   `pulumi:"tasks"`
	Volumes []JobTaskGroupVolume `pulumi:"volumes"`
}

// JobTaskGroupInput is an input type that accepts JobTaskGroupArgs and JobTaskGroupOutput values.
// You can construct a concrete instance of `JobTaskGroupInput` via:
//
//	JobTaskGroupArgs{...}
type JobTaskGroupInput interface {
	pulumi.Input

	ToJobTaskGroupOutput() JobTaskGroupOutput
	ToJobTaskGroupOutputWithContext(context.Context) JobTaskGroupOutput
}

type JobTaskGroupArgs struct {
	Count   pulumi.IntPtrInput           `pulumi:"count"`
	Meta    pulumi.StringMapInput        `pulumi:"meta"`
	Name    pulumi.StringPtrInput        `pulumi:"name"`
	Tasks   JobTaskGroupTaskArrayInput   `pulumi:"tasks"`
	Volumes JobTaskGroupVolumeArrayInput `pulumi:"volumes"`
}

func (JobTaskGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroup)(nil)).Elem()
}

func (i JobTaskGroupArgs) ToJobTaskGroupOutput() JobTaskGroupOutput {
	return i.ToJobTaskGroupOutputWithContext(context.Background())
}

func (i JobTaskGroupArgs) ToJobTaskGroupOutputWithContext(ctx context.Context) JobTaskGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupOutput)
}

// JobTaskGroupArrayInput is an input type that accepts JobTaskGroupArray and JobTaskGroupArrayOutput values.
// You can construct a concrete instance of `JobTaskGroupArrayInput` via:
//
//	JobTaskGroupArray{ JobTaskGroupArgs{...} }
type JobTaskGroupArrayInput interface {
	pulumi.Input

	ToJobTaskGroupArrayOutput() JobTaskGroupArrayOutput
	ToJobTaskGroupArrayOutputWithContext(context.Context) JobTaskGroupArrayOutput
}

type JobTaskGroupArray []JobTaskGroupInput

func (JobTaskGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroup)(nil)).Elem()
}

func (i JobTaskGroupArray) ToJobTaskGroupArrayOutput() JobTaskGroupArrayOutput {
	return i.ToJobTaskGroupArrayOutputWithContext(context.Background())
}

func (i JobTaskGroupArray) ToJobTaskGroupArrayOutputWithContext(ctx context.Context) JobTaskGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupArrayOutput)
}

type JobTaskGroupOutput struct{ *pulumi.OutputState }

func (JobTaskGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroup)(nil)).Elem()
}

func (o JobTaskGroupOutput) ToJobTaskGroupOutput() JobTaskGroupOutput {
	return o
}

func (o JobTaskGroupOutput) ToJobTaskGroupOutputWithContext(ctx context.Context) JobTaskGroupOutput {
	return o
}

func (o JobTaskGroupOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobTaskGroup) *int { return v.Count }).(pulumi.IntPtrOutput)
}

func (o JobTaskGroupOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobTaskGroup) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

func (o JobTaskGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupOutput) Tasks() JobTaskGroupTaskArrayOutput {
	return o.ApplyT(func(v JobTaskGroup) []JobTaskGroupTask { return v.Tasks }).(JobTaskGroupTaskArrayOutput)
}

func (o JobTaskGroupOutput) Volumes() JobTaskGroupVolumeArrayOutput {
	return o.ApplyT(func(v JobTaskGroup) []JobTaskGroupVolume { return v.Volumes }).(JobTaskGroupVolumeArrayOutput)
}

type JobTaskGroupArrayOutput struct{ *pulumi.OutputState }

func (JobTaskGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroup)(nil)).Elem()
}

func (o JobTaskGroupArrayOutput) ToJobTaskGroupArrayOutput() JobTaskGroupArrayOutput {
	return o
}

func (o JobTaskGroupArrayOutput) ToJobTaskGroupArrayOutputWithContext(ctx context.Context) JobTaskGroupArrayOutput {
	return o
}

func (o JobTaskGroupArrayOutput) Index(i pulumi.IntInput) JobTaskGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobTaskGroup {
		return vs[0].([]JobTaskGroup)[vs[1].(int)]
	}).(JobTaskGroupOutput)
}

type JobTaskGroupTask struct {
	Driver       *string                       `pulumi:"driver"`
	Meta         map[string]string             `pulumi:"meta"`
	Name         *string                       `pulumi:"name"`
	VolumeMounts []JobTaskGroupTaskVolumeMount `pulumi:"volumeMounts"`
}

// JobTaskGroupTaskInput is an input type that accepts JobTaskGroupTaskArgs and JobTaskGroupTaskOutput values.
// You can construct a concrete instance of `JobTaskGroupTaskInput` via:
//
//	JobTaskGroupTaskArgs{...}
type JobTaskGroupTaskInput interface {
	pulumi.Input

	ToJobTaskGroupTaskOutput() JobTaskGroupTaskOutput
	ToJobTaskGroupTaskOutputWithContext(context.Context) JobTaskGroupTaskOutput
}

type JobTaskGroupTaskArgs struct {
	Driver       pulumi.StringPtrInput                 `pulumi:"driver"`
	Meta         pulumi.StringMapInput                 `pulumi:"meta"`
	Name         pulumi.StringPtrInput                 `pulumi:"name"`
	VolumeMounts JobTaskGroupTaskVolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (JobTaskGroupTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupTask)(nil)).Elem()
}

func (i JobTaskGroupTaskArgs) ToJobTaskGroupTaskOutput() JobTaskGroupTaskOutput {
	return i.ToJobTaskGroupTaskOutputWithContext(context.Background())
}

func (i JobTaskGroupTaskArgs) ToJobTaskGroupTaskOutputWithContext(ctx context.Context) JobTaskGroupTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupTaskOutput)
}

// JobTaskGroupTaskArrayInput is an input type that accepts JobTaskGroupTaskArray and JobTaskGroupTaskArrayOutput values.
// You can construct a concrete instance of `JobTaskGroupTaskArrayInput` via:
//
//	JobTaskGroupTaskArray{ JobTaskGroupTaskArgs{...} }
type JobTaskGroupTaskArrayInput interface {
	pulumi.Input

	ToJobTaskGroupTaskArrayOutput() JobTaskGroupTaskArrayOutput
	ToJobTaskGroupTaskArrayOutputWithContext(context.Context) JobTaskGroupTaskArrayOutput
}

type JobTaskGroupTaskArray []JobTaskGroupTaskInput

func (JobTaskGroupTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupTask)(nil)).Elem()
}

func (i JobTaskGroupTaskArray) ToJobTaskGroupTaskArrayOutput() JobTaskGroupTaskArrayOutput {
	return i.ToJobTaskGroupTaskArrayOutputWithContext(context.Background())
}

func (i JobTaskGroupTaskArray) ToJobTaskGroupTaskArrayOutputWithContext(ctx context.Context) JobTaskGroupTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupTaskArrayOutput)
}

type JobTaskGroupTaskOutput struct{ *pulumi.OutputState }

func (JobTaskGroupTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupTask)(nil)).Elem()
}

func (o JobTaskGroupTaskOutput) ToJobTaskGroupTaskOutput() JobTaskGroupTaskOutput {
	return o
}

func (o JobTaskGroupTaskOutput) ToJobTaskGroupTaskOutputWithContext(ctx context.Context) JobTaskGroupTaskOutput {
	return o
}

func (o JobTaskGroupTaskOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupTask) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupTaskOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobTaskGroupTask) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

func (o JobTaskGroupTaskOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupTask) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupTaskOutput) VolumeMounts() JobTaskGroupTaskVolumeMountArrayOutput {
	return o.ApplyT(func(v JobTaskGroupTask) []JobTaskGroupTaskVolumeMount { return v.VolumeMounts }).(JobTaskGroupTaskVolumeMountArrayOutput)
}

type JobTaskGroupTaskArrayOutput struct{ *pulumi.OutputState }

func (JobTaskGroupTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupTask)(nil)).Elem()
}

func (o JobTaskGroupTaskArrayOutput) ToJobTaskGroupTaskArrayOutput() JobTaskGroupTaskArrayOutput {
	return o
}

func (o JobTaskGroupTaskArrayOutput) ToJobTaskGroupTaskArrayOutputWithContext(ctx context.Context) JobTaskGroupTaskArrayOutput {
	return o
}

func (o JobTaskGroupTaskArrayOutput) Index(i pulumi.IntInput) JobTaskGroupTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobTaskGroupTask {
		return vs[0].([]JobTaskGroupTask)[vs[1].(int)]
	}).(JobTaskGroupTaskOutput)
}

type JobTaskGroupTaskVolumeMount struct {
	Destination *string `pulumi:"destination"`
	ReadOnly    *bool   `pulumi:"readOnly"`
	Volume      *string `pulumi:"volume"`
}

// JobTaskGroupTaskVolumeMountInput is an input type that accepts JobTaskGroupTaskVolumeMountArgs and JobTaskGroupTaskVolumeMountOutput values.
// You can construct a concrete instance of `JobTaskGroupTaskVolumeMountInput` via:
//
//	JobTaskGroupTaskVolumeMountArgs{...}
type JobTaskGroupTaskVolumeMountInput interface {
	pulumi.Input

	ToJobTaskGroupTaskVolumeMountOutput() JobTaskGroupTaskVolumeMountOutput
	ToJobTaskGroupTaskVolumeMountOutputWithContext(context.Context) JobTaskGroupTaskVolumeMountOutput
}

type JobTaskGroupTaskVolumeMountArgs struct {
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	ReadOnly    pulumi.BoolPtrInput   `pulumi:"readOnly"`
	Volume      pulumi.StringPtrInput `pulumi:"volume"`
}

func (JobTaskGroupTaskVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (i JobTaskGroupTaskVolumeMountArgs) ToJobTaskGroupTaskVolumeMountOutput() JobTaskGroupTaskVolumeMountOutput {
	return i.ToJobTaskGroupTaskVolumeMountOutputWithContext(context.Background())
}

func (i JobTaskGroupTaskVolumeMountArgs) ToJobTaskGroupTaskVolumeMountOutputWithContext(ctx context.Context) JobTaskGroupTaskVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupTaskVolumeMountOutput)
}

// JobTaskGroupTaskVolumeMountArrayInput is an input type that accepts JobTaskGroupTaskVolumeMountArray and JobTaskGroupTaskVolumeMountArrayOutput values.
// You can construct a concrete instance of `JobTaskGroupTaskVolumeMountArrayInput` via:
//
//	JobTaskGroupTaskVolumeMountArray{ JobTaskGroupTaskVolumeMountArgs{...} }
type JobTaskGroupTaskVolumeMountArrayInput interface {
	pulumi.Input

	ToJobTaskGroupTaskVolumeMountArrayOutput() JobTaskGroupTaskVolumeMountArrayOutput
	ToJobTaskGroupTaskVolumeMountArrayOutputWithContext(context.Context) JobTaskGroupTaskVolumeMountArrayOutput
}

type JobTaskGroupTaskVolumeMountArray []JobTaskGroupTaskVolumeMountInput

func (JobTaskGroupTaskVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (i JobTaskGroupTaskVolumeMountArray) ToJobTaskGroupTaskVolumeMountArrayOutput() JobTaskGroupTaskVolumeMountArrayOutput {
	return i.ToJobTaskGroupTaskVolumeMountArrayOutputWithContext(context.Background())
}

func (i JobTaskGroupTaskVolumeMountArray) ToJobTaskGroupTaskVolumeMountArrayOutputWithContext(ctx context.Context) JobTaskGroupTaskVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupTaskVolumeMountArrayOutput)
}

type JobTaskGroupTaskVolumeMountOutput struct{ *pulumi.OutputState }

func (JobTaskGroupTaskVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (o JobTaskGroupTaskVolumeMountOutput) ToJobTaskGroupTaskVolumeMountOutput() JobTaskGroupTaskVolumeMountOutput {
	return o
}

func (o JobTaskGroupTaskVolumeMountOutput) ToJobTaskGroupTaskVolumeMountOutputWithContext(ctx context.Context) JobTaskGroupTaskVolumeMountOutput {
	return o
}

func (o JobTaskGroupTaskVolumeMountOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupTaskVolumeMount) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupTaskVolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobTaskGroupTaskVolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o JobTaskGroupTaskVolumeMountOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupTaskVolumeMount) *string { return v.Volume }).(pulumi.StringPtrOutput)
}

type JobTaskGroupTaskVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (JobTaskGroupTaskVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (o JobTaskGroupTaskVolumeMountArrayOutput) ToJobTaskGroupTaskVolumeMountArrayOutput() JobTaskGroupTaskVolumeMountArrayOutput {
	return o
}

func (o JobTaskGroupTaskVolumeMountArrayOutput) ToJobTaskGroupTaskVolumeMountArrayOutputWithContext(ctx context.Context) JobTaskGroupTaskVolumeMountArrayOutput {
	return o
}

func (o JobTaskGroupTaskVolumeMountArrayOutput) Index(i pulumi.IntInput) JobTaskGroupTaskVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobTaskGroupTaskVolumeMount {
		return vs[0].([]JobTaskGroupTaskVolumeMount)[vs[1].(int)]
	}).(JobTaskGroupTaskVolumeMountOutput)
}

type JobTaskGroupVolume struct {
	Name     *string `pulumi:"name"`
	ReadOnly *bool   `pulumi:"readOnly"`
	Source   *string `pulumi:"source"`
	Type     *string `pulumi:"type"`
}

// JobTaskGroupVolumeInput is an input type that accepts JobTaskGroupVolumeArgs and JobTaskGroupVolumeOutput values.
// You can construct a concrete instance of `JobTaskGroupVolumeInput` via:
//
//	JobTaskGroupVolumeArgs{...}
type JobTaskGroupVolumeInput interface {
	pulumi.Input

	ToJobTaskGroupVolumeOutput() JobTaskGroupVolumeOutput
	ToJobTaskGroupVolumeOutputWithContext(context.Context) JobTaskGroupVolumeOutput
}

type JobTaskGroupVolumeArgs struct {
	Name     pulumi.StringPtrInput `pulumi:"name"`
	ReadOnly pulumi.BoolPtrInput   `pulumi:"readOnly"`
	Source   pulumi.StringPtrInput `pulumi:"source"`
	Type     pulumi.StringPtrInput `pulumi:"type"`
}

func (JobTaskGroupVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupVolume)(nil)).Elem()
}

func (i JobTaskGroupVolumeArgs) ToJobTaskGroupVolumeOutput() JobTaskGroupVolumeOutput {
	return i.ToJobTaskGroupVolumeOutputWithContext(context.Background())
}

func (i JobTaskGroupVolumeArgs) ToJobTaskGroupVolumeOutputWithContext(ctx context.Context) JobTaskGroupVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupVolumeOutput)
}

// JobTaskGroupVolumeArrayInput is an input type that accepts JobTaskGroupVolumeArray and JobTaskGroupVolumeArrayOutput values.
// You can construct a concrete instance of `JobTaskGroupVolumeArrayInput` via:
//
//	JobTaskGroupVolumeArray{ JobTaskGroupVolumeArgs{...} }
type JobTaskGroupVolumeArrayInput interface {
	pulumi.Input

	ToJobTaskGroupVolumeArrayOutput() JobTaskGroupVolumeArrayOutput
	ToJobTaskGroupVolumeArrayOutputWithContext(context.Context) JobTaskGroupVolumeArrayOutput
}

type JobTaskGroupVolumeArray []JobTaskGroupVolumeInput

func (JobTaskGroupVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupVolume)(nil)).Elem()
}

func (i JobTaskGroupVolumeArray) ToJobTaskGroupVolumeArrayOutput() JobTaskGroupVolumeArrayOutput {
	return i.ToJobTaskGroupVolumeArrayOutputWithContext(context.Background())
}

func (i JobTaskGroupVolumeArray) ToJobTaskGroupVolumeArrayOutputWithContext(ctx context.Context) JobTaskGroupVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTaskGroupVolumeArrayOutput)
}

type JobTaskGroupVolumeOutput struct{ *pulumi.OutputState }

func (JobTaskGroupVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTaskGroupVolume)(nil)).Elem()
}

func (o JobTaskGroupVolumeOutput) ToJobTaskGroupVolumeOutput() JobTaskGroupVolumeOutput {
	return o
}

func (o JobTaskGroupVolumeOutput) ToJobTaskGroupVolumeOutputWithContext(ctx context.Context) JobTaskGroupVolumeOutput {
	return o
}

func (o JobTaskGroupVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobTaskGroupVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o JobTaskGroupVolumeOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupVolume) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o JobTaskGroupVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobTaskGroupVolume) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type JobTaskGroupVolumeArrayOutput struct{ *pulumi.OutputState }

func (JobTaskGroupVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTaskGroupVolume)(nil)).Elem()
}

func (o JobTaskGroupVolumeArrayOutput) ToJobTaskGroupVolumeArrayOutput() JobTaskGroupVolumeArrayOutput {
	return o
}

func (o JobTaskGroupVolumeArrayOutput) ToJobTaskGroupVolumeArrayOutputWithContext(ctx context.Context) JobTaskGroupVolumeArrayOutput {
	return o
}

func (o JobTaskGroupVolumeArrayOutput) Index(i pulumi.IntInput) JobTaskGroupVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobTaskGroupVolume {
		return vs[0].([]JobTaskGroupVolume)[vs[1].(int)]
	}).(JobTaskGroupVolumeOutput)
}

type NamespaceCapabilities struct {
	// `([]string: <optional>)` - Task drivers disabled for the namespace.
	DisabledTaskDrivers []string `pulumi:"disabledTaskDrivers"`
	// `([]string: <optional>)` - Task drivers enabled for the namespace.
	EnabledTaskDrivers []string `pulumi:"enabledTaskDrivers"`
}

// NamespaceCapabilitiesInput is an input type that accepts NamespaceCapabilitiesArgs and NamespaceCapabilitiesOutput values.
// You can construct a concrete instance of `NamespaceCapabilitiesInput` via:
//
//	NamespaceCapabilitiesArgs{...}
type NamespaceCapabilitiesInput interface {
	pulumi.Input

	ToNamespaceCapabilitiesOutput() NamespaceCapabilitiesOutput
	ToNamespaceCapabilitiesOutputWithContext(context.Context) NamespaceCapabilitiesOutput
}

type NamespaceCapabilitiesArgs struct {
	// `([]string: <optional>)` - Task drivers disabled for the namespace.
	DisabledTaskDrivers pulumi.StringArrayInput `pulumi:"disabledTaskDrivers"`
	// `([]string: <optional>)` - Task drivers enabled for the namespace.
	EnabledTaskDrivers pulumi.StringArrayInput `pulumi:"enabledTaskDrivers"`
}

func (NamespaceCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCapabilities)(nil)).Elem()
}

func (i NamespaceCapabilitiesArgs) ToNamespaceCapabilitiesOutput() NamespaceCapabilitiesOutput {
	return i.ToNamespaceCapabilitiesOutputWithContext(context.Background())
}

func (i NamespaceCapabilitiesArgs) ToNamespaceCapabilitiesOutputWithContext(ctx context.Context) NamespaceCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCapabilitiesOutput)
}

func (i NamespaceCapabilitiesArgs) ToNamespaceCapabilitiesPtrOutput() NamespaceCapabilitiesPtrOutput {
	return i.ToNamespaceCapabilitiesPtrOutputWithContext(context.Background())
}

func (i NamespaceCapabilitiesArgs) ToNamespaceCapabilitiesPtrOutputWithContext(ctx context.Context) NamespaceCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCapabilitiesOutput).ToNamespaceCapabilitiesPtrOutputWithContext(ctx)
}

// NamespaceCapabilitiesPtrInput is an input type that accepts NamespaceCapabilitiesArgs, NamespaceCapabilitiesPtr and NamespaceCapabilitiesPtrOutput values.
// You can construct a concrete instance of `NamespaceCapabilitiesPtrInput` via:
//
//	        NamespaceCapabilitiesArgs{...}
//
//	or:
//
//	        nil
type NamespaceCapabilitiesPtrInput interface {
	pulumi.Input

	ToNamespaceCapabilitiesPtrOutput() NamespaceCapabilitiesPtrOutput
	ToNamespaceCapabilitiesPtrOutputWithContext(context.Context) NamespaceCapabilitiesPtrOutput
}

type namespaceCapabilitiesPtrType NamespaceCapabilitiesArgs

func NamespaceCapabilitiesPtr(v *NamespaceCapabilitiesArgs) NamespaceCapabilitiesPtrInput {
	return (*namespaceCapabilitiesPtrType)(v)
}

func (*namespaceCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceCapabilities)(nil)).Elem()
}

func (i *namespaceCapabilitiesPtrType) ToNamespaceCapabilitiesPtrOutput() NamespaceCapabilitiesPtrOutput {
	return i.ToNamespaceCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *namespaceCapabilitiesPtrType) ToNamespaceCapabilitiesPtrOutputWithContext(ctx context.Context) NamespaceCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCapabilitiesPtrOutput)
}

type NamespaceCapabilitiesOutput struct{ *pulumi.OutputState }

func (NamespaceCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCapabilities)(nil)).Elem()
}

func (o NamespaceCapabilitiesOutput) ToNamespaceCapabilitiesOutput() NamespaceCapabilitiesOutput {
	return o
}

func (o NamespaceCapabilitiesOutput) ToNamespaceCapabilitiesOutputWithContext(ctx context.Context) NamespaceCapabilitiesOutput {
	return o
}

func (o NamespaceCapabilitiesOutput) ToNamespaceCapabilitiesPtrOutput() NamespaceCapabilitiesPtrOutput {
	return o.ToNamespaceCapabilitiesPtrOutputWithContext(context.Background())
}

func (o NamespaceCapabilitiesOutput) ToNamespaceCapabilitiesPtrOutputWithContext(ctx context.Context) NamespaceCapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceCapabilities) *NamespaceCapabilities {
		return &v
	}).(NamespaceCapabilitiesPtrOutput)
}

// `([]string: <optional>)` - Task drivers disabled for the namespace.
func (o NamespaceCapabilitiesOutput) DisabledTaskDrivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamespaceCapabilities) []string { return v.DisabledTaskDrivers }).(pulumi.StringArrayOutput)
}

// `([]string: <optional>)` - Task drivers enabled for the namespace.
func (o NamespaceCapabilitiesOutput) EnabledTaskDrivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamespaceCapabilities) []string { return v.EnabledTaskDrivers }).(pulumi.StringArrayOutput)
}

type NamespaceCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (NamespaceCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceCapabilities)(nil)).Elem()
}

func (o NamespaceCapabilitiesPtrOutput) ToNamespaceCapabilitiesPtrOutput() NamespaceCapabilitiesPtrOutput {
	return o
}

func (o NamespaceCapabilitiesPtrOutput) ToNamespaceCapabilitiesPtrOutputWithContext(ctx context.Context) NamespaceCapabilitiesPtrOutput {
	return o
}

func (o NamespaceCapabilitiesPtrOutput) Elem() NamespaceCapabilitiesOutput {
	return o.ApplyT(func(v *NamespaceCapabilities) NamespaceCapabilities {
		if v != nil {
			return *v
		}
		var ret NamespaceCapabilities
		return ret
	}).(NamespaceCapabilitiesOutput)
}

// `([]string: <optional>)` - Task drivers disabled for the namespace.
func (o NamespaceCapabilitiesPtrOutput) DisabledTaskDrivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamespaceCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.DisabledTaskDrivers
	}).(pulumi.StringArrayOutput)
}

// `([]string: <optional>)` - Task drivers enabled for the namespace.
func (o NamespaceCapabilitiesPtrOutput) EnabledTaskDrivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamespaceCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.EnabledTaskDrivers
	}).(pulumi.StringArrayOutput)
}

type NamespaceNodePoolConfig struct {
	// `([]string: <optional>)` - The list of node pools that are allowed to be used in this namespace.
	Alloweds []string `pulumi:"alloweds"`
	// `(string: <optional>)` - The default node pool for jobs that don't define one.
	Default *string `pulumi:"default"`
	// `([]string: <optional>)` - The list of node pools that are not allowed to be used in this namespace.
	Denieds []string `pulumi:"denieds"`
}

// NamespaceNodePoolConfigInput is an input type that accepts NamespaceNodePoolConfigArgs and NamespaceNodePoolConfigOutput values.
// You can construct a concrete instance of `NamespaceNodePoolConfigInput` via:
//
//	NamespaceNodePoolConfigArgs{...}
type NamespaceNodePoolConfigInput interface {
	pulumi.Input

	ToNamespaceNodePoolConfigOutput() NamespaceNodePoolConfigOutput
	ToNamespaceNodePoolConfigOutputWithContext(context.Context) NamespaceNodePoolConfigOutput
}

type NamespaceNodePoolConfigArgs struct {
	// `([]string: <optional>)` - The list of node pools that are allowed to be used in this namespace.
	Alloweds pulumi.StringArrayInput `pulumi:"alloweds"`
	// `(string: <optional>)` - The default node pool for jobs that don't define one.
	Default pulumi.StringPtrInput `pulumi:"default"`
	// `([]string: <optional>)` - The list of node pools that are not allowed to be used in this namespace.
	Denieds pulumi.StringArrayInput `pulumi:"denieds"`
}

func (NamespaceNodePoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceNodePoolConfig)(nil)).Elem()
}

func (i NamespaceNodePoolConfigArgs) ToNamespaceNodePoolConfigOutput() NamespaceNodePoolConfigOutput {
	return i.ToNamespaceNodePoolConfigOutputWithContext(context.Background())
}

func (i NamespaceNodePoolConfigArgs) ToNamespaceNodePoolConfigOutputWithContext(ctx context.Context) NamespaceNodePoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceNodePoolConfigOutput)
}

func (i NamespaceNodePoolConfigArgs) ToNamespaceNodePoolConfigPtrOutput() NamespaceNodePoolConfigPtrOutput {
	return i.ToNamespaceNodePoolConfigPtrOutputWithContext(context.Background())
}

func (i NamespaceNodePoolConfigArgs) ToNamespaceNodePoolConfigPtrOutputWithContext(ctx context.Context) NamespaceNodePoolConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceNodePoolConfigOutput).ToNamespaceNodePoolConfigPtrOutputWithContext(ctx)
}

// NamespaceNodePoolConfigPtrInput is an input type that accepts NamespaceNodePoolConfigArgs, NamespaceNodePoolConfigPtr and NamespaceNodePoolConfigPtrOutput values.
// You can construct a concrete instance of `NamespaceNodePoolConfigPtrInput` via:
//
//	        NamespaceNodePoolConfigArgs{...}
//
//	or:
//
//	        nil
type NamespaceNodePoolConfigPtrInput interface {
	pulumi.Input

	ToNamespaceNodePoolConfigPtrOutput() NamespaceNodePoolConfigPtrOutput
	ToNamespaceNodePoolConfigPtrOutputWithContext(context.Context) NamespaceNodePoolConfigPtrOutput
}

type namespaceNodePoolConfigPtrType NamespaceNodePoolConfigArgs

func NamespaceNodePoolConfigPtr(v *NamespaceNodePoolConfigArgs) NamespaceNodePoolConfigPtrInput {
	return (*namespaceNodePoolConfigPtrType)(v)
}

func (*namespaceNodePoolConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceNodePoolConfig)(nil)).Elem()
}

func (i *namespaceNodePoolConfigPtrType) ToNamespaceNodePoolConfigPtrOutput() NamespaceNodePoolConfigPtrOutput {
	return i.ToNamespaceNodePoolConfigPtrOutputWithContext(context.Background())
}

func (i *namespaceNodePoolConfigPtrType) ToNamespaceNodePoolConfigPtrOutputWithContext(ctx context.Context) NamespaceNodePoolConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceNodePoolConfigPtrOutput)
}

type NamespaceNodePoolConfigOutput struct{ *pulumi.OutputState }

func (NamespaceNodePoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceNodePoolConfig)(nil)).Elem()
}

func (o NamespaceNodePoolConfigOutput) ToNamespaceNodePoolConfigOutput() NamespaceNodePoolConfigOutput {
	return o
}

func (o NamespaceNodePoolConfigOutput) ToNamespaceNodePoolConfigOutputWithContext(ctx context.Context) NamespaceNodePoolConfigOutput {
	return o
}

func (o NamespaceNodePoolConfigOutput) ToNamespaceNodePoolConfigPtrOutput() NamespaceNodePoolConfigPtrOutput {
	return o.ToNamespaceNodePoolConfigPtrOutputWithContext(context.Background())
}

func (o NamespaceNodePoolConfigOutput) ToNamespaceNodePoolConfigPtrOutputWithContext(ctx context.Context) NamespaceNodePoolConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceNodePoolConfig) *NamespaceNodePoolConfig {
		return &v
	}).(NamespaceNodePoolConfigPtrOutput)
}

// `([]string: <optional>)` - The list of node pools that are allowed to be used in this namespace.
func (o NamespaceNodePoolConfigOutput) Alloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamespaceNodePoolConfig) []string { return v.Alloweds }).(pulumi.StringArrayOutput)
}

// `(string: <optional>)` - The default node pool for jobs that don't define one.
func (o NamespaceNodePoolConfigOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceNodePoolConfig) *string { return v.Default }).(pulumi.StringPtrOutput)
}

// `([]string: <optional>)` - The list of node pools that are not allowed to be used in this namespace.
func (o NamespaceNodePoolConfigOutput) Denieds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamespaceNodePoolConfig) []string { return v.Denieds }).(pulumi.StringArrayOutput)
}

type NamespaceNodePoolConfigPtrOutput struct{ *pulumi.OutputState }

func (NamespaceNodePoolConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceNodePoolConfig)(nil)).Elem()
}

func (o NamespaceNodePoolConfigPtrOutput) ToNamespaceNodePoolConfigPtrOutput() NamespaceNodePoolConfigPtrOutput {
	return o
}

func (o NamespaceNodePoolConfigPtrOutput) ToNamespaceNodePoolConfigPtrOutputWithContext(ctx context.Context) NamespaceNodePoolConfigPtrOutput {
	return o
}

func (o NamespaceNodePoolConfigPtrOutput) Elem() NamespaceNodePoolConfigOutput {
	return o.ApplyT(func(v *NamespaceNodePoolConfig) NamespaceNodePoolConfig {
		if v != nil {
			return *v
		}
		var ret NamespaceNodePoolConfig
		return ret
	}).(NamespaceNodePoolConfigOutput)
}

// `([]string: <optional>)` - The list of node pools that are allowed to be used in this namespace.
func (o NamespaceNodePoolConfigPtrOutput) Alloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamespaceNodePoolConfig) []string {
		if v == nil {
			return nil
		}
		return v.Alloweds
	}).(pulumi.StringArrayOutput)
}

// `(string: <optional>)` - The default node pool for jobs that don't define one.
func (o NamespaceNodePoolConfigPtrOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceNodePoolConfig) *string {
		if v == nil {
			return nil
		}
		return v.Default
	}).(pulumi.StringPtrOutput)
}

// `([]string: <optional>)` - The list of node pools that are not allowed to be used in this namespace.
func (o NamespaceNodePoolConfigPtrOutput) Denieds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamespaceNodePoolConfig) []string {
		if v == nil {
			return nil
		}
		return v.Denieds
	}).(pulumi.StringArrayOutput)
}

type NodePoolSchedulerConfig struct {
	// `(string)` - Whether or not memory
	// oversubscription is enabled in the node pool. Possible values are
	// `"enabled"` or `"disabled"`. If not defined the global cluster
	// configuration is used.
	//
	// > This option differs from Nomad, where it's represented as a boolean, to
	// allow distinguishing between memory oversubscription being disabled in the
	// node pool and this property not being set.
	MemoryOversubscription *string `pulumi:"memoryOversubscription"`
	// `(string)` - The scheduler algorithm used in the node
	// pool. Possible values are `binpack` or `spread`. If not defined the global
	// cluster configuration is used.
	SchedulerAlgorithm *string `pulumi:"schedulerAlgorithm"`
}

// NodePoolSchedulerConfigInput is an input type that accepts NodePoolSchedulerConfigArgs and NodePoolSchedulerConfigOutput values.
// You can construct a concrete instance of `NodePoolSchedulerConfigInput` via:
//
//	NodePoolSchedulerConfigArgs{...}
type NodePoolSchedulerConfigInput interface {
	pulumi.Input

	ToNodePoolSchedulerConfigOutput() NodePoolSchedulerConfigOutput
	ToNodePoolSchedulerConfigOutputWithContext(context.Context) NodePoolSchedulerConfigOutput
}

type NodePoolSchedulerConfigArgs struct {
	// `(string)` - Whether or not memory
	// oversubscription is enabled in the node pool. Possible values are
	// `"enabled"` or `"disabled"`. If not defined the global cluster
	// configuration is used.
	//
	// > This option differs from Nomad, where it's represented as a boolean, to
	// allow distinguishing between memory oversubscription being disabled in the
	// node pool and this property not being set.
	MemoryOversubscription pulumi.StringPtrInput `pulumi:"memoryOversubscription"`
	// `(string)` - The scheduler algorithm used in the node
	// pool. Possible values are `binpack` or `spread`. If not defined the global
	// cluster configuration is used.
	SchedulerAlgorithm pulumi.StringPtrInput `pulumi:"schedulerAlgorithm"`
}

func (NodePoolSchedulerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolSchedulerConfig)(nil)).Elem()
}

func (i NodePoolSchedulerConfigArgs) ToNodePoolSchedulerConfigOutput() NodePoolSchedulerConfigOutput {
	return i.ToNodePoolSchedulerConfigOutputWithContext(context.Background())
}

func (i NodePoolSchedulerConfigArgs) ToNodePoolSchedulerConfigOutputWithContext(ctx context.Context) NodePoolSchedulerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolSchedulerConfigOutput)
}

func (i NodePoolSchedulerConfigArgs) ToNodePoolSchedulerConfigPtrOutput() NodePoolSchedulerConfigPtrOutput {
	return i.ToNodePoolSchedulerConfigPtrOutputWithContext(context.Background())
}

func (i NodePoolSchedulerConfigArgs) ToNodePoolSchedulerConfigPtrOutputWithContext(ctx context.Context) NodePoolSchedulerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolSchedulerConfigOutput).ToNodePoolSchedulerConfigPtrOutputWithContext(ctx)
}

// NodePoolSchedulerConfigPtrInput is an input type that accepts NodePoolSchedulerConfigArgs, NodePoolSchedulerConfigPtr and NodePoolSchedulerConfigPtrOutput values.
// You can construct a concrete instance of `NodePoolSchedulerConfigPtrInput` via:
//
//	        NodePoolSchedulerConfigArgs{...}
//
//	or:
//
//	        nil
type NodePoolSchedulerConfigPtrInput interface {
	pulumi.Input

	ToNodePoolSchedulerConfigPtrOutput() NodePoolSchedulerConfigPtrOutput
	ToNodePoolSchedulerConfigPtrOutputWithContext(context.Context) NodePoolSchedulerConfigPtrOutput
}

type nodePoolSchedulerConfigPtrType NodePoolSchedulerConfigArgs

func NodePoolSchedulerConfigPtr(v *NodePoolSchedulerConfigArgs) NodePoolSchedulerConfigPtrInput {
	return (*nodePoolSchedulerConfigPtrType)(v)
}

func (*nodePoolSchedulerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolSchedulerConfig)(nil)).Elem()
}

func (i *nodePoolSchedulerConfigPtrType) ToNodePoolSchedulerConfigPtrOutput() NodePoolSchedulerConfigPtrOutput {
	return i.ToNodePoolSchedulerConfigPtrOutputWithContext(context.Background())
}

func (i *nodePoolSchedulerConfigPtrType) ToNodePoolSchedulerConfigPtrOutputWithContext(ctx context.Context) NodePoolSchedulerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolSchedulerConfigPtrOutput)
}

type NodePoolSchedulerConfigOutput struct{ *pulumi.OutputState }

func (NodePoolSchedulerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolSchedulerConfig)(nil)).Elem()
}

func (o NodePoolSchedulerConfigOutput) ToNodePoolSchedulerConfigOutput() NodePoolSchedulerConfigOutput {
	return o
}

func (o NodePoolSchedulerConfigOutput) ToNodePoolSchedulerConfigOutputWithContext(ctx context.Context) NodePoolSchedulerConfigOutput {
	return o
}

func (o NodePoolSchedulerConfigOutput) ToNodePoolSchedulerConfigPtrOutput() NodePoolSchedulerConfigPtrOutput {
	return o.ToNodePoolSchedulerConfigPtrOutputWithContext(context.Background())
}

func (o NodePoolSchedulerConfigOutput) ToNodePoolSchedulerConfigPtrOutputWithContext(ctx context.Context) NodePoolSchedulerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolSchedulerConfig) *NodePoolSchedulerConfig {
		return &v
	}).(NodePoolSchedulerConfigPtrOutput)
}

// `(string)` - Whether or not memory
// oversubscription is enabled in the node pool. Possible values are
// `"enabled"` or `"disabled"`. If not defined the global cluster
// configuration is used.
//
// > This option differs from Nomad, where it's represented as a boolean, to
// allow distinguishing between memory oversubscription being disabled in the
// node pool and this property not being set.
func (o NodePoolSchedulerConfigOutput) MemoryOversubscription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolSchedulerConfig) *string { return v.MemoryOversubscription }).(pulumi.StringPtrOutput)
}

// `(string)` - The scheduler algorithm used in the node
// pool. Possible values are `binpack` or `spread`. If not defined the global
// cluster configuration is used.
func (o NodePoolSchedulerConfigOutput) SchedulerAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolSchedulerConfig) *string { return v.SchedulerAlgorithm }).(pulumi.StringPtrOutput)
}

type NodePoolSchedulerConfigPtrOutput struct{ *pulumi.OutputState }

func (NodePoolSchedulerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolSchedulerConfig)(nil)).Elem()
}

func (o NodePoolSchedulerConfigPtrOutput) ToNodePoolSchedulerConfigPtrOutput() NodePoolSchedulerConfigPtrOutput {
	return o
}

func (o NodePoolSchedulerConfigPtrOutput) ToNodePoolSchedulerConfigPtrOutputWithContext(ctx context.Context) NodePoolSchedulerConfigPtrOutput {
	return o
}

func (o NodePoolSchedulerConfigPtrOutput) Elem() NodePoolSchedulerConfigOutput {
	return o.ApplyT(func(v *NodePoolSchedulerConfig) NodePoolSchedulerConfig {
		if v != nil {
			return *v
		}
		var ret NodePoolSchedulerConfig
		return ret
	}).(NodePoolSchedulerConfigOutput)
}

// `(string)` - Whether or not memory
// oversubscription is enabled in the node pool. Possible values are
// `"enabled"` or `"disabled"`. If not defined the global cluster
// configuration is used.
//
// > This option differs from Nomad, where it's represented as a boolean, to
// allow distinguishing between memory oversubscription being disabled in the
// node pool and this property not being set.
func (o NodePoolSchedulerConfigPtrOutput) MemoryOversubscription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolSchedulerConfig) *string {
		if v == nil {
			return nil
		}
		return v.MemoryOversubscription
	}).(pulumi.StringPtrOutput)
}

// `(string)` - The scheduler algorithm used in the node
// pool. Possible values are `binpack` or `spread`. If not defined the global
// cluster configuration is used.
func (o NodePoolSchedulerConfigPtrOutput) SchedulerAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolSchedulerConfig) *string {
		if v == nil {
			return nil
		}
		return v.SchedulerAlgorithm
	}).(pulumi.StringPtrOutput)
}

type ProviderHeader struct {
	// The header name
	Name string `pulumi:"name"`
	// The header value
	Value string `pulumi:"value"`
}

// ProviderHeaderInput is an input type that accepts ProviderHeaderArgs and ProviderHeaderOutput values.
// You can construct a concrete instance of `ProviderHeaderInput` via:
//
//	ProviderHeaderArgs{...}
type ProviderHeaderInput interface {
	pulumi.Input

	ToProviderHeaderOutput() ProviderHeaderOutput
	ToProviderHeaderOutputWithContext(context.Context) ProviderHeaderOutput
}

type ProviderHeaderArgs struct {
	// The header name
	Name pulumi.StringInput `pulumi:"name"`
	// The header value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProviderHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderHeader)(nil)).Elem()
}

func (i ProviderHeaderArgs) ToProviderHeaderOutput() ProviderHeaderOutput {
	return i.ToProviderHeaderOutputWithContext(context.Background())
}

func (i ProviderHeaderArgs) ToProviderHeaderOutputWithContext(ctx context.Context) ProviderHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderHeaderOutput)
}

// ProviderHeaderArrayInput is an input type that accepts ProviderHeaderArray and ProviderHeaderArrayOutput values.
// You can construct a concrete instance of `ProviderHeaderArrayInput` via:
//
//	ProviderHeaderArray{ ProviderHeaderArgs{...} }
type ProviderHeaderArrayInput interface {
	pulumi.Input

	ToProviderHeaderArrayOutput() ProviderHeaderArrayOutput
	ToProviderHeaderArrayOutputWithContext(context.Context) ProviderHeaderArrayOutput
}

type ProviderHeaderArray []ProviderHeaderInput

func (ProviderHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderHeader)(nil)).Elem()
}

func (i ProviderHeaderArray) ToProviderHeaderArrayOutput() ProviderHeaderArrayOutput {
	return i.ToProviderHeaderArrayOutputWithContext(context.Background())
}

func (i ProviderHeaderArray) ToProviderHeaderArrayOutputWithContext(ctx context.Context) ProviderHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderHeaderArrayOutput)
}

type ProviderHeaderOutput struct{ *pulumi.OutputState }

func (ProviderHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderHeader)(nil)).Elem()
}

func (o ProviderHeaderOutput) ToProviderHeaderOutput() ProviderHeaderOutput {
	return o
}

func (o ProviderHeaderOutput) ToProviderHeaderOutputWithContext(ctx context.Context) ProviderHeaderOutput {
	return o
}

// The header name
func (o ProviderHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderHeader) string { return v.Name }).(pulumi.StringOutput)
}

// The header value
func (o ProviderHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderHeader) string { return v.Value }).(pulumi.StringOutput)
}

type ProviderHeaderArrayOutput struct{ *pulumi.OutputState }

func (ProviderHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderHeader)(nil)).Elem()
}

func (o ProviderHeaderArrayOutput) ToProviderHeaderArrayOutput() ProviderHeaderArrayOutput {
	return o
}

func (o ProviderHeaderArrayOutput) ToProviderHeaderArrayOutputWithContext(ctx context.Context) ProviderHeaderArrayOutput {
	return o
}

func (o ProviderHeaderArrayOutput) Index(i pulumi.IntInput) ProviderHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderHeader {
		return vs[0].([]ProviderHeader)[vs[1].(int)]
	}).(ProviderHeaderOutput)
}

type QuoteSpecificationLimit struct {
	// `(string: <required>)` - The region these limits should apply to.
	Region string `pulumi:"region"`
	// `(block: <required>)` - The limits to enforce. This block
	// may only be specified once in the `limits` block. Its structure is
	// documented below.
	RegionLimit QuoteSpecificationLimitRegionLimit `pulumi:"regionLimit"`
}

// QuoteSpecificationLimitInput is an input type that accepts QuoteSpecificationLimitArgs and QuoteSpecificationLimitOutput values.
// You can construct a concrete instance of `QuoteSpecificationLimitInput` via:
//
//	QuoteSpecificationLimitArgs{...}
type QuoteSpecificationLimitInput interface {
	pulumi.Input

	ToQuoteSpecificationLimitOutput() QuoteSpecificationLimitOutput
	ToQuoteSpecificationLimitOutputWithContext(context.Context) QuoteSpecificationLimitOutput
}

type QuoteSpecificationLimitArgs struct {
	// `(string: <required>)` - The region these limits should apply to.
	Region pulumi.StringInput `pulumi:"region"`
	// `(block: <required>)` - The limits to enforce. This block
	// may only be specified once in the `limits` block. Its structure is
	// documented below.
	RegionLimit QuoteSpecificationLimitRegionLimitInput `pulumi:"regionLimit"`
}

func (QuoteSpecificationLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuoteSpecificationLimit)(nil)).Elem()
}

func (i QuoteSpecificationLimitArgs) ToQuoteSpecificationLimitOutput() QuoteSpecificationLimitOutput {
	return i.ToQuoteSpecificationLimitOutputWithContext(context.Background())
}

func (i QuoteSpecificationLimitArgs) ToQuoteSpecificationLimitOutputWithContext(ctx context.Context) QuoteSpecificationLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuoteSpecificationLimitOutput)
}

// QuoteSpecificationLimitArrayInput is an input type that accepts QuoteSpecificationLimitArray and QuoteSpecificationLimitArrayOutput values.
// You can construct a concrete instance of `QuoteSpecificationLimitArrayInput` via:
//
//	QuoteSpecificationLimitArray{ QuoteSpecificationLimitArgs{...} }
type QuoteSpecificationLimitArrayInput interface {
	pulumi.Input

	ToQuoteSpecificationLimitArrayOutput() QuoteSpecificationLimitArrayOutput
	ToQuoteSpecificationLimitArrayOutputWithContext(context.Context) QuoteSpecificationLimitArrayOutput
}

type QuoteSpecificationLimitArray []QuoteSpecificationLimitInput

func (QuoteSpecificationLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuoteSpecificationLimit)(nil)).Elem()
}

func (i QuoteSpecificationLimitArray) ToQuoteSpecificationLimitArrayOutput() QuoteSpecificationLimitArrayOutput {
	return i.ToQuoteSpecificationLimitArrayOutputWithContext(context.Background())
}

func (i QuoteSpecificationLimitArray) ToQuoteSpecificationLimitArrayOutputWithContext(ctx context.Context) QuoteSpecificationLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuoteSpecificationLimitArrayOutput)
}

type QuoteSpecificationLimitOutput struct{ *pulumi.OutputState }

func (QuoteSpecificationLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuoteSpecificationLimit)(nil)).Elem()
}

func (o QuoteSpecificationLimitOutput) ToQuoteSpecificationLimitOutput() QuoteSpecificationLimitOutput {
	return o
}

func (o QuoteSpecificationLimitOutput) ToQuoteSpecificationLimitOutputWithContext(ctx context.Context) QuoteSpecificationLimitOutput {
	return o
}

// `(string: <required>)` - The region these limits should apply to.
func (o QuoteSpecificationLimitOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v QuoteSpecificationLimit) string { return v.Region }).(pulumi.StringOutput)
}

// `(block: <required>)` - The limits to enforce. This block
// may only be specified once in the `limits` block. Its structure is
// documented below.
func (o QuoteSpecificationLimitOutput) RegionLimit() QuoteSpecificationLimitRegionLimitOutput {
	return o.ApplyT(func(v QuoteSpecificationLimit) QuoteSpecificationLimitRegionLimit { return v.RegionLimit }).(QuoteSpecificationLimitRegionLimitOutput)
}

type QuoteSpecificationLimitArrayOutput struct{ *pulumi.OutputState }

func (QuoteSpecificationLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuoteSpecificationLimit)(nil)).Elem()
}

func (o QuoteSpecificationLimitArrayOutput) ToQuoteSpecificationLimitArrayOutput() QuoteSpecificationLimitArrayOutput {
	return o
}

func (o QuoteSpecificationLimitArrayOutput) ToQuoteSpecificationLimitArrayOutputWithContext(ctx context.Context) QuoteSpecificationLimitArrayOutput {
	return o
}

func (o QuoteSpecificationLimitArrayOutput) Index(i pulumi.IntInput) QuoteSpecificationLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuoteSpecificationLimit {
		return vs[0].([]QuoteSpecificationLimit)[vs[1].(int)]
	}).(QuoteSpecificationLimitOutput)
}

type QuoteSpecificationLimitRegionLimit struct {
	// `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
	// is treated as unlimited, and a negative value is treated as fully disallowed.
	Cpu *int `pulumi:"cpu"`
	// `(int: 0)` - The amount of memory (in megabytes) to limit
	// allocations to. A value of zero is treated as unlimited, and a negative value
	// is treated as fully disallowed.
	MemoryMb *int `pulumi:"memoryMb"`
}

// QuoteSpecificationLimitRegionLimitInput is an input type that accepts QuoteSpecificationLimitRegionLimitArgs and QuoteSpecificationLimitRegionLimitOutput values.
// You can construct a concrete instance of `QuoteSpecificationLimitRegionLimitInput` via:
//
//	QuoteSpecificationLimitRegionLimitArgs{...}
type QuoteSpecificationLimitRegionLimitInput interface {
	pulumi.Input

	ToQuoteSpecificationLimitRegionLimitOutput() QuoteSpecificationLimitRegionLimitOutput
	ToQuoteSpecificationLimitRegionLimitOutputWithContext(context.Context) QuoteSpecificationLimitRegionLimitOutput
}

type QuoteSpecificationLimitRegionLimitArgs struct {
	// `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
	// is treated as unlimited, and a negative value is treated as fully disallowed.
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
	// `(int: 0)` - The amount of memory (in megabytes) to limit
	// allocations to. A value of zero is treated as unlimited, and a negative value
	// is treated as fully disallowed.
	MemoryMb pulumi.IntPtrInput `pulumi:"memoryMb"`
}

func (QuoteSpecificationLimitRegionLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuoteSpecificationLimitRegionLimit)(nil)).Elem()
}

func (i QuoteSpecificationLimitRegionLimitArgs) ToQuoteSpecificationLimitRegionLimitOutput() QuoteSpecificationLimitRegionLimitOutput {
	return i.ToQuoteSpecificationLimitRegionLimitOutputWithContext(context.Background())
}

func (i QuoteSpecificationLimitRegionLimitArgs) ToQuoteSpecificationLimitRegionLimitOutputWithContext(ctx context.Context) QuoteSpecificationLimitRegionLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuoteSpecificationLimitRegionLimitOutput)
}

type QuoteSpecificationLimitRegionLimitOutput struct{ *pulumi.OutputState }

func (QuoteSpecificationLimitRegionLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuoteSpecificationLimitRegionLimit)(nil)).Elem()
}

func (o QuoteSpecificationLimitRegionLimitOutput) ToQuoteSpecificationLimitRegionLimitOutput() QuoteSpecificationLimitRegionLimitOutput {
	return o
}

func (o QuoteSpecificationLimitRegionLimitOutput) ToQuoteSpecificationLimitRegionLimitOutputWithContext(ctx context.Context) QuoteSpecificationLimitRegionLimitOutput {
	return o
}

// `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
// is treated as unlimited, and a negative value is treated as fully disallowed.
func (o QuoteSpecificationLimitRegionLimitOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QuoteSpecificationLimitRegionLimit) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

// `(int: 0)` - The amount of memory (in megabytes) to limit
// allocations to. A value of zero is treated as unlimited, and a negative value
// is treated as fully disallowed.
func (o QuoteSpecificationLimitRegionLimitOutput) MemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QuoteSpecificationLimitRegionLimit) *int { return v.MemoryMb }).(pulumi.IntPtrOutput)
}

type VolumeCapability struct {
	// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	AccessMode string `pulumi:"accessMode"`
	// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
	// - `block-device`
	// - `file-system`
	AttachmentMode string `pulumi:"attachmentMode"`
}

// VolumeCapabilityInput is an input type that accepts VolumeCapabilityArgs and VolumeCapabilityOutput values.
// You can construct a concrete instance of `VolumeCapabilityInput` via:
//
//	VolumeCapabilityArgs{...}
type VolumeCapabilityInput interface {
	pulumi.Input

	ToVolumeCapabilityOutput() VolumeCapabilityOutput
	ToVolumeCapabilityOutputWithContext(context.Context) VolumeCapabilityOutput
}

type VolumeCapabilityArgs struct {
	// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	AccessMode pulumi.StringInput `pulumi:"accessMode"`
	// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
	// - `block-device`
	// - `file-system`
	AttachmentMode pulumi.StringInput `pulumi:"attachmentMode"`
}

func (VolumeCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeCapability)(nil)).Elem()
}

func (i VolumeCapabilityArgs) ToVolumeCapabilityOutput() VolumeCapabilityOutput {
	return i.ToVolumeCapabilityOutputWithContext(context.Background())
}

func (i VolumeCapabilityArgs) ToVolumeCapabilityOutputWithContext(ctx context.Context) VolumeCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeCapabilityOutput)
}

// VolumeCapabilityArrayInput is an input type that accepts VolumeCapabilityArray and VolumeCapabilityArrayOutput values.
// You can construct a concrete instance of `VolumeCapabilityArrayInput` via:
//
//	VolumeCapabilityArray{ VolumeCapabilityArgs{...} }
type VolumeCapabilityArrayInput interface {
	pulumi.Input

	ToVolumeCapabilityArrayOutput() VolumeCapabilityArrayOutput
	ToVolumeCapabilityArrayOutputWithContext(context.Context) VolumeCapabilityArrayOutput
}

type VolumeCapabilityArray []VolumeCapabilityInput

func (VolumeCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeCapability)(nil)).Elem()
}

func (i VolumeCapabilityArray) ToVolumeCapabilityArrayOutput() VolumeCapabilityArrayOutput {
	return i.ToVolumeCapabilityArrayOutputWithContext(context.Background())
}

func (i VolumeCapabilityArray) ToVolumeCapabilityArrayOutputWithContext(ctx context.Context) VolumeCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeCapabilityArrayOutput)
}

type VolumeCapabilityOutput struct{ *pulumi.OutputState }

func (VolumeCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeCapability)(nil)).Elem()
}

func (o VolumeCapabilityOutput) ToVolumeCapabilityOutput() VolumeCapabilityOutput {
	return o
}

func (o VolumeCapabilityOutput) ToVolumeCapabilityOutputWithContext(ctx context.Context) VolumeCapabilityOutput {
	return o
}

// `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
// - `single-node-reader-only`
// - `single-node-writer`
// - `multi-node-reader-only`
// - `multi-node-single-writer`
// - `multi-node-multi-writer`
func (o VolumeCapabilityOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeCapability) string { return v.AccessMode }).(pulumi.StringOutput)
}

// `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
// - `block-device`
// - `file-system`
func (o VolumeCapabilityOutput) AttachmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeCapability) string { return v.AttachmentMode }).(pulumi.StringOutput)
}

type VolumeCapabilityArrayOutput struct{ *pulumi.OutputState }

func (VolumeCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeCapability)(nil)).Elem()
}

func (o VolumeCapabilityArrayOutput) ToVolumeCapabilityArrayOutput() VolumeCapabilityArrayOutput {
	return o
}

func (o VolumeCapabilityArrayOutput) ToVolumeCapabilityArrayOutputWithContext(ctx context.Context) VolumeCapabilityArrayOutput {
	return o
}

func (o VolumeCapabilityArrayOutput) Index(i pulumi.IntInput) VolumeCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeCapability {
		return vs[0].([]VolumeCapability)[vs[1].(int)]
	}).(VolumeCapabilityOutput)
}

type VolumeMountOptions struct {
	// `(string: <optional>)` - The file system type.
	FsType *string `pulumi:"fsType"`
	// `([]string: <optional>)` - The flags passed to `mount`.
	MountFlags []string `pulumi:"mountFlags"`
}

// VolumeMountOptionsInput is an input type that accepts VolumeMountOptionsArgs and VolumeMountOptionsOutput values.
// You can construct a concrete instance of `VolumeMountOptionsInput` via:
//
//	VolumeMountOptionsArgs{...}
type VolumeMountOptionsInput interface {
	pulumi.Input

	ToVolumeMountOptionsOutput() VolumeMountOptionsOutput
	ToVolumeMountOptionsOutputWithContext(context.Context) VolumeMountOptionsOutput
}

type VolumeMountOptionsArgs struct {
	// `(string: <optional>)` - The file system type.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// `([]string: <optional>)` - The flags passed to `mount`.
	MountFlags pulumi.StringArrayInput `pulumi:"mountFlags"`
}

func (VolumeMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountOptions)(nil)).Elem()
}

func (i VolumeMountOptionsArgs) ToVolumeMountOptionsOutput() VolumeMountOptionsOutput {
	return i.ToVolumeMountOptionsOutputWithContext(context.Background())
}

func (i VolumeMountOptionsArgs) ToVolumeMountOptionsOutputWithContext(ctx context.Context) VolumeMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOptionsOutput)
}

func (i VolumeMountOptionsArgs) ToVolumeMountOptionsPtrOutput() VolumeMountOptionsPtrOutput {
	return i.ToVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (i VolumeMountOptionsArgs) ToVolumeMountOptionsPtrOutputWithContext(ctx context.Context) VolumeMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOptionsOutput).ToVolumeMountOptionsPtrOutputWithContext(ctx)
}

// VolumeMountOptionsPtrInput is an input type that accepts VolumeMountOptionsArgs, VolumeMountOptionsPtr and VolumeMountOptionsPtrOutput values.
// You can construct a concrete instance of `VolumeMountOptionsPtrInput` via:
//
//	        VolumeMountOptionsArgs{...}
//
//	or:
//
//	        nil
type VolumeMountOptionsPtrInput interface {
	pulumi.Input

	ToVolumeMountOptionsPtrOutput() VolumeMountOptionsPtrOutput
	ToVolumeMountOptionsPtrOutputWithContext(context.Context) VolumeMountOptionsPtrOutput
}

type volumeMountOptionsPtrType VolumeMountOptionsArgs

func VolumeMountOptionsPtr(v *VolumeMountOptionsArgs) VolumeMountOptionsPtrInput {
	return (*volumeMountOptionsPtrType)(v)
}

func (*volumeMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeMountOptions)(nil)).Elem()
}

func (i *volumeMountOptionsPtrType) ToVolumeMountOptionsPtrOutput() VolumeMountOptionsPtrOutput {
	return i.ToVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (i *volumeMountOptionsPtrType) ToVolumeMountOptionsPtrOutputWithContext(ctx context.Context) VolumeMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOptionsPtrOutput)
}

type VolumeMountOptionsOutput struct{ *pulumi.OutputState }

func (VolumeMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountOptions)(nil)).Elem()
}

func (o VolumeMountOptionsOutput) ToVolumeMountOptionsOutput() VolumeMountOptionsOutput {
	return o
}

func (o VolumeMountOptionsOutput) ToVolumeMountOptionsOutputWithContext(ctx context.Context) VolumeMountOptionsOutput {
	return o
}

func (o VolumeMountOptionsOutput) ToVolumeMountOptionsPtrOutput() VolumeMountOptionsPtrOutput {
	return o.ToVolumeMountOptionsPtrOutputWithContext(context.Background())
}

func (o VolumeMountOptionsOutput) ToVolumeMountOptionsPtrOutputWithContext(ctx context.Context) VolumeMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeMountOptions) *VolumeMountOptions {
		return &v
	}).(VolumeMountOptionsPtrOutput)
}

// `(string: <optional>)` - The file system type.
func (o VolumeMountOptionsOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountOptions) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// `([]string: <optional>)` - The flags passed to `mount`.
func (o VolumeMountOptionsOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeMountOptions) []string { return v.MountFlags }).(pulumi.StringArrayOutput)
}

type VolumeMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (VolumeMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeMountOptions)(nil)).Elem()
}

func (o VolumeMountOptionsPtrOutput) ToVolumeMountOptionsPtrOutput() VolumeMountOptionsPtrOutput {
	return o
}

func (o VolumeMountOptionsPtrOutput) ToVolumeMountOptionsPtrOutputWithContext(ctx context.Context) VolumeMountOptionsPtrOutput {
	return o
}

func (o VolumeMountOptionsPtrOutput) Elem() VolumeMountOptionsOutput {
	return o.ApplyT(func(v *VolumeMountOptions) VolumeMountOptions {
		if v != nil {
			return *v
		}
		var ret VolumeMountOptions
		return ret
	}).(VolumeMountOptionsOutput)
}

// `(string: <optional>)` - The file system type.
func (o VolumeMountOptionsPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeMountOptions) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// `([]string: <optional>)` - The flags passed to `mount`.
func (o VolumeMountOptionsPtrOutput) MountFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeMountOptions) []string {
		if v == nil {
			return nil
		}
		return v.MountFlags
	}).(pulumi.StringArrayOutput)
}

type VolumeTopology struct {
	// `(map[string]string)` - Define the attributes for the topology request.
	//
	// In addition to the above arguments, the following attributes are exported and
	// can be referenced:
	Segments map[string]string `pulumi:"segments"`
}

// VolumeTopologyInput is an input type that accepts VolumeTopologyArgs and VolumeTopologyOutput values.
// You can construct a concrete instance of `VolumeTopologyInput` via:
//
//	VolumeTopologyArgs{...}
type VolumeTopologyInput interface {
	pulumi.Input

	ToVolumeTopologyOutput() VolumeTopologyOutput
	ToVolumeTopologyOutputWithContext(context.Context) VolumeTopologyOutput
}

type VolumeTopologyArgs struct {
	// `(map[string]string)` - Define the attributes for the topology request.
	//
	// In addition to the above arguments, the following attributes are exported and
	// can be referenced:
	Segments pulumi.StringMapInput `pulumi:"segments"`
}

func (VolumeTopologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTopology)(nil)).Elem()
}

func (i VolumeTopologyArgs) ToVolumeTopologyOutput() VolumeTopologyOutput {
	return i.ToVolumeTopologyOutputWithContext(context.Background())
}

func (i VolumeTopologyArgs) ToVolumeTopologyOutputWithContext(ctx context.Context) VolumeTopologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTopologyOutput)
}

// VolumeTopologyArrayInput is an input type that accepts VolumeTopologyArray and VolumeTopologyArrayOutput values.
// You can construct a concrete instance of `VolumeTopologyArrayInput` via:
//
//	VolumeTopologyArray{ VolumeTopologyArgs{...} }
type VolumeTopologyArrayInput interface {
	pulumi.Input

	ToVolumeTopologyArrayOutput() VolumeTopologyArrayOutput
	ToVolumeTopologyArrayOutputWithContext(context.Context) VolumeTopologyArrayOutput
}

type VolumeTopologyArray []VolumeTopologyInput

func (VolumeTopologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeTopology)(nil)).Elem()
}

func (i VolumeTopologyArray) ToVolumeTopologyArrayOutput() VolumeTopologyArrayOutput {
	return i.ToVolumeTopologyArrayOutputWithContext(context.Background())
}

func (i VolumeTopologyArray) ToVolumeTopologyArrayOutputWithContext(ctx context.Context) VolumeTopologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTopologyArrayOutput)
}

type VolumeTopologyOutput struct{ *pulumi.OutputState }

func (VolumeTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTopology)(nil)).Elem()
}

func (o VolumeTopologyOutput) ToVolumeTopologyOutput() VolumeTopologyOutput {
	return o
}

func (o VolumeTopologyOutput) ToVolumeTopologyOutputWithContext(ctx context.Context) VolumeTopologyOutput {
	return o
}

// `(map[string]string)` - Define the attributes for the topology request.
//
// In addition to the above arguments, the following attributes are exported and
// can be referenced:
func (o VolumeTopologyOutput) Segments() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeTopology) map[string]string { return v.Segments }).(pulumi.StringMapOutput)
}

type VolumeTopologyArrayOutput struct{ *pulumi.OutputState }

func (VolumeTopologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeTopology)(nil)).Elem()
}

func (o VolumeTopologyArrayOutput) ToVolumeTopologyArrayOutput() VolumeTopologyArrayOutput {
	return o
}

func (o VolumeTopologyArrayOutput) ToVolumeTopologyArrayOutputWithContext(ctx context.Context) VolumeTopologyArrayOutput {
	return o
}

func (o VolumeTopologyArrayOutput) Index(i pulumi.IntInput) VolumeTopologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeTopology {
		return vs[0].([]VolumeTopology)[vs[1].(int)]
	}).(VolumeTopologyOutput)
}

type VolumeTopologyRequest struct {
	// `(``Topology``: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
	Required *VolumeTopologyRequestRequired `pulumi:"required"`
}

// VolumeTopologyRequestInput is an input type that accepts VolumeTopologyRequestArgs and VolumeTopologyRequestOutput values.
// You can construct a concrete instance of `VolumeTopologyRequestInput` via:
//
//	VolumeTopologyRequestArgs{...}
type VolumeTopologyRequestInput interface {
	pulumi.Input

	ToVolumeTopologyRequestOutput() VolumeTopologyRequestOutput
	ToVolumeTopologyRequestOutputWithContext(context.Context) VolumeTopologyRequestOutput
}

type VolumeTopologyRequestArgs struct {
	// `(``Topology``: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
	Required VolumeTopologyRequestRequiredPtrInput `pulumi:"required"`
}

func (VolumeTopologyRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTopologyRequest)(nil)).Elem()
}

func (i VolumeTopologyRequestArgs) ToVolumeTopologyRequestOutput() VolumeTopologyRequestOutput {
	return i.ToVolumeTopologyRequestOutputWithContext(context.Background())
}

func (i VolumeTopologyRequestArgs) ToVolumeTopologyRequestOutputWithContext(ctx context.Context) VolumeTopologyRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTopologyRequestOutput)
}

func (i VolumeTopologyRequestArgs) ToVolumeTopologyRequestPtrOutput() VolumeTopologyRequestPtrOutput {
	return i.ToVolumeTopologyRequestPtrOutputWithContext(context.Background())
}

func (i VolumeTopologyRequestArgs) ToVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) VolumeTopologyRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTopologyRequestOutput).ToVolumeTopologyRequestPtrOutputWithContext(ctx)
}

// VolumeTopologyRequestPtrInput is an input type that accepts VolumeTopologyRequestArgs, VolumeTopologyRequestPtr and VolumeTopologyRequestPtrOutput values.
// You can construct a concrete instance of `VolumeTopologyRequestPtrInput` via:
//
//	        VolumeTopologyRequestArgs{...}
//
//	or:
//
//	        nil
type VolumeTopologyRequestPtrInput interface {
	pulumi.Input

	ToVolumeTopologyRequestPtrOutput() VolumeTopologyRequestPtrOutput
	ToVolumeTopologyRequestPtrOutputWithContext(context.Context) VolumeTopologyRequestPtrOutput
}

type volumeTopologyRequestPtrType VolumeTopologyRequestArgs

func VolumeTopologyRequestPtr(v *VolumeTopologyRequestArgs) VolumeTopologyRequestPtrInput {
	return (*volumeTopologyRequestPtrType)(v)
}

func (*volumeTopologyRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeTopologyRequest)(nil)).Elem()
}

func (i *volumeTopologyRequestPtrType) ToVolumeTopologyRequestPtrOutput() VolumeTopologyRequestPtrOutput {
	return i.ToVolumeTopologyRequestPtrOutputWithContext(context.Background())
}

func (i *volumeTopologyRequestPtrType) ToVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) VolumeTopologyRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTopologyRequestPtrOutput)
}

type VolumeTopologyRequestOutput struct{ *pulumi.OutputState }

func (VolumeTopologyRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTopologyRequest)(nil)).Elem()
}

func (o VolumeTopologyRequestOutput) ToVolumeTopologyRequestOutput() VolumeTopologyRequestOutput {
	return o
}

func (o VolumeTopologyRequestOutput) ToVolumeTopologyRequestOutputWithContext(ctx context.Context) VolumeTopologyRequestOutput {
	return o
}

func (o VolumeTopologyRequestOutput) ToVolumeTopologyRequestPtrOutput() VolumeTopologyRequestPtrOutput {
	return o.ToVolumeTopologyRequestPtrOutputWithContext(context.Background())
}

func (o VolumeTopologyRequestOutput) ToVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) VolumeTopologyRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeTopologyRequest) *VolumeTopologyRequest {
		return &v
	}).(VolumeTopologyRequestPtrOutput)
}

// `(“Topology“: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
func (o VolumeTopologyRequestOutput) Required() VolumeTopologyRequestRequiredPtrOutput {
	return o.ApplyT(func(v VolumeTopologyRequest) *VolumeTopologyRequestRequired { return v.Required }).(VolumeTopologyRequestRequiredPtrOutput)
}

type VolumeTopologyRequestPtrOutput struct{ *pulumi.OutputState }

func (VolumeTopologyRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeTopologyRequest)(nil)).Elem()
}

func (o VolumeTopologyRequestPtrOutput) ToVolumeTopologyRequestPtrOutput() VolumeTopologyRequestPtrOutput {
	return o
}

func (o VolumeTopologyRequestPtrOutput) ToVolumeTopologyRequestPtrOutputWithContext(ctx context.Context) VolumeTopologyRequestPtrOutput {
	return o
}

func (o VolumeTopologyRequestPtrOutput) Elem() VolumeTopologyRequestOutput {
	return o.ApplyT(func(v *VolumeTopologyRequest) VolumeTopologyRequest {
		if v != nil {
			return *v
		}
		var ret VolumeTopologyRequest
		return ret
	}).(VolumeTopologyRequestOutput)
}

// `(“Topology“: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
func (o VolumeTopologyRequestPtrOutput) Required() VolumeTopologyRequestRequiredPtrOutput {
	return o.ApplyT(func(v *VolumeTopologyRequest) *VolumeTopologyRequestRequired {
		if v == nil {
			return nil
		}
		return v.Required
	}).(VolumeTopologyRequestRequiredPtrOutput)
}

type VolumeTopologyRequestRequired struct {
	// Defines the location for the volume.
	Topologies []VolumeTopologyRequestRequiredTopology `pulumi:"topologies"`
}

// VolumeTopologyRequestRequiredInput is an input type that accepts VolumeTopologyRequestRequiredArgs and VolumeTopologyRequestRequiredOutput values.
// You can construct a concrete instance of `VolumeTopologyRequestRequiredInput` via:
//
//	VolumeTopologyRequestRequiredArgs{...}
type VolumeTopologyRequestRequiredInput interface {
	pulumi.Input

	ToVolumeTopologyRequestRequiredOutput() VolumeTopologyRequestRequiredOutput
	ToVolumeTopologyRequestRequiredOutputWithContext(context.Context) VolumeTopologyRequestRequiredOutput
}

type VolumeTopologyRequestRequiredArgs struct {
	// Defines the location for the volume.
	Topologies VolumeTopologyRequestRequiredTopologyArrayInput `pulumi:"topologies"`
}

func (VolumeTopologyRequestRequiredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTopologyRequestRequired)(nil)).Elem()
}

func (i VolumeTopologyRequestRequiredArgs) ToVolumeTopologyRequestRequiredOutput() VolumeTopologyRequestRequiredOutput {
	return i.ToVolumeTopologyRequestRequiredOutputWithContext(context.Background())
}

func (i VolumeTopologyRequestRequiredArgs) ToVolumeTopologyRequestRequiredOutputWithContext(ctx context.Context) VolumeTopologyRequestRequiredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTopologyRequestRequiredOutput)
}

func (i VolumeTopologyRequestRequiredArgs) ToVolumeTopologyRequestRequiredPtrOutput() VolumeTopologyRequestRequiredPtrOutput {
	return i.ToVolumeTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (i VolumeTopologyRequestRequiredArgs) ToVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) VolumeTopologyRequestRequiredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTopologyRequestRequiredOutput).ToVolumeTopologyRequestRequiredPtrOutputWithContext(ctx)
}

// VolumeTopologyRequestRequiredPtrInput is an input type that accepts VolumeTopologyRequestRequiredArgs, VolumeTopologyRequestRequiredPtr and VolumeTopologyRequestRequiredPtrOutput values.
// You can construct a concrete instance of `VolumeTopologyRequestRequiredPtrInput` via:
//
//	        VolumeTopologyRequestRequiredArgs{...}
//
//	or:
//
//	        nil
type VolumeTopologyRequestRequiredPtrInput interface {
	pulumi.Input

	ToVolumeTopologyRequestRequiredPtrOutput() VolumeTopologyRequestRequiredPtrOutput
	ToVolumeTopologyRequestRequiredPtrOutputWithContext(context.Context) VolumeTopologyRequestRequiredPtrOutput
}

type volumeTopologyRequestRequiredPtrType VolumeTopologyRequestRequiredArgs

func VolumeTopologyRequestRequiredPtr(v *VolumeTopologyRequestRequiredArgs) VolumeTopologyRequestRequiredPtrInput {
	return (*volumeTopologyRequestRequiredPtrType)(v)
}

func (*volumeTopologyRequestRequiredPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeTopologyRequestRequired)(nil)).Elem()
}

func (i *volumeTopologyRequestRequiredPtrType) ToVolumeTopologyRequestRequiredPtrOutput() VolumeTopologyRequestRequiredPtrOutput {
	return i.ToVolumeTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (i *volumeTopologyRequestRequiredPtrType) ToVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) VolumeTopologyRequestRequiredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTopologyRequestRequiredPtrOutput)
}

type VolumeTopologyRequestRequiredOutput struct{ *pulumi.OutputState }

func (VolumeTopologyRequestRequiredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTopologyRequestRequired)(nil)).Elem()
}

func (o VolumeTopologyRequestRequiredOutput) ToVolumeTopologyRequestRequiredOutput() VolumeTopologyRequestRequiredOutput {
	return o
}

func (o VolumeTopologyRequestRequiredOutput) ToVolumeTopologyRequestRequiredOutputWithContext(ctx context.Context) VolumeTopologyRequestRequiredOutput {
	return o
}

func (o VolumeTopologyRequestRequiredOutput) ToVolumeTopologyRequestRequiredPtrOutput() VolumeTopologyRequestRequiredPtrOutput {
	return o.ToVolumeTopologyRequestRequiredPtrOutputWithContext(context.Background())
}

func (o VolumeTopologyRequestRequiredOutput) ToVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) VolumeTopologyRequestRequiredPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeTopologyRequestRequired) *VolumeTopologyRequestRequired {
		return &v
	}).(VolumeTopologyRequestRequiredPtrOutput)
}

// Defines the location for the volume.
func (o VolumeTopologyRequestRequiredOutput) Topologies() VolumeTopologyRequestRequiredTopologyArrayOutput {
	return o.ApplyT(func(v VolumeTopologyRequestRequired) []VolumeTopologyRequestRequiredTopology { return v.Topologies }).(VolumeTopologyRequestRequiredTopologyArrayOutput)
}

type VolumeTopologyRequestRequiredPtrOutput struct{ *pulumi.OutputState }

func (VolumeTopologyRequestRequiredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeTopologyRequestRequired)(nil)).Elem()
}

func (o VolumeTopologyRequestRequiredPtrOutput) ToVolumeTopologyRequestRequiredPtrOutput() VolumeTopologyRequestRequiredPtrOutput {
	return o
}

func (o VolumeTopologyRequestRequiredPtrOutput) ToVolumeTopologyRequestRequiredPtrOutputWithContext(ctx context.Context) VolumeTopologyRequestRequiredPtrOutput {
	return o
}

func (o VolumeTopologyRequestRequiredPtrOutput) Elem() VolumeTopologyRequestRequiredOutput {
	return o.ApplyT(func(v *VolumeTopologyRequestRequired) VolumeTopologyRequestRequired {
		if v != nil {
			return *v
		}
		var ret VolumeTopologyRequestRequired
		return ret
	}).(VolumeTopologyRequestRequiredOutput)
}

// Defines the location for the volume.
func (o VolumeTopologyRequestRequiredPtrOutput) Topologies() VolumeTopologyRequestRequiredTopologyArrayOutput {
	return o.ApplyT(func(v *VolumeTopologyRequestRequired) []VolumeTopologyRequestRequiredTopology {
		if v == nil {
			return nil
		}
		return v.Topologies
	}).(VolumeTopologyRequestRequiredTopologyArrayOutput)
}

type VolumeTopologyRequestRequiredTopology struct {
	// Define attributes for the topology request.
	Segments map[string]string `pulumi:"segments"`
}

// VolumeTopologyRequestRequiredTopologyInput is an input type that accepts VolumeTopologyRequestRequiredTopologyArgs and VolumeTopologyRequestRequiredTopologyOutput values.
// You can construct a concrete instance of `VolumeTopologyRequestRequiredTopologyInput` via:
//
//	VolumeTopologyRequestRequiredTopologyArgs{...}
type VolumeTopologyRequestRequiredTopologyInput interface {
	pulumi.Input

	ToVolumeTopologyRequestRequiredTopologyOutput() VolumeTopologyRequestRequiredTopologyOutput
	ToVolumeTopologyRequestRequiredTopologyOutputWithContext(context.Context) VolumeTopologyRequestRequiredTopologyOutput
}

type VolumeTopologyRequestRequiredTopologyArgs struct {
	// Define attributes for the topology request.
	Segments pulumi.StringMapInput `pulumi:"segments"`
}

func (VolumeTopologyRequestRequiredTopologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (i VolumeTopologyRequestRequiredTopologyArgs) ToVolumeTopologyRequestRequiredTopologyOutput() VolumeTopologyRequestRequiredTopologyOutput {
	return i.ToVolumeTopologyRequestRequiredTopologyOutputWithContext(context.Background())
}

func (i VolumeTopologyRequestRequiredTopologyArgs) ToVolumeTopologyRequestRequiredTopologyOutputWithContext(ctx context.Context) VolumeTopologyRequestRequiredTopologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTopologyRequestRequiredTopologyOutput)
}

// VolumeTopologyRequestRequiredTopologyArrayInput is an input type that accepts VolumeTopologyRequestRequiredTopologyArray and VolumeTopologyRequestRequiredTopologyArrayOutput values.
// You can construct a concrete instance of `VolumeTopologyRequestRequiredTopologyArrayInput` via:
//
//	VolumeTopologyRequestRequiredTopologyArray{ VolumeTopologyRequestRequiredTopologyArgs{...} }
type VolumeTopologyRequestRequiredTopologyArrayInput interface {
	pulumi.Input

	ToVolumeTopologyRequestRequiredTopologyArrayOutput() VolumeTopologyRequestRequiredTopologyArrayOutput
	ToVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(context.Context) VolumeTopologyRequestRequiredTopologyArrayOutput
}

type VolumeTopologyRequestRequiredTopologyArray []VolumeTopologyRequestRequiredTopologyInput

func (VolumeTopologyRequestRequiredTopologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (i VolumeTopologyRequestRequiredTopologyArray) ToVolumeTopologyRequestRequiredTopologyArrayOutput() VolumeTopologyRequestRequiredTopologyArrayOutput {
	return i.ToVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(context.Background())
}

func (i VolumeTopologyRequestRequiredTopologyArray) ToVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(ctx context.Context) VolumeTopologyRequestRequiredTopologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTopologyRequestRequiredTopologyArrayOutput)
}

type VolumeTopologyRequestRequiredTopologyOutput struct{ *pulumi.OutputState }

func (VolumeTopologyRequestRequiredTopologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (o VolumeTopologyRequestRequiredTopologyOutput) ToVolumeTopologyRequestRequiredTopologyOutput() VolumeTopologyRequestRequiredTopologyOutput {
	return o
}

func (o VolumeTopologyRequestRequiredTopologyOutput) ToVolumeTopologyRequestRequiredTopologyOutputWithContext(ctx context.Context) VolumeTopologyRequestRequiredTopologyOutput {
	return o
}

// Define attributes for the topology request.
func (o VolumeTopologyRequestRequiredTopologyOutput) Segments() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeTopologyRequestRequiredTopology) map[string]string { return v.Segments }).(pulumi.StringMapOutput)
}

type VolumeTopologyRequestRequiredTopologyArrayOutput struct{ *pulumi.OutputState }

func (VolumeTopologyRequestRequiredTopologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeTopologyRequestRequiredTopology)(nil)).Elem()
}

func (o VolumeTopologyRequestRequiredTopologyArrayOutput) ToVolumeTopologyRequestRequiredTopologyArrayOutput() VolumeTopologyRequestRequiredTopologyArrayOutput {
	return o
}

func (o VolumeTopologyRequestRequiredTopologyArrayOutput) ToVolumeTopologyRequestRequiredTopologyArrayOutputWithContext(ctx context.Context) VolumeTopologyRequestRequiredTopologyArrayOutput {
	return o
}

func (o VolumeTopologyRequestRequiredTopologyArrayOutput) Index(i pulumi.IntInput) VolumeTopologyRequestRequiredTopologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeTopologyRequestRequiredTopology {
		return vs[0].([]VolumeTopologyRequestRequiredTopology)[vs[1].(int)]
	}).(VolumeTopologyRequestRequiredTopologyOutput)
}

type GetAclPoliciesPolicy struct {
	// `(string)` - the description of the ACL Policy.
	Description string `pulumi:"description"`
	// `(string)` - the name of the ACL Policy.
	Name string `pulumi:"name"`
}

// GetAclPoliciesPolicyInput is an input type that accepts GetAclPoliciesPolicyArgs and GetAclPoliciesPolicyOutput values.
// You can construct a concrete instance of `GetAclPoliciesPolicyInput` via:
//
//	GetAclPoliciesPolicyArgs{...}
type GetAclPoliciesPolicyInput interface {
	pulumi.Input

	ToGetAclPoliciesPolicyOutput() GetAclPoliciesPolicyOutput
	ToGetAclPoliciesPolicyOutputWithContext(context.Context) GetAclPoliciesPolicyOutput
}

type GetAclPoliciesPolicyArgs struct {
	// `(string)` - the description of the ACL Policy.
	Description pulumi.StringInput `pulumi:"description"`
	// `(string)` - the name of the ACL Policy.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAclPoliciesPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclPoliciesPolicy)(nil)).Elem()
}

func (i GetAclPoliciesPolicyArgs) ToGetAclPoliciesPolicyOutput() GetAclPoliciesPolicyOutput {
	return i.ToGetAclPoliciesPolicyOutputWithContext(context.Background())
}

func (i GetAclPoliciesPolicyArgs) ToGetAclPoliciesPolicyOutputWithContext(ctx context.Context) GetAclPoliciesPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclPoliciesPolicyOutput)
}

// GetAclPoliciesPolicyArrayInput is an input type that accepts GetAclPoliciesPolicyArray and GetAclPoliciesPolicyArrayOutput values.
// You can construct a concrete instance of `GetAclPoliciesPolicyArrayInput` via:
//
//	GetAclPoliciesPolicyArray{ GetAclPoliciesPolicyArgs{...} }
type GetAclPoliciesPolicyArrayInput interface {
	pulumi.Input

	ToGetAclPoliciesPolicyArrayOutput() GetAclPoliciesPolicyArrayOutput
	ToGetAclPoliciesPolicyArrayOutputWithContext(context.Context) GetAclPoliciesPolicyArrayOutput
}

type GetAclPoliciesPolicyArray []GetAclPoliciesPolicyInput

func (GetAclPoliciesPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclPoliciesPolicy)(nil)).Elem()
}

func (i GetAclPoliciesPolicyArray) ToGetAclPoliciesPolicyArrayOutput() GetAclPoliciesPolicyArrayOutput {
	return i.ToGetAclPoliciesPolicyArrayOutputWithContext(context.Background())
}

func (i GetAclPoliciesPolicyArray) ToGetAclPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetAclPoliciesPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclPoliciesPolicyArrayOutput)
}

type GetAclPoliciesPolicyOutput struct{ *pulumi.OutputState }

func (GetAclPoliciesPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclPoliciesPolicy)(nil)).Elem()
}

func (o GetAclPoliciesPolicyOutput) ToGetAclPoliciesPolicyOutput() GetAclPoliciesPolicyOutput {
	return o
}

func (o GetAclPoliciesPolicyOutput) ToGetAclPoliciesPolicyOutputWithContext(ctx context.Context) GetAclPoliciesPolicyOutput {
	return o
}

// `(string)` - the description of the ACL Policy.
func (o GetAclPoliciesPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclPoliciesPolicy) string { return v.Description }).(pulumi.StringOutput)
}

// `(string)` - the name of the ACL Policy.
func (o GetAclPoliciesPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclPoliciesPolicy) string { return v.Name }).(pulumi.StringOutput)
}

type GetAclPoliciesPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetAclPoliciesPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclPoliciesPolicy)(nil)).Elem()
}

func (o GetAclPoliciesPolicyArrayOutput) ToGetAclPoliciesPolicyArrayOutput() GetAclPoliciesPolicyArrayOutput {
	return o
}

func (o GetAclPoliciesPolicyArrayOutput) ToGetAclPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetAclPoliciesPolicyArrayOutput {
	return o
}

func (o GetAclPoliciesPolicyArrayOutput) Index(i pulumi.IntInput) GetAclPoliciesPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclPoliciesPolicy {
		return vs[0].([]GetAclPoliciesPolicy)[vs[1].(int)]
	}).(GetAclPoliciesPolicyOutput)
}

type GetAclRolePolicy struct {
	// `(string)` - Unique name of the ACL role.
	Name string `pulumi:"name"`
}

// GetAclRolePolicyInput is an input type that accepts GetAclRolePolicyArgs and GetAclRolePolicyOutput values.
// You can construct a concrete instance of `GetAclRolePolicyInput` via:
//
//	GetAclRolePolicyArgs{...}
type GetAclRolePolicyInput interface {
	pulumi.Input

	ToGetAclRolePolicyOutput() GetAclRolePolicyOutput
	ToGetAclRolePolicyOutputWithContext(context.Context) GetAclRolePolicyOutput
}

type GetAclRolePolicyArgs struct {
	// `(string)` - Unique name of the ACL role.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAclRolePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclRolePolicy)(nil)).Elem()
}

func (i GetAclRolePolicyArgs) ToGetAclRolePolicyOutput() GetAclRolePolicyOutput {
	return i.ToGetAclRolePolicyOutputWithContext(context.Background())
}

func (i GetAclRolePolicyArgs) ToGetAclRolePolicyOutputWithContext(ctx context.Context) GetAclRolePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclRolePolicyOutput)
}

// GetAclRolePolicyArrayInput is an input type that accepts GetAclRolePolicyArray and GetAclRolePolicyArrayOutput values.
// You can construct a concrete instance of `GetAclRolePolicyArrayInput` via:
//
//	GetAclRolePolicyArray{ GetAclRolePolicyArgs{...} }
type GetAclRolePolicyArrayInput interface {
	pulumi.Input

	ToGetAclRolePolicyArrayOutput() GetAclRolePolicyArrayOutput
	ToGetAclRolePolicyArrayOutputWithContext(context.Context) GetAclRolePolicyArrayOutput
}

type GetAclRolePolicyArray []GetAclRolePolicyInput

func (GetAclRolePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclRolePolicy)(nil)).Elem()
}

func (i GetAclRolePolicyArray) ToGetAclRolePolicyArrayOutput() GetAclRolePolicyArrayOutput {
	return i.ToGetAclRolePolicyArrayOutputWithContext(context.Background())
}

func (i GetAclRolePolicyArray) ToGetAclRolePolicyArrayOutputWithContext(ctx context.Context) GetAclRolePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclRolePolicyArrayOutput)
}

type GetAclRolePolicyOutput struct{ *pulumi.OutputState }

func (GetAclRolePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclRolePolicy)(nil)).Elem()
}

func (o GetAclRolePolicyOutput) ToGetAclRolePolicyOutput() GetAclRolePolicyOutput {
	return o
}

func (o GetAclRolePolicyOutput) ToGetAclRolePolicyOutputWithContext(ctx context.Context) GetAclRolePolicyOutput {
	return o
}

// `(string)` - Unique name of the ACL role.
func (o GetAclRolePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclRolePolicy) string { return v.Name }).(pulumi.StringOutput)
}

type GetAclRolePolicyArrayOutput struct{ *pulumi.OutputState }

func (GetAclRolePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclRolePolicy)(nil)).Elem()
}

func (o GetAclRolePolicyArrayOutput) ToGetAclRolePolicyArrayOutput() GetAclRolePolicyArrayOutput {
	return o
}

func (o GetAclRolePolicyArrayOutput) ToGetAclRolePolicyArrayOutputWithContext(ctx context.Context) GetAclRolePolicyArrayOutput {
	return o
}

func (o GetAclRolePolicyArrayOutput) Index(i pulumi.IntInput) GetAclRolePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclRolePolicy {
		return vs[0].([]GetAclRolePolicy)[vs[1].(int)]
	}).(GetAclRolePolicyOutput)
}

type GetAclRolesAclRole struct {
	// `(string)` - The description of the ACL Role.
	Description string `pulumi:"description"`
	// `(string)` - The ACL Role unique identifier.
	Id string `pulumi:"id"`
	// `(string)` - Unique name of the ACL role.
	Name string `pulumi:"name"`
	// `(set)` - The policies applied to the role.
	Policies []GetAclRolesAclRolePolicy `pulumi:"policies"`
}

// GetAclRolesAclRoleInput is an input type that accepts GetAclRolesAclRoleArgs and GetAclRolesAclRoleOutput values.
// You can construct a concrete instance of `GetAclRolesAclRoleInput` via:
//
//	GetAclRolesAclRoleArgs{...}
type GetAclRolesAclRoleInput interface {
	pulumi.Input

	ToGetAclRolesAclRoleOutput() GetAclRolesAclRoleOutput
	ToGetAclRolesAclRoleOutputWithContext(context.Context) GetAclRolesAclRoleOutput
}

type GetAclRolesAclRoleArgs struct {
	// `(string)` - The description of the ACL Role.
	Description pulumi.StringInput `pulumi:"description"`
	// `(string)` - The ACL Role unique identifier.
	Id pulumi.StringInput `pulumi:"id"`
	// `(string)` - Unique name of the ACL role.
	Name pulumi.StringInput `pulumi:"name"`
	// `(set)` - The policies applied to the role.
	Policies GetAclRolesAclRolePolicyArrayInput `pulumi:"policies"`
}

func (GetAclRolesAclRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclRolesAclRole)(nil)).Elem()
}

func (i GetAclRolesAclRoleArgs) ToGetAclRolesAclRoleOutput() GetAclRolesAclRoleOutput {
	return i.ToGetAclRolesAclRoleOutputWithContext(context.Background())
}

func (i GetAclRolesAclRoleArgs) ToGetAclRolesAclRoleOutputWithContext(ctx context.Context) GetAclRolesAclRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclRolesAclRoleOutput)
}

// GetAclRolesAclRoleArrayInput is an input type that accepts GetAclRolesAclRoleArray and GetAclRolesAclRoleArrayOutput values.
// You can construct a concrete instance of `GetAclRolesAclRoleArrayInput` via:
//
//	GetAclRolesAclRoleArray{ GetAclRolesAclRoleArgs{...} }
type GetAclRolesAclRoleArrayInput interface {
	pulumi.Input

	ToGetAclRolesAclRoleArrayOutput() GetAclRolesAclRoleArrayOutput
	ToGetAclRolesAclRoleArrayOutputWithContext(context.Context) GetAclRolesAclRoleArrayOutput
}

type GetAclRolesAclRoleArray []GetAclRolesAclRoleInput

func (GetAclRolesAclRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclRolesAclRole)(nil)).Elem()
}

func (i GetAclRolesAclRoleArray) ToGetAclRolesAclRoleArrayOutput() GetAclRolesAclRoleArrayOutput {
	return i.ToGetAclRolesAclRoleArrayOutputWithContext(context.Background())
}

func (i GetAclRolesAclRoleArray) ToGetAclRolesAclRoleArrayOutputWithContext(ctx context.Context) GetAclRolesAclRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclRolesAclRoleArrayOutput)
}

type GetAclRolesAclRoleOutput struct{ *pulumi.OutputState }

func (GetAclRolesAclRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclRolesAclRole)(nil)).Elem()
}

func (o GetAclRolesAclRoleOutput) ToGetAclRolesAclRoleOutput() GetAclRolesAclRoleOutput {
	return o
}

func (o GetAclRolesAclRoleOutput) ToGetAclRolesAclRoleOutputWithContext(ctx context.Context) GetAclRolesAclRoleOutput {
	return o
}

// `(string)` - The description of the ACL Role.
func (o GetAclRolesAclRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclRolesAclRole) string { return v.Description }).(pulumi.StringOutput)
}

// `(string)` - The ACL Role unique identifier.
func (o GetAclRolesAclRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclRolesAclRole) string { return v.Id }).(pulumi.StringOutput)
}

// `(string)` - Unique name of the ACL role.
func (o GetAclRolesAclRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclRolesAclRole) string { return v.Name }).(pulumi.StringOutput)
}

// `(set)` - The policies applied to the role.
func (o GetAclRolesAclRoleOutput) Policies() GetAclRolesAclRolePolicyArrayOutput {
	return o.ApplyT(func(v GetAclRolesAclRole) []GetAclRolesAclRolePolicy { return v.Policies }).(GetAclRolesAclRolePolicyArrayOutput)
}

type GetAclRolesAclRoleArrayOutput struct{ *pulumi.OutputState }

func (GetAclRolesAclRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclRolesAclRole)(nil)).Elem()
}

func (o GetAclRolesAclRoleArrayOutput) ToGetAclRolesAclRoleArrayOutput() GetAclRolesAclRoleArrayOutput {
	return o
}

func (o GetAclRolesAclRoleArrayOutput) ToGetAclRolesAclRoleArrayOutputWithContext(ctx context.Context) GetAclRolesAclRoleArrayOutput {
	return o
}

func (o GetAclRolesAclRoleArrayOutput) Index(i pulumi.IntInput) GetAclRolesAclRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclRolesAclRole {
		return vs[0].([]GetAclRolesAclRole)[vs[1].(int)]
	}).(GetAclRolesAclRoleOutput)
}

type GetAclRolesAclRolePolicy struct {
	// `(string)` - Unique name of the ACL role.
	Name string `pulumi:"name"`
}

// GetAclRolesAclRolePolicyInput is an input type that accepts GetAclRolesAclRolePolicyArgs and GetAclRolesAclRolePolicyOutput values.
// You can construct a concrete instance of `GetAclRolesAclRolePolicyInput` via:
//
//	GetAclRolesAclRolePolicyArgs{...}
type GetAclRolesAclRolePolicyInput interface {
	pulumi.Input

	ToGetAclRolesAclRolePolicyOutput() GetAclRolesAclRolePolicyOutput
	ToGetAclRolesAclRolePolicyOutputWithContext(context.Context) GetAclRolesAclRolePolicyOutput
}

type GetAclRolesAclRolePolicyArgs struct {
	// `(string)` - Unique name of the ACL role.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAclRolesAclRolePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclRolesAclRolePolicy)(nil)).Elem()
}

func (i GetAclRolesAclRolePolicyArgs) ToGetAclRolesAclRolePolicyOutput() GetAclRolesAclRolePolicyOutput {
	return i.ToGetAclRolesAclRolePolicyOutputWithContext(context.Background())
}

func (i GetAclRolesAclRolePolicyArgs) ToGetAclRolesAclRolePolicyOutputWithContext(ctx context.Context) GetAclRolesAclRolePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclRolesAclRolePolicyOutput)
}

// GetAclRolesAclRolePolicyArrayInput is an input type that accepts GetAclRolesAclRolePolicyArray and GetAclRolesAclRolePolicyArrayOutput values.
// You can construct a concrete instance of `GetAclRolesAclRolePolicyArrayInput` via:
//
//	GetAclRolesAclRolePolicyArray{ GetAclRolesAclRolePolicyArgs{...} }
type GetAclRolesAclRolePolicyArrayInput interface {
	pulumi.Input

	ToGetAclRolesAclRolePolicyArrayOutput() GetAclRolesAclRolePolicyArrayOutput
	ToGetAclRolesAclRolePolicyArrayOutputWithContext(context.Context) GetAclRolesAclRolePolicyArrayOutput
}

type GetAclRolesAclRolePolicyArray []GetAclRolesAclRolePolicyInput

func (GetAclRolesAclRolePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclRolesAclRolePolicy)(nil)).Elem()
}

func (i GetAclRolesAclRolePolicyArray) ToGetAclRolesAclRolePolicyArrayOutput() GetAclRolesAclRolePolicyArrayOutput {
	return i.ToGetAclRolesAclRolePolicyArrayOutputWithContext(context.Background())
}

func (i GetAclRolesAclRolePolicyArray) ToGetAclRolesAclRolePolicyArrayOutputWithContext(ctx context.Context) GetAclRolesAclRolePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclRolesAclRolePolicyArrayOutput)
}

type GetAclRolesAclRolePolicyOutput struct{ *pulumi.OutputState }

func (GetAclRolesAclRolePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclRolesAclRolePolicy)(nil)).Elem()
}

func (o GetAclRolesAclRolePolicyOutput) ToGetAclRolesAclRolePolicyOutput() GetAclRolesAclRolePolicyOutput {
	return o
}

func (o GetAclRolesAclRolePolicyOutput) ToGetAclRolesAclRolePolicyOutputWithContext(ctx context.Context) GetAclRolesAclRolePolicyOutput {
	return o
}

// `(string)` - Unique name of the ACL role.
func (o GetAclRolesAclRolePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclRolesAclRolePolicy) string { return v.Name }).(pulumi.StringOutput)
}

type GetAclRolesAclRolePolicyArrayOutput struct{ *pulumi.OutputState }

func (GetAclRolesAclRolePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclRolesAclRolePolicy)(nil)).Elem()
}

func (o GetAclRolesAclRolePolicyArrayOutput) ToGetAclRolesAclRolePolicyArrayOutput() GetAclRolesAclRolePolicyArrayOutput {
	return o
}

func (o GetAclRolesAclRolePolicyArrayOutput) ToGetAclRolesAclRolePolicyArrayOutputWithContext(ctx context.Context) GetAclRolesAclRolePolicyArrayOutput {
	return o
}

func (o GetAclRolesAclRolePolicyArrayOutput) Index(i pulumi.IntInput) GetAclRolesAclRolePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclRolesAclRolePolicy {
		return vs[0].([]GetAclRolesAclRolePolicy)[vs[1].(int)]
	}).(GetAclRolesAclRolePolicyOutput)
}

type GetAclTokenRole struct {
	// The ID of the ACL role.
	Id string `pulumi:"id"`
	// `(string)` Non-sensitive identifier for this token.
	Name string `pulumi:"name"`
}

// GetAclTokenRoleInput is an input type that accepts GetAclTokenRoleArgs and GetAclTokenRoleOutput values.
// You can construct a concrete instance of `GetAclTokenRoleInput` via:
//
//	GetAclTokenRoleArgs{...}
type GetAclTokenRoleInput interface {
	pulumi.Input

	ToGetAclTokenRoleOutput() GetAclTokenRoleOutput
	ToGetAclTokenRoleOutputWithContext(context.Context) GetAclTokenRoleOutput
}

type GetAclTokenRoleArgs struct {
	// The ID of the ACL role.
	Id pulumi.StringInput `pulumi:"id"`
	// `(string)` Non-sensitive identifier for this token.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAclTokenRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTokenRole)(nil)).Elem()
}

func (i GetAclTokenRoleArgs) ToGetAclTokenRoleOutput() GetAclTokenRoleOutput {
	return i.ToGetAclTokenRoleOutputWithContext(context.Background())
}

func (i GetAclTokenRoleArgs) ToGetAclTokenRoleOutputWithContext(ctx context.Context) GetAclTokenRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTokenRoleOutput)
}

// GetAclTokenRoleArrayInput is an input type that accepts GetAclTokenRoleArray and GetAclTokenRoleArrayOutput values.
// You can construct a concrete instance of `GetAclTokenRoleArrayInput` via:
//
//	GetAclTokenRoleArray{ GetAclTokenRoleArgs{...} }
type GetAclTokenRoleArrayInput interface {
	pulumi.Input

	ToGetAclTokenRoleArrayOutput() GetAclTokenRoleArrayOutput
	ToGetAclTokenRoleArrayOutputWithContext(context.Context) GetAclTokenRoleArrayOutput
}

type GetAclTokenRoleArray []GetAclTokenRoleInput

func (GetAclTokenRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTokenRole)(nil)).Elem()
}

func (i GetAclTokenRoleArray) ToGetAclTokenRoleArrayOutput() GetAclTokenRoleArrayOutput {
	return i.ToGetAclTokenRoleArrayOutputWithContext(context.Background())
}

func (i GetAclTokenRoleArray) ToGetAclTokenRoleArrayOutputWithContext(ctx context.Context) GetAclTokenRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTokenRoleArrayOutput)
}

type GetAclTokenRoleOutput struct{ *pulumi.OutputState }

func (GetAclTokenRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTokenRole)(nil)).Elem()
}

func (o GetAclTokenRoleOutput) ToGetAclTokenRoleOutput() GetAclTokenRoleOutput {
	return o
}

func (o GetAclTokenRoleOutput) ToGetAclTokenRoleOutputWithContext(ctx context.Context) GetAclTokenRoleOutput {
	return o
}

// The ID of the ACL role.
func (o GetAclTokenRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokenRole) string { return v.Id }).(pulumi.StringOutput)
}

// `(string)` Non-sensitive identifier for this token.
func (o GetAclTokenRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokenRole) string { return v.Name }).(pulumi.StringOutput)
}

type GetAclTokenRoleArrayOutput struct{ *pulumi.OutputState }

func (GetAclTokenRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTokenRole)(nil)).Elem()
}

func (o GetAclTokenRoleArrayOutput) ToGetAclTokenRoleArrayOutput() GetAclTokenRoleArrayOutput {
	return o
}

func (o GetAclTokenRoleArrayOutput) ToGetAclTokenRoleArrayOutputWithContext(ctx context.Context) GetAclTokenRoleArrayOutput {
	return o
}

func (o GetAclTokenRoleArrayOutput) Index(i pulumi.IntInput) GetAclTokenRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclTokenRole {
		return vs[0].([]GetAclTokenRole)[vs[1].(int)]
	}).(GetAclTokenRoleOutput)
}

type GetAclTokensAclToken struct {
	// `(TypeString)` Non-sensitive identifier for the token.
	AccessorId string `pulumi:"accessorId"`
	// `(string)` Date and time the token was created at.
	CreateTime string `pulumi:"createTime"`
	// `(string)` - The timestamp after which the token is
	// considered expired and eligible for destruction.
	ExpirationTime string `pulumi:"expirationTime"`
	// `(bool)` Whether the token is replicated to all regions.
	Global bool `pulumi:"global"`
	// `(TypeString)` The name of the token.
	Name string `pulumi:"name"`
	// `(list of strings)` The list of policies attached to the token.
	Policies []string `pulumi:"policies"`
	// `(set: [])` - The list of roles attached to the token. Each entry has
	// `name` and `id` attributes.
	Roles []GetAclTokensAclTokenRole `pulumi:"roles"`
	// `(TypeString)` The type of the token.
	Type string `pulumi:"type"`
}

// GetAclTokensAclTokenInput is an input type that accepts GetAclTokensAclTokenArgs and GetAclTokensAclTokenOutput values.
// You can construct a concrete instance of `GetAclTokensAclTokenInput` via:
//
//	GetAclTokensAclTokenArgs{...}
type GetAclTokensAclTokenInput interface {
	pulumi.Input

	ToGetAclTokensAclTokenOutput() GetAclTokensAclTokenOutput
	ToGetAclTokensAclTokenOutputWithContext(context.Context) GetAclTokensAclTokenOutput
}

type GetAclTokensAclTokenArgs struct {
	// `(TypeString)` Non-sensitive identifier for the token.
	AccessorId pulumi.StringInput `pulumi:"accessorId"`
	// `(string)` Date and time the token was created at.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// `(string)` - The timestamp after which the token is
	// considered expired and eligible for destruction.
	ExpirationTime pulumi.StringInput `pulumi:"expirationTime"`
	// `(bool)` Whether the token is replicated to all regions.
	Global pulumi.BoolInput `pulumi:"global"`
	// `(TypeString)` The name of the token.
	Name pulumi.StringInput `pulumi:"name"`
	// `(list of strings)` The list of policies attached to the token.
	Policies pulumi.StringArrayInput `pulumi:"policies"`
	// `(set: [])` - The list of roles attached to the token. Each entry has
	// `name` and `id` attributes.
	Roles GetAclTokensAclTokenRoleArrayInput `pulumi:"roles"`
	// `(TypeString)` The type of the token.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetAclTokensAclTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTokensAclToken)(nil)).Elem()
}

func (i GetAclTokensAclTokenArgs) ToGetAclTokensAclTokenOutput() GetAclTokensAclTokenOutput {
	return i.ToGetAclTokensAclTokenOutputWithContext(context.Background())
}

func (i GetAclTokensAclTokenArgs) ToGetAclTokensAclTokenOutputWithContext(ctx context.Context) GetAclTokensAclTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTokensAclTokenOutput)
}

// GetAclTokensAclTokenArrayInput is an input type that accepts GetAclTokensAclTokenArray and GetAclTokensAclTokenArrayOutput values.
// You can construct a concrete instance of `GetAclTokensAclTokenArrayInput` via:
//
//	GetAclTokensAclTokenArray{ GetAclTokensAclTokenArgs{...} }
type GetAclTokensAclTokenArrayInput interface {
	pulumi.Input

	ToGetAclTokensAclTokenArrayOutput() GetAclTokensAclTokenArrayOutput
	ToGetAclTokensAclTokenArrayOutputWithContext(context.Context) GetAclTokensAclTokenArrayOutput
}

type GetAclTokensAclTokenArray []GetAclTokensAclTokenInput

func (GetAclTokensAclTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTokensAclToken)(nil)).Elem()
}

func (i GetAclTokensAclTokenArray) ToGetAclTokensAclTokenArrayOutput() GetAclTokensAclTokenArrayOutput {
	return i.ToGetAclTokensAclTokenArrayOutputWithContext(context.Background())
}

func (i GetAclTokensAclTokenArray) ToGetAclTokensAclTokenArrayOutputWithContext(ctx context.Context) GetAclTokensAclTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTokensAclTokenArrayOutput)
}

type GetAclTokensAclTokenOutput struct{ *pulumi.OutputState }

func (GetAclTokensAclTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTokensAclToken)(nil)).Elem()
}

func (o GetAclTokensAclTokenOutput) ToGetAclTokensAclTokenOutput() GetAclTokensAclTokenOutput {
	return o
}

func (o GetAclTokensAclTokenOutput) ToGetAclTokensAclTokenOutputWithContext(ctx context.Context) GetAclTokensAclTokenOutput {
	return o
}

// `(TypeString)` Non-sensitive identifier for the token.
func (o GetAclTokensAclTokenOutput) AccessorId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) string { return v.AccessorId }).(pulumi.StringOutput)
}

// `(string)` Date and time the token was created at.
func (o GetAclTokensAclTokenOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) string { return v.CreateTime }).(pulumi.StringOutput)
}

// `(string)` - The timestamp after which the token is
// considered expired and eligible for destruction.
func (o GetAclTokensAclTokenOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// `(bool)` Whether the token is replicated to all regions.
func (o GetAclTokensAclTokenOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) bool { return v.Global }).(pulumi.BoolOutput)
}

// `(TypeString)` The name of the token.
func (o GetAclTokensAclTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) string { return v.Name }).(pulumi.StringOutput)
}

// `(list of strings)` The list of policies attached to the token.
func (o GetAclTokensAclTokenOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

// `(set: [])` - The list of roles attached to the token. Each entry has
// `name` and `id` attributes.
func (o GetAclTokensAclTokenOutput) Roles() GetAclTokensAclTokenRoleArrayOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) []GetAclTokensAclTokenRole { return v.Roles }).(GetAclTokensAclTokenRoleArrayOutput)
}

// `(TypeString)` The type of the token.
func (o GetAclTokensAclTokenOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclToken) string { return v.Type }).(pulumi.StringOutput)
}

type GetAclTokensAclTokenArrayOutput struct{ *pulumi.OutputState }

func (GetAclTokensAclTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTokensAclToken)(nil)).Elem()
}

func (o GetAclTokensAclTokenArrayOutput) ToGetAclTokensAclTokenArrayOutput() GetAclTokensAclTokenArrayOutput {
	return o
}

func (o GetAclTokensAclTokenArrayOutput) ToGetAclTokensAclTokenArrayOutputWithContext(ctx context.Context) GetAclTokensAclTokenArrayOutput {
	return o
}

func (o GetAclTokensAclTokenArrayOutput) Index(i pulumi.IntInput) GetAclTokensAclTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclTokensAclToken {
		return vs[0].([]GetAclTokensAclToken)[vs[1].(int)]
	}).(GetAclTokensAclTokenOutput)
}

type GetAclTokensAclTokenRole struct {
	// The ID of the ACL role.
	Id string `pulumi:"id"`
	// `(TypeString)` The name of the token.
	Name string `pulumi:"name"`
}

// GetAclTokensAclTokenRoleInput is an input type that accepts GetAclTokensAclTokenRoleArgs and GetAclTokensAclTokenRoleOutput values.
// You can construct a concrete instance of `GetAclTokensAclTokenRoleInput` via:
//
//	GetAclTokensAclTokenRoleArgs{...}
type GetAclTokensAclTokenRoleInput interface {
	pulumi.Input

	ToGetAclTokensAclTokenRoleOutput() GetAclTokensAclTokenRoleOutput
	ToGetAclTokensAclTokenRoleOutputWithContext(context.Context) GetAclTokensAclTokenRoleOutput
}

type GetAclTokensAclTokenRoleArgs struct {
	// The ID of the ACL role.
	Id pulumi.StringInput `pulumi:"id"`
	// `(TypeString)` The name of the token.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAclTokensAclTokenRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTokensAclTokenRole)(nil)).Elem()
}

func (i GetAclTokensAclTokenRoleArgs) ToGetAclTokensAclTokenRoleOutput() GetAclTokensAclTokenRoleOutput {
	return i.ToGetAclTokensAclTokenRoleOutputWithContext(context.Background())
}

func (i GetAclTokensAclTokenRoleArgs) ToGetAclTokensAclTokenRoleOutputWithContext(ctx context.Context) GetAclTokensAclTokenRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTokensAclTokenRoleOutput)
}

// GetAclTokensAclTokenRoleArrayInput is an input type that accepts GetAclTokensAclTokenRoleArray and GetAclTokensAclTokenRoleArrayOutput values.
// You can construct a concrete instance of `GetAclTokensAclTokenRoleArrayInput` via:
//
//	GetAclTokensAclTokenRoleArray{ GetAclTokensAclTokenRoleArgs{...} }
type GetAclTokensAclTokenRoleArrayInput interface {
	pulumi.Input

	ToGetAclTokensAclTokenRoleArrayOutput() GetAclTokensAclTokenRoleArrayOutput
	ToGetAclTokensAclTokenRoleArrayOutputWithContext(context.Context) GetAclTokensAclTokenRoleArrayOutput
}

type GetAclTokensAclTokenRoleArray []GetAclTokensAclTokenRoleInput

func (GetAclTokensAclTokenRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTokensAclTokenRole)(nil)).Elem()
}

func (i GetAclTokensAclTokenRoleArray) ToGetAclTokensAclTokenRoleArrayOutput() GetAclTokensAclTokenRoleArrayOutput {
	return i.ToGetAclTokensAclTokenRoleArrayOutputWithContext(context.Background())
}

func (i GetAclTokensAclTokenRoleArray) ToGetAclTokensAclTokenRoleArrayOutputWithContext(ctx context.Context) GetAclTokensAclTokenRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTokensAclTokenRoleArrayOutput)
}

type GetAclTokensAclTokenRoleOutput struct{ *pulumi.OutputState }

func (GetAclTokensAclTokenRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTokensAclTokenRole)(nil)).Elem()
}

func (o GetAclTokensAclTokenRoleOutput) ToGetAclTokensAclTokenRoleOutput() GetAclTokensAclTokenRoleOutput {
	return o
}

func (o GetAclTokensAclTokenRoleOutput) ToGetAclTokensAclTokenRoleOutputWithContext(ctx context.Context) GetAclTokensAclTokenRoleOutput {
	return o
}

// The ID of the ACL role.
func (o GetAclTokensAclTokenRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclTokenRole) string { return v.Id }).(pulumi.StringOutput)
}

// `(TypeString)` The name of the token.
func (o GetAclTokensAclTokenRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTokensAclTokenRole) string { return v.Name }).(pulumi.StringOutput)
}

type GetAclTokensAclTokenRoleArrayOutput struct{ *pulumi.OutputState }

func (GetAclTokensAclTokenRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTokensAclTokenRole)(nil)).Elem()
}

func (o GetAclTokensAclTokenRoleArrayOutput) ToGetAclTokensAclTokenRoleArrayOutput() GetAclTokensAclTokenRoleArrayOutput {
	return o
}

func (o GetAclTokensAclTokenRoleArrayOutput) ToGetAclTokensAclTokenRoleArrayOutputWithContext(ctx context.Context) GetAclTokensAclTokenRoleArrayOutput {
	return o
}

func (o GetAclTokensAclTokenRoleArrayOutput) Index(i pulumi.IntInput) GetAclTokensAclTokenRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclTokensAclTokenRole {
		return vs[0].([]GetAclTokensAclTokenRole)[vs[1].(int)]
	}).(GetAclTokensAclTokenRoleOutput)
}

type GetAllocationsAllocation struct {
	// `(string)` - The current client status of the allocation.
	ClientStatus string `pulumi:"clientStatus"`
	// `(int)` - The Raft index in which the allocation was created.
	CreateIndex int `pulumi:"createIndex"`
	// `(int)` - The timestamp of when the allocation was created.
	CreateTime int `pulumi:"createTime"`
	// `(string)` - The current desired status of the allocation.
	DesiredStatus string `pulumi:"desiredStatus"`
	// `(string)` - The ID of the evaluation that generated the allocation.
	EvalId string `pulumi:"evalId"`
	// `(string)` - The ID of the evaluation that succeeds the allocation evaluation.
	FollowupEvalId string `pulumi:"followupEvalId"`
	// `(string)` - The ID of the allocation.
	Id string `pulumi:"id"`
	// `(string)` - The ID of the job related to the allocation.
	JobId string `pulumi:"jobId"`
	// `(string)` - The type of the job related to the allocation.
	JobType string `pulumi:"jobType"`
	// `(int)` - The version of the job that generated the allocation.
	JobVersion int `pulumi:"jobVersion"`
	// `(int)` - The Raft index in which the allocation was last modified.
	ModifyIndex int `pulumi:"modifyIndex"`
	// `(int)` - The timestamp of when the allocation was last modified.
	ModifyTime int `pulumi:"modifyTime"`
	// `(string)` - The name of the allocation.
	Name string `pulumi:"name"`
	// `(string: <optional>)` - Specifies the namespace to search for
	// allocations in.
	Namespace string `pulumi:"namespace"`
	// `(string)` - The ID of the allocation that succeeds the allocation.
	NextAllocation string `pulumi:"nextAllocation"`
	// `(string)` - The ID of the node to which the allocation was scheduled.
	NodeId string `pulumi:"nodeId"`
	// `(string)` - The ID of the node to which the allocation was scheduled.
	NodeName string `pulumi:"nodeName"`
	// `(string)` - The ID of the allocation that preempted the allocation.
	PreemptedByAllocation string `pulumi:"preemptedByAllocation"`
	// `(string)` - The job task group related to the allocation.
	TaskGroup string `pulumi:"taskGroup"`
}

// GetAllocationsAllocationInput is an input type that accepts GetAllocationsAllocationArgs and GetAllocationsAllocationOutput values.
// You can construct a concrete instance of `GetAllocationsAllocationInput` via:
//
//	GetAllocationsAllocationArgs{...}
type GetAllocationsAllocationInput interface {
	pulumi.Input

	ToGetAllocationsAllocationOutput() GetAllocationsAllocationOutput
	ToGetAllocationsAllocationOutputWithContext(context.Context) GetAllocationsAllocationOutput
}

type GetAllocationsAllocationArgs struct {
	// `(string)` - The current client status of the allocation.
	ClientStatus pulumi.StringInput `pulumi:"clientStatus"`
	// `(int)` - The Raft index in which the allocation was created.
	CreateIndex pulumi.IntInput `pulumi:"createIndex"`
	// `(int)` - The timestamp of when the allocation was created.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// `(string)` - The current desired status of the allocation.
	DesiredStatus pulumi.StringInput `pulumi:"desiredStatus"`
	// `(string)` - The ID of the evaluation that generated the allocation.
	EvalId pulumi.StringInput `pulumi:"evalId"`
	// `(string)` - The ID of the evaluation that succeeds the allocation evaluation.
	FollowupEvalId pulumi.StringInput `pulumi:"followupEvalId"`
	// `(string)` - The ID of the allocation.
	Id pulumi.StringInput `pulumi:"id"`
	// `(string)` - The ID of the job related to the allocation.
	JobId pulumi.StringInput `pulumi:"jobId"`
	// `(string)` - The type of the job related to the allocation.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// `(int)` - The version of the job that generated the allocation.
	JobVersion pulumi.IntInput `pulumi:"jobVersion"`
	// `(int)` - The Raft index in which the allocation was last modified.
	ModifyIndex pulumi.IntInput `pulumi:"modifyIndex"`
	// `(int)` - The timestamp of when the allocation was last modified.
	ModifyTime pulumi.IntInput `pulumi:"modifyTime"`
	// `(string)` - The name of the allocation.
	Name pulumi.StringInput `pulumi:"name"`
	// `(string: <optional>)` - Specifies the namespace to search for
	// allocations in.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// `(string)` - The ID of the allocation that succeeds the allocation.
	NextAllocation pulumi.StringInput `pulumi:"nextAllocation"`
	// `(string)` - The ID of the node to which the allocation was scheduled.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// `(string)` - The ID of the node to which the allocation was scheduled.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
	// `(string)` - The ID of the allocation that preempted the allocation.
	PreemptedByAllocation pulumi.StringInput `pulumi:"preemptedByAllocation"`
	// `(string)` - The job task group related to the allocation.
	TaskGroup pulumi.StringInput `pulumi:"taskGroup"`
}

func (GetAllocationsAllocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllocationsAllocation)(nil)).Elem()
}

func (i GetAllocationsAllocationArgs) ToGetAllocationsAllocationOutput() GetAllocationsAllocationOutput {
	return i.ToGetAllocationsAllocationOutputWithContext(context.Background())
}

func (i GetAllocationsAllocationArgs) ToGetAllocationsAllocationOutputWithContext(ctx context.Context) GetAllocationsAllocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllocationsAllocationOutput)
}

// GetAllocationsAllocationArrayInput is an input type that accepts GetAllocationsAllocationArray and GetAllocationsAllocationArrayOutput values.
// You can construct a concrete instance of `GetAllocationsAllocationArrayInput` via:
//
//	GetAllocationsAllocationArray{ GetAllocationsAllocationArgs{...} }
type GetAllocationsAllocationArrayInput interface {
	pulumi.Input

	ToGetAllocationsAllocationArrayOutput() GetAllocationsAllocationArrayOutput
	ToGetAllocationsAllocationArrayOutputWithContext(context.Context) GetAllocationsAllocationArrayOutput
}

type GetAllocationsAllocationArray []GetAllocationsAllocationInput

func (GetAllocationsAllocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllocationsAllocation)(nil)).Elem()
}

func (i GetAllocationsAllocationArray) ToGetAllocationsAllocationArrayOutput() GetAllocationsAllocationArrayOutput {
	return i.ToGetAllocationsAllocationArrayOutputWithContext(context.Background())
}

func (i GetAllocationsAllocationArray) ToGetAllocationsAllocationArrayOutputWithContext(ctx context.Context) GetAllocationsAllocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllocationsAllocationArrayOutput)
}

type GetAllocationsAllocationOutput struct{ *pulumi.OutputState }

func (GetAllocationsAllocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllocationsAllocation)(nil)).Elem()
}

func (o GetAllocationsAllocationOutput) ToGetAllocationsAllocationOutput() GetAllocationsAllocationOutput {
	return o
}

func (o GetAllocationsAllocationOutput) ToGetAllocationsAllocationOutputWithContext(ctx context.Context) GetAllocationsAllocationOutput {
	return o
}

// `(string)` - The current client status of the allocation.
func (o GetAllocationsAllocationOutput) ClientStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.ClientStatus }).(pulumi.StringOutput)
}

// `(int)` - The Raft index in which the allocation was created.
func (o GetAllocationsAllocationOutput) CreateIndex() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) int { return v.CreateIndex }).(pulumi.IntOutput)
}

// `(int)` - The timestamp of when the allocation was created.
func (o GetAllocationsAllocationOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) int { return v.CreateTime }).(pulumi.IntOutput)
}

// `(string)` - The current desired status of the allocation.
func (o GetAllocationsAllocationOutput) DesiredStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.DesiredStatus }).(pulumi.StringOutput)
}

// `(string)` - The ID of the evaluation that generated the allocation.
func (o GetAllocationsAllocationOutput) EvalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.EvalId }).(pulumi.StringOutput)
}

// `(string)` - The ID of the evaluation that succeeds the allocation evaluation.
func (o GetAllocationsAllocationOutput) FollowupEvalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.FollowupEvalId }).(pulumi.StringOutput)
}

// `(string)` - The ID of the allocation.
func (o GetAllocationsAllocationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.Id }).(pulumi.StringOutput)
}

// `(string)` - The ID of the job related to the allocation.
func (o GetAllocationsAllocationOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.JobId }).(pulumi.StringOutput)
}

// `(string)` - The type of the job related to the allocation.
func (o GetAllocationsAllocationOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.JobType }).(pulumi.StringOutput)
}

// `(int)` - The version of the job that generated the allocation.
func (o GetAllocationsAllocationOutput) JobVersion() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) int { return v.JobVersion }).(pulumi.IntOutput)
}

// `(int)` - The Raft index in which the allocation was last modified.
func (o GetAllocationsAllocationOutput) ModifyIndex() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) int { return v.ModifyIndex }).(pulumi.IntOutput)
}

// `(int)` - The timestamp of when the allocation was last modified.
func (o GetAllocationsAllocationOutput) ModifyTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) int { return v.ModifyTime }).(pulumi.IntOutput)
}

// `(string)` - The name of the allocation.
func (o GetAllocationsAllocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.Name }).(pulumi.StringOutput)
}

// `(string: <optional>)` - Specifies the namespace to search for
// allocations in.
func (o GetAllocationsAllocationOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.Namespace }).(pulumi.StringOutput)
}

// `(string)` - The ID of the allocation that succeeds the allocation.
func (o GetAllocationsAllocationOutput) NextAllocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.NextAllocation }).(pulumi.StringOutput)
}

// `(string)` - The ID of the node to which the allocation was scheduled.
func (o GetAllocationsAllocationOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.NodeId }).(pulumi.StringOutput)
}

// `(string)` - The ID of the node to which the allocation was scheduled.
func (o GetAllocationsAllocationOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.NodeName }).(pulumi.StringOutput)
}

// `(string)` - The ID of the allocation that preempted the allocation.
func (o GetAllocationsAllocationOutput) PreemptedByAllocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.PreemptedByAllocation }).(pulumi.StringOutput)
}

// `(string)` - The job task group related to the allocation.
func (o GetAllocationsAllocationOutput) TaskGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllocationsAllocation) string { return v.TaskGroup }).(pulumi.StringOutput)
}

type GetAllocationsAllocationArrayOutput struct{ *pulumi.OutputState }

func (GetAllocationsAllocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllocationsAllocation)(nil)).Elem()
}

func (o GetAllocationsAllocationArrayOutput) ToGetAllocationsAllocationArrayOutput() GetAllocationsAllocationArrayOutput {
	return o
}

func (o GetAllocationsAllocationArrayOutput) ToGetAllocationsAllocationArrayOutputWithContext(ctx context.Context) GetAllocationsAllocationArrayOutput {
	return o
}

func (o GetAllocationsAllocationArrayOutput) Index(i pulumi.IntInput) GetAllocationsAllocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAllocationsAllocation {
		return vs[0].([]GetAllocationsAllocation)[vs[1].(int)]
	}).(GetAllocationsAllocationOutput)
}

type GetDynamicHostVolumeCapability struct {
	// `(string)` - How the volume can be mounted by
	// allocations. Refer to the [`accessMode`][] documentation for details.
	AccessMode string `pulumi:"accessMode"`
	// `(string)` - The storage API that will be used by the
	// volume. Refer to the [`attachmentMode`][] documentation.
	AttachmentMode string `pulumi:"attachmentMode"`
}

// GetDynamicHostVolumeCapabilityInput is an input type that accepts GetDynamicHostVolumeCapabilityArgs and GetDynamicHostVolumeCapabilityOutput values.
// You can construct a concrete instance of `GetDynamicHostVolumeCapabilityInput` via:
//
//	GetDynamicHostVolumeCapabilityArgs{...}
type GetDynamicHostVolumeCapabilityInput interface {
	pulumi.Input

	ToGetDynamicHostVolumeCapabilityOutput() GetDynamicHostVolumeCapabilityOutput
	ToGetDynamicHostVolumeCapabilityOutputWithContext(context.Context) GetDynamicHostVolumeCapabilityOutput
}

type GetDynamicHostVolumeCapabilityArgs struct {
	// `(string)` - How the volume can be mounted by
	// allocations. Refer to the [`accessMode`][] documentation for details.
	AccessMode pulumi.StringInput `pulumi:"accessMode"`
	// `(string)` - The storage API that will be used by the
	// volume. Refer to the [`attachmentMode`][] documentation.
	AttachmentMode pulumi.StringInput `pulumi:"attachmentMode"`
}

func (GetDynamicHostVolumeCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDynamicHostVolumeCapability)(nil)).Elem()
}

func (i GetDynamicHostVolumeCapabilityArgs) ToGetDynamicHostVolumeCapabilityOutput() GetDynamicHostVolumeCapabilityOutput {
	return i.ToGetDynamicHostVolumeCapabilityOutputWithContext(context.Background())
}

func (i GetDynamicHostVolumeCapabilityArgs) ToGetDynamicHostVolumeCapabilityOutputWithContext(ctx context.Context) GetDynamicHostVolumeCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDynamicHostVolumeCapabilityOutput)
}

// GetDynamicHostVolumeCapabilityArrayInput is an input type that accepts GetDynamicHostVolumeCapabilityArray and GetDynamicHostVolumeCapabilityArrayOutput values.
// You can construct a concrete instance of `GetDynamicHostVolumeCapabilityArrayInput` via:
//
//	GetDynamicHostVolumeCapabilityArray{ GetDynamicHostVolumeCapabilityArgs{...} }
type GetDynamicHostVolumeCapabilityArrayInput interface {
	pulumi.Input

	ToGetDynamicHostVolumeCapabilityArrayOutput() GetDynamicHostVolumeCapabilityArrayOutput
	ToGetDynamicHostVolumeCapabilityArrayOutputWithContext(context.Context) GetDynamicHostVolumeCapabilityArrayOutput
}

type GetDynamicHostVolumeCapabilityArray []GetDynamicHostVolumeCapabilityInput

func (GetDynamicHostVolumeCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDynamicHostVolumeCapability)(nil)).Elem()
}

func (i GetDynamicHostVolumeCapabilityArray) ToGetDynamicHostVolumeCapabilityArrayOutput() GetDynamicHostVolumeCapabilityArrayOutput {
	return i.ToGetDynamicHostVolumeCapabilityArrayOutputWithContext(context.Background())
}

func (i GetDynamicHostVolumeCapabilityArray) ToGetDynamicHostVolumeCapabilityArrayOutputWithContext(ctx context.Context) GetDynamicHostVolumeCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDynamicHostVolumeCapabilityArrayOutput)
}

type GetDynamicHostVolumeCapabilityOutput struct{ *pulumi.OutputState }

func (GetDynamicHostVolumeCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDynamicHostVolumeCapability)(nil)).Elem()
}

func (o GetDynamicHostVolumeCapabilityOutput) ToGetDynamicHostVolumeCapabilityOutput() GetDynamicHostVolumeCapabilityOutput {
	return o
}

func (o GetDynamicHostVolumeCapabilityOutput) ToGetDynamicHostVolumeCapabilityOutputWithContext(ctx context.Context) GetDynamicHostVolumeCapabilityOutput {
	return o
}

// `(string)` - How the volume can be mounted by
// allocations. Refer to the [`accessMode`][] documentation for details.
func (o GetDynamicHostVolumeCapabilityOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetDynamicHostVolumeCapability) string { return v.AccessMode }).(pulumi.StringOutput)
}

// `(string)` - The storage API that will be used by the
// volume. Refer to the [`attachmentMode`][] documentation.
func (o GetDynamicHostVolumeCapabilityOutput) AttachmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetDynamicHostVolumeCapability) string { return v.AttachmentMode }).(pulumi.StringOutput)
}

type GetDynamicHostVolumeCapabilityArrayOutput struct{ *pulumi.OutputState }

func (GetDynamicHostVolumeCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDynamicHostVolumeCapability)(nil)).Elem()
}

func (o GetDynamicHostVolumeCapabilityArrayOutput) ToGetDynamicHostVolumeCapabilityArrayOutput() GetDynamicHostVolumeCapabilityArrayOutput {
	return o
}

func (o GetDynamicHostVolumeCapabilityArrayOutput) ToGetDynamicHostVolumeCapabilityArrayOutputWithContext(ctx context.Context) GetDynamicHostVolumeCapabilityArrayOutput {
	return o
}

func (o GetDynamicHostVolumeCapabilityArrayOutput) Index(i pulumi.IntInput) GetDynamicHostVolumeCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDynamicHostVolumeCapability {
		return vs[0].([]GetDynamicHostVolumeCapability)[vs[1].(int)]
	}).(GetDynamicHostVolumeCapabilityOutput)
}

type GetDynamicHostVolumeConstraint struct {
	// `(string)` - The [node attribute][] to check for the constraint.
	Attribute string `pulumi:"attribute"`
	// `(string)`- The operator to use in the comparison.
	Operator string `pulumi:"operator"`
	// `(string)` - The value of the attribute to compare against.
	Value string `pulumi:"value"`
}

// GetDynamicHostVolumeConstraintInput is an input type that accepts GetDynamicHostVolumeConstraintArgs and GetDynamicHostVolumeConstraintOutput values.
// You can construct a concrete instance of `GetDynamicHostVolumeConstraintInput` via:
//
//	GetDynamicHostVolumeConstraintArgs{...}
type GetDynamicHostVolumeConstraintInput interface {
	pulumi.Input

	ToGetDynamicHostVolumeConstraintOutput() GetDynamicHostVolumeConstraintOutput
	ToGetDynamicHostVolumeConstraintOutputWithContext(context.Context) GetDynamicHostVolumeConstraintOutput
}

type GetDynamicHostVolumeConstraintArgs struct {
	// `(string)` - The [node attribute][] to check for the constraint.
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// `(string)`- The operator to use in the comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// `(string)` - The value of the attribute to compare against.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDynamicHostVolumeConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDynamicHostVolumeConstraint)(nil)).Elem()
}

func (i GetDynamicHostVolumeConstraintArgs) ToGetDynamicHostVolumeConstraintOutput() GetDynamicHostVolumeConstraintOutput {
	return i.ToGetDynamicHostVolumeConstraintOutputWithContext(context.Background())
}

func (i GetDynamicHostVolumeConstraintArgs) ToGetDynamicHostVolumeConstraintOutputWithContext(ctx context.Context) GetDynamicHostVolumeConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDynamicHostVolumeConstraintOutput)
}

// GetDynamicHostVolumeConstraintArrayInput is an input type that accepts GetDynamicHostVolumeConstraintArray and GetDynamicHostVolumeConstraintArrayOutput values.
// You can construct a concrete instance of `GetDynamicHostVolumeConstraintArrayInput` via:
//
//	GetDynamicHostVolumeConstraintArray{ GetDynamicHostVolumeConstraintArgs{...} }
type GetDynamicHostVolumeConstraintArrayInput interface {
	pulumi.Input

	ToGetDynamicHostVolumeConstraintArrayOutput() GetDynamicHostVolumeConstraintArrayOutput
	ToGetDynamicHostVolumeConstraintArrayOutputWithContext(context.Context) GetDynamicHostVolumeConstraintArrayOutput
}

type GetDynamicHostVolumeConstraintArray []GetDynamicHostVolumeConstraintInput

func (GetDynamicHostVolumeConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDynamicHostVolumeConstraint)(nil)).Elem()
}

func (i GetDynamicHostVolumeConstraintArray) ToGetDynamicHostVolumeConstraintArrayOutput() GetDynamicHostVolumeConstraintArrayOutput {
	return i.ToGetDynamicHostVolumeConstraintArrayOutputWithContext(context.Background())
}

func (i GetDynamicHostVolumeConstraintArray) ToGetDynamicHostVolumeConstraintArrayOutputWithContext(ctx context.Context) GetDynamicHostVolumeConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDynamicHostVolumeConstraintArrayOutput)
}

type GetDynamicHostVolumeConstraintOutput struct{ *pulumi.OutputState }

func (GetDynamicHostVolumeConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDynamicHostVolumeConstraint)(nil)).Elem()
}

func (o GetDynamicHostVolumeConstraintOutput) ToGetDynamicHostVolumeConstraintOutput() GetDynamicHostVolumeConstraintOutput {
	return o
}

func (o GetDynamicHostVolumeConstraintOutput) ToGetDynamicHostVolumeConstraintOutputWithContext(ctx context.Context) GetDynamicHostVolumeConstraintOutput {
	return o
}

// `(string)` - The [node attribute][] to check for the constraint.
func (o GetDynamicHostVolumeConstraintOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v GetDynamicHostVolumeConstraint) string { return v.Attribute }).(pulumi.StringOutput)
}

// `(string)`- The operator to use in the comparison.
func (o GetDynamicHostVolumeConstraintOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetDynamicHostVolumeConstraint) string { return v.Operator }).(pulumi.StringOutput)
}

// `(string)` - The value of the attribute to compare against.
func (o GetDynamicHostVolumeConstraintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDynamicHostVolumeConstraint) string { return v.Value }).(pulumi.StringOutput)
}

type GetDynamicHostVolumeConstraintArrayOutput struct{ *pulumi.OutputState }

func (GetDynamicHostVolumeConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDynamicHostVolumeConstraint)(nil)).Elem()
}

func (o GetDynamicHostVolumeConstraintArrayOutput) ToGetDynamicHostVolumeConstraintArrayOutput() GetDynamicHostVolumeConstraintArrayOutput {
	return o
}

func (o GetDynamicHostVolumeConstraintArrayOutput) ToGetDynamicHostVolumeConstraintArrayOutputWithContext(ctx context.Context) GetDynamicHostVolumeConstraintArrayOutput {
	return o
}

func (o GetDynamicHostVolumeConstraintArrayOutput) Index(i pulumi.IntInput) GetDynamicHostVolumeConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDynamicHostVolumeConstraint {
		return vs[0].([]GetDynamicHostVolumeConstraint)[vs[1].(int)]
	}).(GetDynamicHostVolumeConstraintOutput)
}

type GetJobConstraint struct {
	// `(string)` Attribute being constrained.
	Ltarget string `pulumi:"ltarget"`
	// `(string)` Operator used to compare the attribute to the constraint.
	Operand string `pulumi:"operand"`
	// `(string)` Constraint value.
	Rtarget string `pulumi:"rtarget"`
}

// GetJobConstraintInput is an input type that accepts GetJobConstraintArgs and GetJobConstraintOutput values.
// You can construct a concrete instance of `GetJobConstraintInput` via:
//
//	GetJobConstraintArgs{...}
type GetJobConstraintInput interface {
	pulumi.Input

	ToGetJobConstraintOutput() GetJobConstraintOutput
	ToGetJobConstraintOutputWithContext(context.Context) GetJobConstraintOutput
}

type GetJobConstraintArgs struct {
	// `(string)` Attribute being constrained.
	Ltarget pulumi.StringInput `pulumi:"ltarget"`
	// `(string)` Operator used to compare the attribute to the constraint.
	Operand pulumi.StringInput `pulumi:"operand"`
	// `(string)` Constraint value.
	Rtarget pulumi.StringInput `pulumi:"rtarget"`
}

func (GetJobConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobConstraint)(nil)).Elem()
}

func (i GetJobConstraintArgs) ToGetJobConstraintOutput() GetJobConstraintOutput {
	return i.ToGetJobConstraintOutputWithContext(context.Background())
}

func (i GetJobConstraintArgs) ToGetJobConstraintOutputWithContext(ctx context.Context) GetJobConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobConstraintOutput)
}

// GetJobConstraintArrayInput is an input type that accepts GetJobConstraintArray and GetJobConstraintArrayOutput values.
// You can construct a concrete instance of `GetJobConstraintArrayInput` via:
//
//	GetJobConstraintArray{ GetJobConstraintArgs{...} }
type GetJobConstraintArrayInput interface {
	pulumi.Input

	ToGetJobConstraintArrayOutput() GetJobConstraintArrayOutput
	ToGetJobConstraintArrayOutputWithContext(context.Context) GetJobConstraintArrayOutput
}

type GetJobConstraintArray []GetJobConstraintInput

func (GetJobConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobConstraint)(nil)).Elem()
}

func (i GetJobConstraintArray) ToGetJobConstraintArrayOutput() GetJobConstraintArrayOutput {
	return i.ToGetJobConstraintArrayOutputWithContext(context.Background())
}

func (i GetJobConstraintArray) ToGetJobConstraintArrayOutputWithContext(ctx context.Context) GetJobConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobConstraintArrayOutput)
}

type GetJobConstraintOutput struct{ *pulumi.OutputState }

func (GetJobConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobConstraint)(nil)).Elem()
}

func (o GetJobConstraintOutput) ToGetJobConstraintOutput() GetJobConstraintOutput {
	return o
}

func (o GetJobConstraintOutput) ToGetJobConstraintOutputWithContext(ctx context.Context) GetJobConstraintOutput {
	return o
}

// `(string)` Attribute being constrained.
func (o GetJobConstraintOutput) Ltarget() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobConstraint) string { return v.Ltarget }).(pulumi.StringOutput)
}

// `(string)` Operator used to compare the attribute to the constraint.
func (o GetJobConstraintOutput) Operand() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobConstraint) string { return v.Operand }).(pulumi.StringOutput)
}

// `(string)` Constraint value.
func (o GetJobConstraintOutput) Rtarget() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobConstraint) string { return v.Rtarget }).(pulumi.StringOutput)
}

type GetJobConstraintArrayOutput struct{ *pulumi.OutputState }

func (GetJobConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobConstraint)(nil)).Elem()
}

func (o GetJobConstraintArrayOutput) ToGetJobConstraintArrayOutput() GetJobConstraintArrayOutput {
	return o
}

func (o GetJobConstraintArrayOutput) ToGetJobConstraintArrayOutputWithContext(ctx context.Context) GetJobConstraintArrayOutput {
	return o
}

func (o GetJobConstraintArrayOutput) Index(i pulumi.IntInput) GetJobConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobConstraint {
		return vs[0].([]GetJobConstraint)[vs[1].(int)]
	}).(GetJobConstraintOutput)
}

type GetJobPeriodicConfig struct {
	// `(boolean)` If periodic scheduling is enabled for the specified job.
	Enabled bool `pulumi:"enabled"`
	// `(boolean)`  If the specified job should wait until previous instances of the job have completed.
	ProhibitOverlap bool `pulumi:"prohibitOverlap"`
	// `(string)`
	Spec string `pulumi:"spec"`
	// `(string)`
	SpecType string `pulumi:"specType"`
	// `(string)` Time zone to evaluate the next launch interval against.
	Timezone string `pulumi:"timezone"`
}

// GetJobPeriodicConfigInput is an input type that accepts GetJobPeriodicConfigArgs and GetJobPeriodicConfigOutput values.
// You can construct a concrete instance of `GetJobPeriodicConfigInput` via:
//
//	GetJobPeriodicConfigArgs{...}
type GetJobPeriodicConfigInput interface {
	pulumi.Input

	ToGetJobPeriodicConfigOutput() GetJobPeriodicConfigOutput
	ToGetJobPeriodicConfigOutputWithContext(context.Context) GetJobPeriodicConfigOutput
}

type GetJobPeriodicConfigArgs struct {
	// `(boolean)` If periodic scheduling is enabled for the specified job.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// `(boolean)`  If the specified job should wait until previous instances of the job have completed.
	ProhibitOverlap pulumi.BoolInput `pulumi:"prohibitOverlap"`
	// `(string)`
	Spec pulumi.StringInput `pulumi:"spec"`
	// `(string)`
	SpecType pulumi.StringInput `pulumi:"specType"`
	// `(string)` Time zone to evaluate the next launch interval against.
	Timezone pulumi.StringInput `pulumi:"timezone"`
}

func (GetJobPeriodicConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobPeriodicConfig)(nil)).Elem()
}

func (i GetJobPeriodicConfigArgs) ToGetJobPeriodicConfigOutput() GetJobPeriodicConfigOutput {
	return i.ToGetJobPeriodicConfigOutputWithContext(context.Background())
}

func (i GetJobPeriodicConfigArgs) ToGetJobPeriodicConfigOutputWithContext(ctx context.Context) GetJobPeriodicConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobPeriodicConfigOutput)
}

// GetJobPeriodicConfigArrayInput is an input type that accepts GetJobPeriodicConfigArray and GetJobPeriodicConfigArrayOutput values.
// You can construct a concrete instance of `GetJobPeriodicConfigArrayInput` via:
//
//	GetJobPeriodicConfigArray{ GetJobPeriodicConfigArgs{...} }
type GetJobPeriodicConfigArrayInput interface {
	pulumi.Input

	ToGetJobPeriodicConfigArrayOutput() GetJobPeriodicConfigArrayOutput
	ToGetJobPeriodicConfigArrayOutputWithContext(context.Context) GetJobPeriodicConfigArrayOutput
}

type GetJobPeriodicConfigArray []GetJobPeriodicConfigInput

func (GetJobPeriodicConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobPeriodicConfig)(nil)).Elem()
}

func (i GetJobPeriodicConfigArray) ToGetJobPeriodicConfigArrayOutput() GetJobPeriodicConfigArrayOutput {
	return i.ToGetJobPeriodicConfigArrayOutputWithContext(context.Background())
}

func (i GetJobPeriodicConfigArray) ToGetJobPeriodicConfigArrayOutputWithContext(ctx context.Context) GetJobPeriodicConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobPeriodicConfigArrayOutput)
}

type GetJobPeriodicConfigOutput struct{ *pulumi.OutputState }

func (GetJobPeriodicConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobPeriodicConfig)(nil)).Elem()
}

func (o GetJobPeriodicConfigOutput) ToGetJobPeriodicConfigOutput() GetJobPeriodicConfigOutput {
	return o
}

func (o GetJobPeriodicConfigOutput) ToGetJobPeriodicConfigOutputWithContext(ctx context.Context) GetJobPeriodicConfigOutput {
	return o
}

// `(boolean)` If periodic scheduling is enabled for the specified job.
func (o GetJobPeriodicConfigOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobPeriodicConfig) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// `(boolean)`  If the specified job should wait until previous instances of the job have completed.
func (o GetJobPeriodicConfigOutput) ProhibitOverlap() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobPeriodicConfig) bool { return v.ProhibitOverlap }).(pulumi.BoolOutput)
}

// `(string)`
func (o GetJobPeriodicConfigOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobPeriodicConfig) string { return v.Spec }).(pulumi.StringOutput)
}

// `(string)`
func (o GetJobPeriodicConfigOutput) SpecType() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobPeriodicConfig) string { return v.SpecType }).(pulumi.StringOutput)
}

// `(string)` Time zone to evaluate the next launch interval against.
func (o GetJobPeriodicConfigOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobPeriodicConfig) string { return v.Timezone }).(pulumi.StringOutput)
}

type GetJobPeriodicConfigArrayOutput struct{ *pulumi.OutputState }

func (GetJobPeriodicConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobPeriodicConfig)(nil)).Elem()
}

func (o GetJobPeriodicConfigArrayOutput) ToGetJobPeriodicConfigArrayOutput() GetJobPeriodicConfigArrayOutput {
	return o
}

func (o GetJobPeriodicConfigArrayOutput) ToGetJobPeriodicConfigArrayOutputWithContext(ctx context.Context) GetJobPeriodicConfigArrayOutput {
	return o
}

func (o GetJobPeriodicConfigArrayOutput) Index(i pulumi.IntInput) GetJobPeriodicConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobPeriodicConfig {
		return vs[0].([]GetJobPeriodicConfig)[vs[1].(int)]
	}).(GetJobPeriodicConfigOutput)
}

type GetJobTaskGroup struct {
	Count int               `pulumi:"count"`
	Meta  map[string]string `pulumi:"meta"`
	// `(string)` Name of the job.
	Name    string                  `pulumi:"name"`
	Tasks   []GetJobTaskGroupTask   `pulumi:"tasks"`
	Volumes []GetJobTaskGroupVolume `pulumi:"volumes"`
}

// GetJobTaskGroupInput is an input type that accepts GetJobTaskGroupArgs and GetJobTaskGroupOutput values.
// You can construct a concrete instance of `GetJobTaskGroupInput` via:
//
//	GetJobTaskGroupArgs{...}
type GetJobTaskGroupInput interface {
	pulumi.Input

	ToGetJobTaskGroupOutput() GetJobTaskGroupOutput
	ToGetJobTaskGroupOutputWithContext(context.Context) GetJobTaskGroupOutput
}

type GetJobTaskGroupArgs struct {
	Count pulumi.IntInput       `pulumi:"count"`
	Meta  pulumi.StringMapInput `pulumi:"meta"`
	// `(string)` Name of the job.
	Name    pulumi.StringInput              `pulumi:"name"`
	Tasks   GetJobTaskGroupTaskArrayInput   `pulumi:"tasks"`
	Volumes GetJobTaskGroupVolumeArrayInput `pulumi:"volumes"`
}

func (GetJobTaskGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroup)(nil)).Elem()
}

func (i GetJobTaskGroupArgs) ToGetJobTaskGroupOutput() GetJobTaskGroupOutput {
	return i.ToGetJobTaskGroupOutputWithContext(context.Background())
}

func (i GetJobTaskGroupArgs) ToGetJobTaskGroupOutputWithContext(ctx context.Context) GetJobTaskGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupOutput)
}

// GetJobTaskGroupArrayInput is an input type that accepts GetJobTaskGroupArray and GetJobTaskGroupArrayOutput values.
// You can construct a concrete instance of `GetJobTaskGroupArrayInput` via:
//
//	GetJobTaskGroupArray{ GetJobTaskGroupArgs{...} }
type GetJobTaskGroupArrayInput interface {
	pulumi.Input

	ToGetJobTaskGroupArrayOutput() GetJobTaskGroupArrayOutput
	ToGetJobTaskGroupArrayOutputWithContext(context.Context) GetJobTaskGroupArrayOutput
}

type GetJobTaskGroupArray []GetJobTaskGroupInput

func (GetJobTaskGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroup)(nil)).Elem()
}

func (i GetJobTaskGroupArray) ToGetJobTaskGroupArrayOutput() GetJobTaskGroupArrayOutput {
	return i.ToGetJobTaskGroupArrayOutputWithContext(context.Background())
}

func (i GetJobTaskGroupArray) ToGetJobTaskGroupArrayOutputWithContext(ctx context.Context) GetJobTaskGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupArrayOutput)
}

type GetJobTaskGroupOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroup)(nil)).Elem()
}

func (o GetJobTaskGroupOutput) ToGetJobTaskGroupOutput() GetJobTaskGroupOutput {
	return o
}

func (o GetJobTaskGroupOutput) ToGetJobTaskGroupOutputWithContext(ctx context.Context) GetJobTaskGroupOutput {
	return o
}

func (o GetJobTaskGroupOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobTaskGroup) int { return v.Count }).(pulumi.IntOutput)
}

func (o GetJobTaskGroupOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetJobTaskGroup) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

// `(string)` Name of the job.
func (o GetJobTaskGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupOutput) Tasks() GetJobTaskGroupTaskArrayOutput {
	return o.ApplyT(func(v GetJobTaskGroup) []GetJobTaskGroupTask { return v.Tasks }).(GetJobTaskGroupTaskArrayOutput)
}

func (o GetJobTaskGroupOutput) Volumes() GetJobTaskGroupVolumeArrayOutput {
	return o.ApplyT(func(v GetJobTaskGroup) []GetJobTaskGroupVolume { return v.Volumes }).(GetJobTaskGroupVolumeArrayOutput)
}

type GetJobTaskGroupArrayOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroup)(nil)).Elem()
}

func (o GetJobTaskGroupArrayOutput) ToGetJobTaskGroupArrayOutput() GetJobTaskGroupArrayOutput {
	return o
}

func (o GetJobTaskGroupArrayOutput) ToGetJobTaskGroupArrayOutputWithContext(ctx context.Context) GetJobTaskGroupArrayOutput {
	return o
}

func (o GetJobTaskGroupArrayOutput) Index(i pulumi.IntInput) GetJobTaskGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobTaskGroup {
		return vs[0].([]GetJobTaskGroup)[vs[1].(int)]
	}).(GetJobTaskGroupOutput)
}

type GetJobTaskGroupTask struct {
	Driver string            `pulumi:"driver"`
	Meta   map[string]string `pulumi:"meta"`
	// `(string)` Name of the job.
	Name         string                           `pulumi:"name"`
	VolumeMounts []GetJobTaskGroupTaskVolumeMount `pulumi:"volumeMounts"`
}

// GetJobTaskGroupTaskInput is an input type that accepts GetJobTaskGroupTaskArgs and GetJobTaskGroupTaskOutput values.
// You can construct a concrete instance of `GetJobTaskGroupTaskInput` via:
//
//	GetJobTaskGroupTaskArgs{...}
type GetJobTaskGroupTaskInput interface {
	pulumi.Input

	ToGetJobTaskGroupTaskOutput() GetJobTaskGroupTaskOutput
	ToGetJobTaskGroupTaskOutputWithContext(context.Context) GetJobTaskGroupTaskOutput
}

type GetJobTaskGroupTaskArgs struct {
	Driver pulumi.StringInput    `pulumi:"driver"`
	Meta   pulumi.StringMapInput `pulumi:"meta"`
	// `(string)` Name of the job.
	Name         pulumi.StringInput                       `pulumi:"name"`
	VolumeMounts GetJobTaskGroupTaskVolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (GetJobTaskGroupTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupTask)(nil)).Elem()
}

func (i GetJobTaskGroupTaskArgs) ToGetJobTaskGroupTaskOutput() GetJobTaskGroupTaskOutput {
	return i.ToGetJobTaskGroupTaskOutputWithContext(context.Background())
}

func (i GetJobTaskGroupTaskArgs) ToGetJobTaskGroupTaskOutputWithContext(ctx context.Context) GetJobTaskGroupTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupTaskOutput)
}

// GetJobTaskGroupTaskArrayInput is an input type that accepts GetJobTaskGroupTaskArray and GetJobTaskGroupTaskArrayOutput values.
// You can construct a concrete instance of `GetJobTaskGroupTaskArrayInput` via:
//
//	GetJobTaskGroupTaskArray{ GetJobTaskGroupTaskArgs{...} }
type GetJobTaskGroupTaskArrayInput interface {
	pulumi.Input

	ToGetJobTaskGroupTaskArrayOutput() GetJobTaskGroupTaskArrayOutput
	ToGetJobTaskGroupTaskArrayOutputWithContext(context.Context) GetJobTaskGroupTaskArrayOutput
}

type GetJobTaskGroupTaskArray []GetJobTaskGroupTaskInput

func (GetJobTaskGroupTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupTask)(nil)).Elem()
}

func (i GetJobTaskGroupTaskArray) ToGetJobTaskGroupTaskArrayOutput() GetJobTaskGroupTaskArrayOutput {
	return i.ToGetJobTaskGroupTaskArrayOutputWithContext(context.Background())
}

func (i GetJobTaskGroupTaskArray) ToGetJobTaskGroupTaskArrayOutputWithContext(ctx context.Context) GetJobTaskGroupTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupTaskArrayOutput)
}

type GetJobTaskGroupTaskOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupTask)(nil)).Elem()
}

func (o GetJobTaskGroupTaskOutput) ToGetJobTaskGroupTaskOutput() GetJobTaskGroupTaskOutput {
	return o
}

func (o GetJobTaskGroupTaskOutput) ToGetJobTaskGroupTaskOutputWithContext(ctx context.Context) GetJobTaskGroupTaskOutput {
	return o
}

func (o GetJobTaskGroupTaskOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupTask) string { return v.Driver }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupTaskOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetJobTaskGroupTask) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

// `(string)` Name of the job.
func (o GetJobTaskGroupTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupTask) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupTaskOutput) VolumeMounts() GetJobTaskGroupTaskVolumeMountArrayOutput {
	return o.ApplyT(func(v GetJobTaskGroupTask) []GetJobTaskGroupTaskVolumeMount { return v.VolumeMounts }).(GetJobTaskGroupTaskVolumeMountArrayOutput)
}

type GetJobTaskGroupTaskArrayOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupTask)(nil)).Elem()
}

func (o GetJobTaskGroupTaskArrayOutput) ToGetJobTaskGroupTaskArrayOutput() GetJobTaskGroupTaskArrayOutput {
	return o
}

func (o GetJobTaskGroupTaskArrayOutput) ToGetJobTaskGroupTaskArrayOutputWithContext(ctx context.Context) GetJobTaskGroupTaskArrayOutput {
	return o
}

func (o GetJobTaskGroupTaskArrayOutput) Index(i pulumi.IntInput) GetJobTaskGroupTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobTaskGroupTask {
		return vs[0].([]GetJobTaskGroupTask)[vs[1].(int)]
	}).(GetJobTaskGroupTaskOutput)
}

type GetJobTaskGroupTaskVolumeMount struct {
	Destination string `pulumi:"destination"`
	ReadOnly    bool   `pulumi:"readOnly"`
	Volume      string `pulumi:"volume"`
}

// GetJobTaskGroupTaskVolumeMountInput is an input type that accepts GetJobTaskGroupTaskVolumeMountArgs and GetJobTaskGroupTaskVolumeMountOutput values.
// You can construct a concrete instance of `GetJobTaskGroupTaskVolumeMountInput` via:
//
//	GetJobTaskGroupTaskVolumeMountArgs{...}
type GetJobTaskGroupTaskVolumeMountInput interface {
	pulumi.Input

	ToGetJobTaskGroupTaskVolumeMountOutput() GetJobTaskGroupTaskVolumeMountOutput
	ToGetJobTaskGroupTaskVolumeMountOutputWithContext(context.Context) GetJobTaskGroupTaskVolumeMountOutput
}

type GetJobTaskGroupTaskVolumeMountArgs struct {
	Destination pulumi.StringInput `pulumi:"destination"`
	ReadOnly    pulumi.BoolInput   `pulumi:"readOnly"`
	Volume      pulumi.StringInput `pulumi:"volume"`
}

func (GetJobTaskGroupTaskVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (i GetJobTaskGroupTaskVolumeMountArgs) ToGetJobTaskGroupTaskVolumeMountOutput() GetJobTaskGroupTaskVolumeMountOutput {
	return i.ToGetJobTaskGroupTaskVolumeMountOutputWithContext(context.Background())
}

func (i GetJobTaskGroupTaskVolumeMountArgs) ToGetJobTaskGroupTaskVolumeMountOutputWithContext(ctx context.Context) GetJobTaskGroupTaskVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupTaskVolumeMountOutput)
}

// GetJobTaskGroupTaskVolumeMountArrayInput is an input type that accepts GetJobTaskGroupTaskVolumeMountArray and GetJobTaskGroupTaskVolumeMountArrayOutput values.
// You can construct a concrete instance of `GetJobTaskGroupTaskVolumeMountArrayInput` via:
//
//	GetJobTaskGroupTaskVolumeMountArray{ GetJobTaskGroupTaskVolumeMountArgs{...} }
type GetJobTaskGroupTaskVolumeMountArrayInput interface {
	pulumi.Input

	ToGetJobTaskGroupTaskVolumeMountArrayOutput() GetJobTaskGroupTaskVolumeMountArrayOutput
	ToGetJobTaskGroupTaskVolumeMountArrayOutputWithContext(context.Context) GetJobTaskGroupTaskVolumeMountArrayOutput
}

type GetJobTaskGroupTaskVolumeMountArray []GetJobTaskGroupTaskVolumeMountInput

func (GetJobTaskGroupTaskVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (i GetJobTaskGroupTaskVolumeMountArray) ToGetJobTaskGroupTaskVolumeMountArrayOutput() GetJobTaskGroupTaskVolumeMountArrayOutput {
	return i.ToGetJobTaskGroupTaskVolumeMountArrayOutputWithContext(context.Background())
}

func (i GetJobTaskGroupTaskVolumeMountArray) ToGetJobTaskGroupTaskVolumeMountArrayOutputWithContext(ctx context.Context) GetJobTaskGroupTaskVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupTaskVolumeMountArrayOutput)
}

type GetJobTaskGroupTaskVolumeMountOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupTaskVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (o GetJobTaskGroupTaskVolumeMountOutput) ToGetJobTaskGroupTaskVolumeMountOutput() GetJobTaskGroupTaskVolumeMountOutput {
	return o
}

func (o GetJobTaskGroupTaskVolumeMountOutput) ToGetJobTaskGroupTaskVolumeMountOutputWithContext(ctx context.Context) GetJobTaskGroupTaskVolumeMountOutput {
	return o
}

func (o GetJobTaskGroupTaskVolumeMountOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupTaskVolumeMount) string { return v.Destination }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupTaskVolumeMountOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobTaskGroupTaskVolumeMount) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

func (o GetJobTaskGroupTaskVolumeMountOutput) Volume() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupTaskVolumeMount) string { return v.Volume }).(pulumi.StringOutput)
}

type GetJobTaskGroupTaskVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupTaskVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupTaskVolumeMount)(nil)).Elem()
}

func (o GetJobTaskGroupTaskVolumeMountArrayOutput) ToGetJobTaskGroupTaskVolumeMountArrayOutput() GetJobTaskGroupTaskVolumeMountArrayOutput {
	return o
}

func (o GetJobTaskGroupTaskVolumeMountArrayOutput) ToGetJobTaskGroupTaskVolumeMountArrayOutputWithContext(ctx context.Context) GetJobTaskGroupTaskVolumeMountArrayOutput {
	return o
}

func (o GetJobTaskGroupTaskVolumeMountArrayOutput) Index(i pulumi.IntInput) GetJobTaskGroupTaskVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobTaskGroupTaskVolumeMount {
		return vs[0].([]GetJobTaskGroupTaskVolumeMount)[vs[1].(int)]
	}).(GetJobTaskGroupTaskVolumeMountOutput)
}

type GetJobTaskGroupVolume struct {
	// `(string)` Name of the job.
	Name     string `pulumi:"name"`
	ReadOnly bool   `pulumi:"readOnly"`
	Source   string `pulumi:"source"`
	// `(string)` Scheduler type used during job creation.
	Type string `pulumi:"type"`
}

// GetJobTaskGroupVolumeInput is an input type that accepts GetJobTaskGroupVolumeArgs and GetJobTaskGroupVolumeOutput values.
// You can construct a concrete instance of `GetJobTaskGroupVolumeInput` via:
//
//	GetJobTaskGroupVolumeArgs{...}
type GetJobTaskGroupVolumeInput interface {
	pulumi.Input

	ToGetJobTaskGroupVolumeOutput() GetJobTaskGroupVolumeOutput
	ToGetJobTaskGroupVolumeOutputWithContext(context.Context) GetJobTaskGroupVolumeOutput
}

type GetJobTaskGroupVolumeArgs struct {
	// `(string)` Name of the job.
	Name     pulumi.StringInput `pulumi:"name"`
	ReadOnly pulumi.BoolInput   `pulumi:"readOnly"`
	Source   pulumi.StringInput `pulumi:"source"`
	// `(string)` Scheduler type used during job creation.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetJobTaskGroupVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupVolume)(nil)).Elem()
}

func (i GetJobTaskGroupVolumeArgs) ToGetJobTaskGroupVolumeOutput() GetJobTaskGroupVolumeOutput {
	return i.ToGetJobTaskGroupVolumeOutputWithContext(context.Background())
}

func (i GetJobTaskGroupVolumeArgs) ToGetJobTaskGroupVolumeOutputWithContext(ctx context.Context) GetJobTaskGroupVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupVolumeOutput)
}

// GetJobTaskGroupVolumeArrayInput is an input type that accepts GetJobTaskGroupVolumeArray and GetJobTaskGroupVolumeArrayOutput values.
// You can construct a concrete instance of `GetJobTaskGroupVolumeArrayInput` via:
//
//	GetJobTaskGroupVolumeArray{ GetJobTaskGroupVolumeArgs{...} }
type GetJobTaskGroupVolumeArrayInput interface {
	pulumi.Input

	ToGetJobTaskGroupVolumeArrayOutput() GetJobTaskGroupVolumeArrayOutput
	ToGetJobTaskGroupVolumeArrayOutputWithContext(context.Context) GetJobTaskGroupVolumeArrayOutput
}

type GetJobTaskGroupVolumeArray []GetJobTaskGroupVolumeInput

func (GetJobTaskGroupVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupVolume)(nil)).Elem()
}

func (i GetJobTaskGroupVolumeArray) ToGetJobTaskGroupVolumeArrayOutput() GetJobTaskGroupVolumeArrayOutput {
	return i.ToGetJobTaskGroupVolumeArrayOutputWithContext(context.Background())
}

func (i GetJobTaskGroupVolumeArray) ToGetJobTaskGroupVolumeArrayOutputWithContext(ctx context.Context) GetJobTaskGroupVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobTaskGroupVolumeArrayOutput)
}

type GetJobTaskGroupVolumeOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobTaskGroupVolume)(nil)).Elem()
}

func (o GetJobTaskGroupVolumeOutput) ToGetJobTaskGroupVolumeOutput() GetJobTaskGroupVolumeOutput {
	return o
}

func (o GetJobTaskGroupVolumeOutput) ToGetJobTaskGroupVolumeOutputWithContext(ctx context.Context) GetJobTaskGroupVolumeOutput {
	return o
}

// `(string)` Name of the job.
func (o GetJobTaskGroupVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupVolume) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetJobTaskGroupVolumeOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetJobTaskGroupVolume) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

func (o GetJobTaskGroupVolumeOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupVolume) string { return v.Source }).(pulumi.StringOutput)
}

// `(string)` Scheduler type used during job creation.
func (o GetJobTaskGroupVolumeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobTaskGroupVolume) string { return v.Type }).(pulumi.StringOutput)
}

type GetJobTaskGroupVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetJobTaskGroupVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobTaskGroupVolume)(nil)).Elem()
}

func (o GetJobTaskGroupVolumeArrayOutput) ToGetJobTaskGroupVolumeArrayOutput() GetJobTaskGroupVolumeArrayOutput {
	return o
}

func (o GetJobTaskGroupVolumeArrayOutput) ToGetJobTaskGroupVolumeArrayOutputWithContext(ctx context.Context) GetJobTaskGroupVolumeArrayOutput {
	return o
}

func (o GetJobTaskGroupVolumeArrayOutput) Index(i pulumi.IntInput) GetJobTaskGroupVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobTaskGroupVolume {
		return vs[0].([]GetJobTaskGroupVolume)[vs[1].(int)]
	}).(GetJobTaskGroupVolumeOutput)
}

type GetJwksKey struct {
	// `(string)` - JWK field `alg`
	Algorithm string `pulumi:"algorithm"`
	// `(string)` - JWK field `e`
	Exponent string `pulumi:"exponent"`
	// `(string)` - JWK field `kid`
	KeyId string `pulumi:"keyId"`
	// `(string)` - JWK field `kty`
	KeyType string `pulumi:"keyType"`
	// `(string)` - JWK field `use`
	KeyUse string `pulumi:"keyUse"`
	// `(string)` - JWK field `n`
	Modulus string `pulumi:"modulus"`
}

// GetJwksKeyInput is an input type that accepts GetJwksKeyArgs and GetJwksKeyOutput values.
// You can construct a concrete instance of `GetJwksKeyInput` via:
//
//	GetJwksKeyArgs{...}
type GetJwksKeyInput interface {
	pulumi.Input

	ToGetJwksKeyOutput() GetJwksKeyOutput
	ToGetJwksKeyOutputWithContext(context.Context) GetJwksKeyOutput
}

type GetJwksKeyArgs struct {
	// `(string)` - JWK field `alg`
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// `(string)` - JWK field `e`
	Exponent pulumi.StringInput `pulumi:"exponent"`
	// `(string)` - JWK field `kid`
	KeyId pulumi.StringInput `pulumi:"keyId"`
	// `(string)` - JWK field `kty`
	KeyType pulumi.StringInput `pulumi:"keyType"`
	// `(string)` - JWK field `use`
	KeyUse pulumi.StringInput `pulumi:"keyUse"`
	// `(string)` - JWK field `n`
	Modulus pulumi.StringInput `pulumi:"modulus"`
}

func (GetJwksKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJwksKey)(nil)).Elem()
}

func (i GetJwksKeyArgs) ToGetJwksKeyOutput() GetJwksKeyOutput {
	return i.ToGetJwksKeyOutputWithContext(context.Background())
}

func (i GetJwksKeyArgs) ToGetJwksKeyOutputWithContext(ctx context.Context) GetJwksKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJwksKeyOutput)
}

// GetJwksKeyArrayInput is an input type that accepts GetJwksKeyArray and GetJwksKeyArrayOutput values.
// You can construct a concrete instance of `GetJwksKeyArrayInput` via:
//
//	GetJwksKeyArray{ GetJwksKeyArgs{...} }
type GetJwksKeyArrayInput interface {
	pulumi.Input

	ToGetJwksKeyArrayOutput() GetJwksKeyArrayOutput
	ToGetJwksKeyArrayOutputWithContext(context.Context) GetJwksKeyArrayOutput
}

type GetJwksKeyArray []GetJwksKeyInput

func (GetJwksKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJwksKey)(nil)).Elem()
}

func (i GetJwksKeyArray) ToGetJwksKeyArrayOutput() GetJwksKeyArrayOutput {
	return i.ToGetJwksKeyArrayOutputWithContext(context.Background())
}

func (i GetJwksKeyArray) ToGetJwksKeyArrayOutputWithContext(ctx context.Context) GetJwksKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJwksKeyArrayOutput)
}

type GetJwksKeyOutput struct{ *pulumi.OutputState }

func (GetJwksKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJwksKey)(nil)).Elem()
}

func (o GetJwksKeyOutput) ToGetJwksKeyOutput() GetJwksKeyOutput {
	return o
}

func (o GetJwksKeyOutput) ToGetJwksKeyOutputWithContext(ctx context.Context) GetJwksKeyOutput {
	return o
}

// `(string)` - JWK field `alg`
func (o GetJwksKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetJwksKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// `(string)` - JWK field `e`
func (o GetJwksKeyOutput) Exponent() pulumi.StringOutput {
	return o.ApplyT(func(v GetJwksKey) string { return v.Exponent }).(pulumi.StringOutput)
}

// `(string)` - JWK field `kid`
func (o GetJwksKeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetJwksKey) string { return v.KeyId }).(pulumi.StringOutput)
}

// `(string)` - JWK field `kty`
func (o GetJwksKeyOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetJwksKey) string { return v.KeyType }).(pulumi.StringOutput)
}

// `(string)` - JWK field `use`
func (o GetJwksKeyOutput) KeyUse() pulumi.StringOutput {
	return o.ApplyT(func(v GetJwksKey) string { return v.KeyUse }).(pulumi.StringOutput)
}

// `(string)` - JWK field `n`
func (o GetJwksKeyOutput) Modulus() pulumi.StringOutput {
	return o.ApplyT(func(v GetJwksKey) string { return v.Modulus }).(pulumi.StringOutput)
}

type GetJwksKeyArrayOutput struct{ *pulumi.OutputState }

func (GetJwksKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJwksKey)(nil)).Elem()
}

func (o GetJwksKeyArrayOutput) ToGetJwksKeyArrayOutput() GetJwksKeyArrayOutput {
	return o
}

func (o GetJwksKeyArrayOutput) ToGetJwksKeyArrayOutputWithContext(ctx context.Context) GetJwksKeyArrayOutput {
	return o
}

func (o GetJwksKeyArrayOutput) Index(i pulumi.IntInput) GetJwksKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJwksKey {
		return vs[0].([]GetJwksKey)[vs[1].(int)]
	}).(GetJwksKeyOutput)
}

type GetNamespaceCapability struct {
	// `([]string)` - Task drivers disabled for the namespace.
	DisabledTaskDrivers []string `pulumi:"disabledTaskDrivers"`
	// `([]string)` - Task drivers enabled for the namespace.
	EnabledTaskDrivers []string `pulumi:"enabledTaskDrivers"`
}

// GetNamespaceCapabilityInput is an input type that accepts GetNamespaceCapabilityArgs and GetNamespaceCapabilityOutput values.
// You can construct a concrete instance of `GetNamespaceCapabilityInput` via:
//
//	GetNamespaceCapabilityArgs{...}
type GetNamespaceCapabilityInput interface {
	pulumi.Input

	ToGetNamespaceCapabilityOutput() GetNamespaceCapabilityOutput
	ToGetNamespaceCapabilityOutputWithContext(context.Context) GetNamespaceCapabilityOutput
}

type GetNamespaceCapabilityArgs struct {
	// `([]string)` - Task drivers disabled for the namespace.
	DisabledTaskDrivers pulumi.StringArrayInput `pulumi:"disabledTaskDrivers"`
	// `([]string)` - Task drivers enabled for the namespace.
	EnabledTaskDrivers pulumi.StringArrayInput `pulumi:"enabledTaskDrivers"`
}

func (GetNamespaceCapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespaceCapability)(nil)).Elem()
}

func (i GetNamespaceCapabilityArgs) ToGetNamespaceCapabilityOutput() GetNamespaceCapabilityOutput {
	return i.ToGetNamespaceCapabilityOutputWithContext(context.Background())
}

func (i GetNamespaceCapabilityArgs) ToGetNamespaceCapabilityOutputWithContext(ctx context.Context) GetNamespaceCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespaceCapabilityOutput)
}

// GetNamespaceCapabilityArrayInput is an input type that accepts GetNamespaceCapabilityArray and GetNamespaceCapabilityArrayOutput values.
// You can construct a concrete instance of `GetNamespaceCapabilityArrayInput` via:
//
//	GetNamespaceCapabilityArray{ GetNamespaceCapabilityArgs{...} }
type GetNamespaceCapabilityArrayInput interface {
	pulumi.Input

	ToGetNamespaceCapabilityArrayOutput() GetNamespaceCapabilityArrayOutput
	ToGetNamespaceCapabilityArrayOutputWithContext(context.Context) GetNamespaceCapabilityArrayOutput
}

type GetNamespaceCapabilityArray []GetNamespaceCapabilityInput

func (GetNamespaceCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespaceCapability)(nil)).Elem()
}

func (i GetNamespaceCapabilityArray) ToGetNamespaceCapabilityArrayOutput() GetNamespaceCapabilityArrayOutput {
	return i.ToGetNamespaceCapabilityArrayOutputWithContext(context.Background())
}

func (i GetNamespaceCapabilityArray) ToGetNamespaceCapabilityArrayOutputWithContext(ctx context.Context) GetNamespaceCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespaceCapabilityArrayOutput)
}

type GetNamespaceCapabilityOutput struct{ *pulumi.OutputState }

func (GetNamespaceCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespaceCapability)(nil)).Elem()
}

func (o GetNamespaceCapabilityOutput) ToGetNamespaceCapabilityOutput() GetNamespaceCapabilityOutput {
	return o
}

func (o GetNamespaceCapabilityOutput) ToGetNamespaceCapabilityOutputWithContext(ctx context.Context) GetNamespaceCapabilityOutput {
	return o
}

// `([]string)` - Task drivers disabled for the namespace.
func (o GetNamespaceCapabilityOutput) DisabledTaskDrivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNamespaceCapability) []string { return v.DisabledTaskDrivers }).(pulumi.StringArrayOutput)
}

// `([]string)` - Task drivers enabled for the namespace.
func (o GetNamespaceCapabilityOutput) EnabledTaskDrivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNamespaceCapability) []string { return v.EnabledTaskDrivers }).(pulumi.StringArrayOutput)
}

type GetNamespaceCapabilityArrayOutput struct{ *pulumi.OutputState }

func (GetNamespaceCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespaceCapability)(nil)).Elem()
}

func (o GetNamespaceCapabilityArrayOutput) ToGetNamespaceCapabilityArrayOutput() GetNamespaceCapabilityArrayOutput {
	return o
}

func (o GetNamespaceCapabilityArrayOutput) ToGetNamespaceCapabilityArrayOutputWithContext(ctx context.Context) GetNamespaceCapabilityArrayOutput {
	return o
}

func (o GetNamespaceCapabilityArrayOutput) Index(i pulumi.IntInput) GetNamespaceCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespaceCapability {
		return vs[0].([]GetNamespaceCapability)[vs[1].(int)]
	}).(GetNamespaceCapabilityOutput)
}

type GetNamespaceNodePoolConfig struct {
	Alloweds []string `pulumi:"alloweds"`
	Default  string   `pulumi:"default"`
	Denieds  []string `pulumi:"denieds"`
}

// GetNamespaceNodePoolConfigInput is an input type that accepts GetNamespaceNodePoolConfigArgs and GetNamespaceNodePoolConfigOutput values.
// You can construct a concrete instance of `GetNamespaceNodePoolConfigInput` via:
//
//	GetNamespaceNodePoolConfigArgs{...}
type GetNamespaceNodePoolConfigInput interface {
	pulumi.Input

	ToGetNamespaceNodePoolConfigOutput() GetNamespaceNodePoolConfigOutput
	ToGetNamespaceNodePoolConfigOutputWithContext(context.Context) GetNamespaceNodePoolConfigOutput
}

type GetNamespaceNodePoolConfigArgs struct {
	Alloweds pulumi.StringArrayInput `pulumi:"alloweds"`
	Default  pulumi.StringInput      `pulumi:"default"`
	Denieds  pulumi.StringArrayInput `pulumi:"denieds"`
}

func (GetNamespaceNodePoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespaceNodePoolConfig)(nil)).Elem()
}

func (i GetNamespaceNodePoolConfigArgs) ToGetNamespaceNodePoolConfigOutput() GetNamespaceNodePoolConfigOutput {
	return i.ToGetNamespaceNodePoolConfigOutputWithContext(context.Background())
}

func (i GetNamespaceNodePoolConfigArgs) ToGetNamespaceNodePoolConfigOutputWithContext(ctx context.Context) GetNamespaceNodePoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespaceNodePoolConfigOutput)
}

// GetNamespaceNodePoolConfigArrayInput is an input type that accepts GetNamespaceNodePoolConfigArray and GetNamespaceNodePoolConfigArrayOutput values.
// You can construct a concrete instance of `GetNamespaceNodePoolConfigArrayInput` via:
//
//	GetNamespaceNodePoolConfigArray{ GetNamespaceNodePoolConfigArgs{...} }
type GetNamespaceNodePoolConfigArrayInput interface {
	pulumi.Input

	ToGetNamespaceNodePoolConfigArrayOutput() GetNamespaceNodePoolConfigArrayOutput
	ToGetNamespaceNodePoolConfigArrayOutputWithContext(context.Context) GetNamespaceNodePoolConfigArrayOutput
}

type GetNamespaceNodePoolConfigArray []GetNamespaceNodePoolConfigInput

func (GetNamespaceNodePoolConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespaceNodePoolConfig)(nil)).Elem()
}

func (i GetNamespaceNodePoolConfigArray) ToGetNamespaceNodePoolConfigArrayOutput() GetNamespaceNodePoolConfigArrayOutput {
	return i.ToGetNamespaceNodePoolConfigArrayOutputWithContext(context.Background())
}

func (i GetNamespaceNodePoolConfigArray) ToGetNamespaceNodePoolConfigArrayOutputWithContext(ctx context.Context) GetNamespaceNodePoolConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespaceNodePoolConfigArrayOutput)
}

type GetNamespaceNodePoolConfigOutput struct{ *pulumi.OutputState }

func (GetNamespaceNodePoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespaceNodePoolConfig)(nil)).Elem()
}

func (o GetNamespaceNodePoolConfigOutput) ToGetNamespaceNodePoolConfigOutput() GetNamespaceNodePoolConfigOutput {
	return o
}

func (o GetNamespaceNodePoolConfigOutput) ToGetNamespaceNodePoolConfigOutputWithContext(ctx context.Context) GetNamespaceNodePoolConfigOutput {
	return o
}

func (o GetNamespaceNodePoolConfigOutput) Alloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNamespaceNodePoolConfig) []string { return v.Alloweds }).(pulumi.StringArrayOutput)
}

func (o GetNamespaceNodePoolConfigOutput) Default() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespaceNodePoolConfig) string { return v.Default }).(pulumi.StringOutput)
}

func (o GetNamespaceNodePoolConfigOutput) Denieds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNamespaceNodePoolConfig) []string { return v.Denieds }).(pulumi.StringArrayOutput)
}

type GetNamespaceNodePoolConfigArrayOutput struct{ *pulumi.OutputState }

func (GetNamespaceNodePoolConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespaceNodePoolConfig)(nil)).Elem()
}

func (o GetNamespaceNodePoolConfigArrayOutput) ToGetNamespaceNodePoolConfigArrayOutput() GetNamespaceNodePoolConfigArrayOutput {
	return o
}

func (o GetNamespaceNodePoolConfigArrayOutput) ToGetNamespaceNodePoolConfigArrayOutputWithContext(ctx context.Context) GetNamespaceNodePoolConfigArrayOutput {
	return o
}

func (o GetNamespaceNodePoolConfigArrayOutput) Index(i pulumi.IntInput) GetNamespaceNodePoolConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespaceNodePoolConfig {
		return vs[0].([]GetNamespaceNodePoolConfig)[vs[1].(int)]
	}).(GetNamespaceNodePoolConfigOutput)
}

type GetNodePoolSchedulerConfig struct {
	// `(string)` - Whether or not memory
	// oversubscription is enabled in the node pool. If empty or not defined the
	// global cluster configuration is used.
	MemoryOversubscription string `pulumi:"memoryOversubscription"`
	// `(string)` - The scheduler algorithm used in the node
	// pool. If empty or not defined the global cluster configuration is used.
	SchedulerAlgorithm string `pulumi:"schedulerAlgorithm"`
}

// GetNodePoolSchedulerConfigInput is an input type that accepts GetNodePoolSchedulerConfigArgs and GetNodePoolSchedulerConfigOutput values.
// You can construct a concrete instance of `GetNodePoolSchedulerConfigInput` via:
//
//	GetNodePoolSchedulerConfigArgs{...}
type GetNodePoolSchedulerConfigInput interface {
	pulumi.Input

	ToGetNodePoolSchedulerConfigOutput() GetNodePoolSchedulerConfigOutput
	ToGetNodePoolSchedulerConfigOutputWithContext(context.Context) GetNodePoolSchedulerConfigOutput
}

type GetNodePoolSchedulerConfigArgs struct {
	// `(string)` - Whether or not memory
	// oversubscription is enabled in the node pool. If empty or not defined the
	// global cluster configuration is used.
	MemoryOversubscription pulumi.StringInput `pulumi:"memoryOversubscription"`
	// `(string)` - The scheduler algorithm used in the node
	// pool. If empty or not defined the global cluster configuration is used.
	SchedulerAlgorithm pulumi.StringInput `pulumi:"schedulerAlgorithm"`
}

func (GetNodePoolSchedulerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolSchedulerConfig)(nil)).Elem()
}

func (i GetNodePoolSchedulerConfigArgs) ToGetNodePoolSchedulerConfigOutput() GetNodePoolSchedulerConfigOutput {
	return i.ToGetNodePoolSchedulerConfigOutputWithContext(context.Background())
}

func (i GetNodePoolSchedulerConfigArgs) ToGetNodePoolSchedulerConfigOutputWithContext(ctx context.Context) GetNodePoolSchedulerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolSchedulerConfigOutput)
}

// GetNodePoolSchedulerConfigArrayInput is an input type that accepts GetNodePoolSchedulerConfigArray and GetNodePoolSchedulerConfigArrayOutput values.
// You can construct a concrete instance of `GetNodePoolSchedulerConfigArrayInput` via:
//
//	GetNodePoolSchedulerConfigArray{ GetNodePoolSchedulerConfigArgs{...} }
type GetNodePoolSchedulerConfigArrayInput interface {
	pulumi.Input

	ToGetNodePoolSchedulerConfigArrayOutput() GetNodePoolSchedulerConfigArrayOutput
	ToGetNodePoolSchedulerConfigArrayOutputWithContext(context.Context) GetNodePoolSchedulerConfigArrayOutput
}

type GetNodePoolSchedulerConfigArray []GetNodePoolSchedulerConfigInput

func (GetNodePoolSchedulerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolSchedulerConfig)(nil)).Elem()
}

func (i GetNodePoolSchedulerConfigArray) ToGetNodePoolSchedulerConfigArrayOutput() GetNodePoolSchedulerConfigArrayOutput {
	return i.ToGetNodePoolSchedulerConfigArrayOutputWithContext(context.Background())
}

func (i GetNodePoolSchedulerConfigArray) ToGetNodePoolSchedulerConfigArrayOutputWithContext(ctx context.Context) GetNodePoolSchedulerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolSchedulerConfigArrayOutput)
}

type GetNodePoolSchedulerConfigOutput struct{ *pulumi.OutputState }

func (GetNodePoolSchedulerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolSchedulerConfig)(nil)).Elem()
}

func (o GetNodePoolSchedulerConfigOutput) ToGetNodePoolSchedulerConfigOutput() GetNodePoolSchedulerConfigOutput {
	return o
}

func (o GetNodePoolSchedulerConfigOutput) ToGetNodePoolSchedulerConfigOutputWithContext(ctx context.Context) GetNodePoolSchedulerConfigOutput {
	return o
}

// `(string)` - Whether or not memory
// oversubscription is enabled in the node pool. If empty or not defined the
// global cluster configuration is used.
func (o GetNodePoolSchedulerConfigOutput) MemoryOversubscription() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolSchedulerConfig) string { return v.MemoryOversubscription }).(pulumi.StringOutput)
}

// `(string)` - The scheduler algorithm used in the node
// pool. If empty or not defined the global cluster configuration is used.
func (o GetNodePoolSchedulerConfigOutput) SchedulerAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolSchedulerConfig) string { return v.SchedulerAlgorithm }).(pulumi.StringOutput)
}

type GetNodePoolSchedulerConfigArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolSchedulerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolSchedulerConfig)(nil)).Elem()
}

func (o GetNodePoolSchedulerConfigArrayOutput) ToGetNodePoolSchedulerConfigArrayOutput() GetNodePoolSchedulerConfigArrayOutput {
	return o
}

func (o GetNodePoolSchedulerConfigArrayOutput) ToGetNodePoolSchedulerConfigArrayOutputWithContext(ctx context.Context) GetNodePoolSchedulerConfigArrayOutput {
	return o
}

func (o GetNodePoolSchedulerConfigArrayOutput) Index(i pulumi.IntInput) GetNodePoolSchedulerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolSchedulerConfig {
		return vs[0].([]GetNodePoolSchedulerConfig)[vs[1].(int)]
	}).(GetNodePoolSchedulerConfigOutput)
}

type GetNodePoolsNodePool struct {
	// `(string)` - The description of the node pool.
	Description string `pulumi:"description"`
	// `(map[string]string)` - Arbitrary KV metadata associated with the
	// node pool.
	Meta map[string]string `pulumi:"meta"`
	// `(string)` - The name of the node pool.
	Name string `pulumi:"name"`
	// `(block)` - Scheduler configuration for the node pool.
	SchedulerConfigs []GetNodePoolsNodePoolSchedulerConfig `pulumi:"schedulerConfigs"`
}

// GetNodePoolsNodePoolInput is an input type that accepts GetNodePoolsNodePoolArgs and GetNodePoolsNodePoolOutput values.
// You can construct a concrete instance of `GetNodePoolsNodePoolInput` via:
//
//	GetNodePoolsNodePoolArgs{...}
type GetNodePoolsNodePoolInput interface {
	pulumi.Input

	ToGetNodePoolsNodePoolOutput() GetNodePoolsNodePoolOutput
	ToGetNodePoolsNodePoolOutputWithContext(context.Context) GetNodePoolsNodePoolOutput
}

type GetNodePoolsNodePoolArgs struct {
	// `(string)` - The description of the node pool.
	Description pulumi.StringInput `pulumi:"description"`
	// `(map[string]string)` - Arbitrary KV metadata associated with the
	// node pool.
	Meta pulumi.StringMapInput `pulumi:"meta"`
	// `(string)` - The name of the node pool.
	Name pulumi.StringInput `pulumi:"name"`
	// `(block)` - Scheduler configuration for the node pool.
	SchedulerConfigs GetNodePoolsNodePoolSchedulerConfigArrayInput `pulumi:"schedulerConfigs"`
}

func (GetNodePoolsNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolsNodePool)(nil)).Elem()
}

func (i GetNodePoolsNodePoolArgs) ToGetNodePoolsNodePoolOutput() GetNodePoolsNodePoolOutput {
	return i.ToGetNodePoolsNodePoolOutputWithContext(context.Background())
}

func (i GetNodePoolsNodePoolArgs) ToGetNodePoolsNodePoolOutputWithContext(ctx context.Context) GetNodePoolsNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolsNodePoolOutput)
}

// GetNodePoolsNodePoolArrayInput is an input type that accepts GetNodePoolsNodePoolArray and GetNodePoolsNodePoolArrayOutput values.
// You can construct a concrete instance of `GetNodePoolsNodePoolArrayInput` via:
//
//	GetNodePoolsNodePoolArray{ GetNodePoolsNodePoolArgs{...} }
type GetNodePoolsNodePoolArrayInput interface {
	pulumi.Input

	ToGetNodePoolsNodePoolArrayOutput() GetNodePoolsNodePoolArrayOutput
	ToGetNodePoolsNodePoolArrayOutputWithContext(context.Context) GetNodePoolsNodePoolArrayOutput
}

type GetNodePoolsNodePoolArray []GetNodePoolsNodePoolInput

func (GetNodePoolsNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolsNodePool)(nil)).Elem()
}

func (i GetNodePoolsNodePoolArray) ToGetNodePoolsNodePoolArrayOutput() GetNodePoolsNodePoolArrayOutput {
	return i.ToGetNodePoolsNodePoolArrayOutputWithContext(context.Background())
}

func (i GetNodePoolsNodePoolArray) ToGetNodePoolsNodePoolArrayOutputWithContext(ctx context.Context) GetNodePoolsNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolsNodePoolArrayOutput)
}

type GetNodePoolsNodePoolOutput struct{ *pulumi.OutputState }

func (GetNodePoolsNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolsNodePool)(nil)).Elem()
}

func (o GetNodePoolsNodePoolOutput) ToGetNodePoolsNodePoolOutput() GetNodePoolsNodePoolOutput {
	return o
}

func (o GetNodePoolsNodePoolOutput) ToGetNodePoolsNodePoolOutputWithContext(ctx context.Context) GetNodePoolsNodePoolOutput {
	return o
}

// `(string)` - The description of the node pool.
func (o GetNodePoolsNodePoolOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolsNodePool) string { return v.Description }).(pulumi.StringOutput)
}

// `(map[string]string)` - Arbitrary KV metadata associated with the
// node pool.
func (o GetNodePoolsNodePoolOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodePoolsNodePool) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

// `(string)` - The name of the node pool.
func (o GetNodePoolsNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolsNodePool) string { return v.Name }).(pulumi.StringOutput)
}

// `(block)` - Scheduler configuration for the node pool.
func (o GetNodePoolsNodePoolOutput) SchedulerConfigs() GetNodePoolsNodePoolSchedulerConfigArrayOutput {
	return o.ApplyT(func(v GetNodePoolsNodePool) []GetNodePoolsNodePoolSchedulerConfig { return v.SchedulerConfigs }).(GetNodePoolsNodePoolSchedulerConfigArrayOutput)
}

type GetNodePoolsNodePoolArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolsNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolsNodePool)(nil)).Elem()
}

func (o GetNodePoolsNodePoolArrayOutput) ToGetNodePoolsNodePoolArrayOutput() GetNodePoolsNodePoolArrayOutput {
	return o
}

func (o GetNodePoolsNodePoolArrayOutput) ToGetNodePoolsNodePoolArrayOutputWithContext(ctx context.Context) GetNodePoolsNodePoolArrayOutput {
	return o
}

func (o GetNodePoolsNodePoolArrayOutput) Index(i pulumi.IntInput) GetNodePoolsNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolsNodePool {
		return vs[0].([]GetNodePoolsNodePool)[vs[1].(int)]
	}).(GetNodePoolsNodePoolOutput)
}

type GetNodePoolsNodePoolSchedulerConfig struct {
	// `(string)` - Whether or not memory
	// oversubscription is enabled in the node pool. If empty or not defined the
	// global cluster configuration is used.
	MemoryOversubscription string `pulumi:"memoryOversubscription"`
	// `(string)` - The scheduler algorithm used in the node
	// pool. If empty or not defined the global cluster configuration is used.
	SchedulerAlgorithm string `pulumi:"schedulerAlgorithm"`
}

// GetNodePoolsNodePoolSchedulerConfigInput is an input type that accepts GetNodePoolsNodePoolSchedulerConfigArgs and GetNodePoolsNodePoolSchedulerConfigOutput values.
// You can construct a concrete instance of `GetNodePoolsNodePoolSchedulerConfigInput` via:
//
//	GetNodePoolsNodePoolSchedulerConfigArgs{...}
type GetNodePoolsNodePoolSchedulerConfigInput interface {
	pulumi.Input

	ToGetNodePoolsNodePoolSchedulerConfigOutput() GetNodePoolsNodePoolSchedulerConfigOutput
	ToGetNodePoolsNodePoolSchedulerConfigOutputWithContext(context.Context) GetNodePoolsNodePoolSchedulerConfigOutput
}

type GetNodePoolsNodePoolSchedulerConfigArgs struct {
	// `(string)` - Whether or not memory
	// oversubscription is enabled in the node pool. If empty or not defined the
	// global cluster configuration is used.
	MemoryOversubscription pulumi.StringInput `pulumi:"memoryOversubscription"`
	// `(string)` - The scheduler algorithm used in the node
	// pool. If empty or not defined the global cluster configuration is used.
	SchedulerAlgorithm pulumi.StringInput `pulumi:"schedulerAlgorithm"`
}

func (GetNodePoolsNodePoolSchedulerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolsNodePoolSchedulerConfig)(nil)).Elem()
}

func (i GetNodePoolsNodePoolSchedulerConfigArgs) ToGetNodePoolsNodePoolSchedulerConfigOutput() GetNodePoolsNodePoolSchedulerConfigOutput {
	return i.ToGetNodePoolsNodePoolSchedulerConfigOutputWithContext(context.Background())
}

func (i GetNodePoolsNodePoolSchedulerConfigArgs) ToGetNodePoolsNodePoolSchedulerConfigOutputWithContext(ctx context.Context) GetNodePoolsNodePoolSchedulerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolsNodePoolSchedulerConfigOutput)
}

// GetNodePoolsNodePoolSchedulerConfigArrayInput is an input type that accepts GetNodePoolsNodePoolSchedulerConfigArray and GetNodePoolsNodePoolSchedulerConfigArrayOutput values.
// You can construct a concrete instance of `GetNodePoolsNodePoolSchedulerConfigArrayInput` via:
//
//	GetNodePoolsNodePoolSchedulerConfigArray{ GetNodePoolsNodePoolSchedulerConfigArgs{...} }
type GetNodePoolsNodePoolSchedulerConfigArrayInput interface {
	pulumi.Input

	ToGetNodePoolsNodePoolSchedulerConfigArrayOutput() GetNodePoolsNodePoolSchedulerConfigArrayOutput
	ToGetNodePoolsNodePoolSchedulerConfigArrayOutputWithContext(context.Context) GetNodePoolsNodePoolSchedulerConfigArrayOutput
}

type GetNodePoolsNodePoolSchedulerConfigArray []GetNodePoolsNodePoolSchedulerConfigInput

func (GetNodePoolsNodePoolSchedulerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolsNodePoolSchedulerConfig)(nil)).Elem()
}

func (i GetNodePoolsNodePoolSchedulerConfigArray) ToGetNodePoolsNodePoolSchedulerConfigArrayOutput() GetNodePoolsNodePoolSchedulerConfigArrayOutput {
	return i.ToGetNodePoolsNodePoolSchedulerConfigArrayOutputWithContext(context.Background())
}

func (i GetNodePoolsNodePoolSchedulerConfigArray) ToGetNodePoolsNodePoolSchedulerConfigArrayOutputWithContext(ctx context.Context) GetNodePoolsNodePoolSchedulerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolsNodePoolSchedulerConfigArrayOutput)
}

type GetNodePoolsNodePoolSchedulerConfigOutput struct{ *pulumi.OutputState }

func (GetNodePoolsNodePoolSchedulerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolsNodePoolSchedulerConfig)(nil)).Elem()
}

func (o GetNodePoolsNodePoolSchedulerConfigOutput) ToGetNodePoolsNodePoolSchedulerConfigOutput() GetNodePoolsNodePoolSchedulerConfigOutput {
	return o
}

func (o GetNodePoolsNodePoolSchedulerConfigOutput) ToGetNodePoolsNodePoolSchedulerConfigOutputWithContext(ctx context.Context) GetNodePoolsNodePoolSchedulerConfigOutput {
	return o
}

// `(string)` - Whether or not memory
// oversubscription is enabled in the node pool. If empty or not defined the
// global cluster configuration is used.
func (o GetNodePoolsNodePoolSchedulerConfigOutput) MemoryOversubscription() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolsNodePoolSchedulerConfig) string { return v.MemoryOversubscription }).(pulumi.StringOutput)
}

// `(string)` - The scheduler algorithm used in the node
// pool. If empty or not defined the global cluster configuration is used.
func (o GetNodePoolsNodePoolSchedulerConfigOutput) SchedulerAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolsNodePoolSchedulerConfig) string { return v.SchedulerAlgorithm }).(pulumi.StringOutput)
}

type GetNodePoolsNodePoolSchedulerConfigArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolsNodePoolSchedulerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolsNodePoolSchedulerConfig)(nil)).Elem()
}

func (o GetNodePoolsNodePoolSchedulerConfigArrayOutput) ToGetNodePoolsNodePoolSchedulerConfigArrayOutput() GetNodePoolsNodePoolSchedulerConfigArrayOutput {
	return o
}

func (o GetNodePoolsNodePoolSchedulerConfigArrayOutput) ToGetNodePoolsNodePoolSchedulerConfigArrayOutputWithContext(ctx context.Context) GetNodePoolsNodePoolSchedulerConfigArrayOutput {
	return o
}

func (o GetNodePoolsNodePoolSchedulerConfigArrayOutput) Index(i pulumi.IntInput) GetNodePoolsNodePoolSchedulerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolsNodePoolSchedulerConfig {
		return vs[0].([]GetNodePoolsNodePoolSchedulerConfig)[vs[1].(int)]
	}).(GetNodePoolsNodePoolSchedulerConfigOutput)
}

type GetPluginNode struct {
	Healthy            bool   `pulumi:"healthy"`
	HealthyDescription string `pulumi:"healthyDescription"`
	Name               string `pulumi:"name"`
}

// GetPluginNodeInput is an input type that accepts GetPluginNodeArgs and GetPluginNodeOutput values.
// You can construct a concrete instance of `GetPluginNodeInput` via:
//
//	GetPluginNodeArgs{...}
type GetPluginNodeInput interface {
	pulumi.Input

	ToGetPluginNodeOutput() GetPluginNodeOutput
	ToGetPluginNodeOutputWithContext(context.Context) GetPluginNodeOutput
}

type GetPluginNodeArgs struct {
	Healthy            pulumi.BoolInput   `pulumi:"healthy"`
	HealthyDescription pulumi.StringInput `pulumi:"healthyDescription"`
	Name               pulumi.StringInput `pulumi:"name"`
}

func (GetPluginNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPluginNode)(nil)).Elem()
}

func (i GetPluginNodeArgs) ToGetPluginNodeOutput() GetPluginNodeOutput {
	return i.ToGetPluginNodeOutputWithContext(context.Background())
}

func (i GetPluginNodeArgs) ToGetPluginNodeOutputWithContext(ctx context.Context) GetPluginNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPluginNodeOutput)
}

// GetPluginNodeArrayInput is an input type that accepts GetPluginNodeArray and GetPluginNodeArrayOutput values.
// You can construct a concrete instance of `GetPluginNodeArrayInput` via:
//
//	GetPluginNodeArray{ GetPluginNodeArgs{...} }
type GetPluginNodeArrayInput interface {
	pulumi.Input

	ToGetPluginNodeArrayOutput() GetPluginNodeArrayOutput
	ToGetPluginNodeArrayOutputWithContext(context.Context) GetPluginNodeArrayOutput
}

type GetPluginNodeArray []GetPluginNodeInput

func (GetPluginNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPluginNode)(nil)).Elem()
}

func (i GetPluginNodeArray) ToGetPluginNodeArrayOutput() GetPluginNodeArrayOutput {
	return i.ToGetPluginNodeArrayOutputWithContext(context.Background())
}

func (i GetPluginNodeArray) ToGetPluginNodeArrayOutputWithContext(ctx context.Context) GetPluginNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPluginNodeArrayOutput)
}

type GetPluginNodeOutput struct{ *pulumi.OutputState }

func (GetPluginNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPluginNode)(nil)).Elem()
}

func (o GetPluginNodeOutput) ToGetPluginNodeOutput() GetPluginNodeOutput {
	return o
}

func (o GetPluginNodeOutput) ToGetPluginNodeOutputWithContext(ctx context.Context) GetPluginNodeOutput {
	return o
}

func (o GetPluginNodeOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPluginNode) bool { return v.Healthy }).(pulumi.BoolOutput)
}

func (o GetPluginNodeOutput) HealthyDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetPluginNode) string { return v.HealthyDescription }).(pulumi.StringOutput)
}

func (o GetPluginNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPluginNode) string { return v.Name }).(pulumi.StringOutput)
}

type GetPluginNodeArrayOutput struct{ *pulumi.OutputState }

func (GetPluginNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPluginNode)(nil)).Elem()
}

func (o GetPluginNodeArrayOutput) ToGetPluginNodeArrayOutput() GetPluginNodeArrayOutput {
	return o
}

func (o GetPluginNodeArrayOutput) ToGetPluginNodeArrayOutputWithContext(ctx context.Context) GetPluginNodeArrayOutput {
	return o
}

func (o GetPluginNodeArrayOutput) Index(i pulumi.IntInput) GetPluginNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPluginNode {
		return vs[0].([]GetPluginNode)[vs[1].(int)]
	}).(GetPluginNodeOutput)
}

type GetScalingPoliciesPolicy struct {
	// `(boolean)` - Whether or not the scaling policy is enabled.
	Enabled bool `pulumi:"enabled"`
	// `(string)` - The scaling policy ID.
	Id string `pulumi:"id"`
	// `(map[string]string)` - The scaling policy target.
	Target map[string]string `pulumi:"target"`
	// `(string)` - An optional string to filter scaling policies based on policy type. If not provided, policies of all types are returned.
	Type string `pulumi:"type"`
}

// GetScalingPoliciesPolicyInput is an input type that accepts GetScalingPoliciesPolicyArgs and GetScalingPoliciesPolicyOutput values.
// You can construct a concrete instance of `GetScalingPoliciesPolicyInput` via:
//
//	GetScalingPoliciesPolicyArgs{...}
type GetScalingPoliciesPolicyInput interface {
	pulumi.Input

	ToGetScalingPoliciesPolicyOutput() GetScalingPoliciesPolicyOutput
	ToGetScalingPoliciesPolicyOutputWithContext(context.Context) GetScalingPoliciesPolicyOutput
}

type GetScalingPoliciesPolicyArgs struct {
	// `(boolean)` - Whether or not the scaling policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// `(string)` - The scaling policy ID.
	Id pulumi.StringInput `pulumi:"id"`
	// `(map[string]string)` - The scaling policy target.
	Target pulumi.StringMapInput `pulumi:"target"`
	// `(string)` - An optional string to filter scaling policies based on policy type. If not provided, policies of all types are returned.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetScalingPoliciesPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScalingPoliciesPolicy)(nil)).Elem()
}

func (i GetScalingPoliciesPolicyArgs) ToGetScalingPoliciesPolicyOutput() GetScalingPoliciesPolicyOutput {
	return i.ToGetScalingPoliciesPolicyOutputWithContext(context.Background())
}

func (i GetScalingPoliciesPolicyArgs) ToGetScalingPoliciesPolicyOutputWithContext(ctx context.Context) GetScalingPoliciesPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScalingPoliciesPolicyOutput)
}

// GetScalingPoliciesPolicyArrayInput is an input type that accepts GetScalingPoliciesPolicyArray and GetScalingPoliciesPolicyArrayOutput values.
// You can construct a concrete instance of `GetScalingPoliciesPolicyArrayInput` via:
//
//	GetScalingPoliciesPolicyArray{ GetScalingPoliciesPolicyArgs{...} }
type GetScalingPoliciesPolicyArrayInput interface {
	pulumi.Input

	ToGetScalingPoliciesPolicyArrayOutput() GetScalingPoliciesPolicyArrayOutput
	ToGetScalingPoliciesPolicyArrayOutputWithContext(context.Context) GetScalingPoliciesPolicyArrayOutput
}

type GetScalingPoliciesPolicyArray []GetScalingPoliciesPolicyInput

func (GetScalingPoliciesPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScalingPoliciesPolicy)(nil)).Elem()
}

func (i GetScalingPoliciesPolicyArray) ToGetScalingPoliciesPolicyArrayOutput() GetScalingPoliciesPolicyArrayOutput {
	return i.ToGetScalingPoliciesPolicyArrayOutputWithContext(context.Background())
}

func (i GetScalingPoliciesPolicyArray) ToGetScalingPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetScalingPoliciesPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScalingPoliciesPolicyArrayOutput)
}

type GetScalingPoliciesPolicyOutput struct{ *pulumi.OutputState }

func (GetScalingPoliciesPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScalingPoliciesPolicy)(nil)).Elem()
}

func (o GetScalingPoliciesPolicyOutput) ToGetScalingPoliciesPolicyOutput() GetScalingPoliciesPolicyOutput {
	return o
}

func (o GetScalingPoliciesPolicyOutput) ToGetScalingPoliciesPolicyOutputWithContext(ctx context.Context) GetScalingPoliciesPolicyOutput {
	return o
}

// `(boolean)` - Whether or not the scaling policy is enabled.
func (o GetScalingPoliciesPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetScalingPoliciesPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// `(string)` - The scaling policy ID.
func (o GetScalingPoliciesPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetScalingPoliciesPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// `(map[string]string)` - The scaling policy target.
func (o GetScalingPoliciesPolicyOutput) Target() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetScalingPoliciesPolicy) map[string]string { return v.Target }).(pulumi.StringMapOutput)
}

// `(string)` - An optional string to filter scaling policies based on policy type. If not provided, policies of all types are returned.
func (o GetScalingPoliciesPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetScalingPoliciesPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type GetScalingPoliciesPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetScalingPoliciesPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScalingPoliciesPolicy)(nil)).Elem()
}

func (o GetScalingPoliciesPolicyArrayOutput) ToGetScalingPoliciesPolicyArrayOutput() GetScalingPoliciesPolicyArrayOutput {
	return o
}

func (o GetScalingPoliciesPolicyArrayOutput) ToGetScalingPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetScalingPoliciesPolicyArrayOutput {
	return o
}

func (o GetScalingPoliciesPolicyArrayOutput) Index(i pulumi.IntInput) GetScalingPoliciesPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScalingPoliciesPolicy {
		return vs[0].([]GetScalingPoliciesPolicy)[vs[1].(int)]
	}).(GetScalingPoliciesPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodConfigInput)(nil)).Elem(), AclAuthMethodConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodConfigPtrInput)(nil)).Elem(), AclAuthMethodConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodConfigOidcClientAssertionInput)(nil)).Elem(), AclAuthMethodConfigOidcClientAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodConfigOidcClientAssertionPtrInput)(nil)).Elem(), AclAuthMethodConfigOidcClientAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodConfigOidcClientAssertionPrivateKeyInput)(nil)).Elem(), AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrInput)(nil)).Elem(), AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclPolicyJobAclInput)(nil)).Elem(), AclPolicyJobAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclPolicyJobAclPtrInput)(nil)).Elem(), AclPolicyJobAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRolePolicyInput)(nil)).Elem(), AclRolePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRolePolicyArrayInput)(nil)).Elem(), AclRolePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclTokenRoleInput)(nil)).Elem(), AclTokenRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclTokenRoleArrayInput)(nil)).Elem(), AclTokenRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeCapabilityInput)(nil)).Elem(), CsiVolumeCapabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeCapabilityArrayInput)(nil)).Elem(), CsiVolumeCapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeMountOptionsInput)(nil)).Elem(), CsiVolumeMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeMountOptionsPtrInput)(nil)).Elem(), CsiVolumeMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationCapabilityInput)(nil)).Elem(), CsiVolumeRegistrationCapabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationCapabilityArrayInput)(nil)).Elem(), CsiVolumeRegistrationCapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationMountOptionsInput)(nil)).Elem(), CsiVolumeRegistrationMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationMountOptionsPtrInput)(nil)).Elem(), CsiVolumeRegistrationMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationTopologyInput)(nil)).Elem(), CsiVolumeRegistrationTopologyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationTopologyArrayInput)(nil)).Elem(), CsiVolumeRegistrationTopologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationTopologyRequestInput)(nil)).Elem(), CsiVolumeRegistrationTopologyRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationTopologyRequestPtrInput)(nil)).Elem(), CsiVolumeRegistrationTopologyRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationTopologyRequestRequiredInput)(nil)).Elem(), CsiVolumeRegistrationTopologyRequestRequiredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationTopologyRequestRequiredPtrInput)(nil)).Elem(), CsiVolumeRegistrationTopologyRequestRequiredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationTopologyRequestRequiredTopologyInput)(nil)).Elem(), CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayInput)(nil)).Elem(), CsiVolumeRegistrationTopologyRequestRequiredTopologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyInput)(nil)).Elem(), CsiVolumeTopologyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyArrayInput)(nil)).Elem(), CsiVolumeTopologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyRequestInput)(nil)).Elem(), CsiVolumeTopologyRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyRequestPtrInput)(nil)).Elem(), CsiVolumeTopologyRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyRequestPreferredInput)(nil)).Elem(), CsiVolumeTopologyRequestPreferredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyRequestPreferredPtrInput)(nil)).Elem(), CsiVolumeTopologyRequestPreferredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyRequestPreferredTopologyInput)(nil)).Elem(), CsiVolumeTopologyRequestPreferredTopologyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyRequestPreferredTopologyArrayInput)(nil)).Elem(), CsiVolumeTopologyRequestPreferredTopologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyRequestRequiredInput)(nil)).Elem(), CsiVolumeTopologyRequestRequiredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyRequestRequiredPtrInput)(nil)).Elem(), CsiVolumeTopologyRequestRequiredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyRequestRequiredTopologyInput)(nil)).Elem(), CsiVolumeTopologyRequestRequiredTopologyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsiVolumeTopologyRequestRequiredTopologyArrayInput)(nil)).Elem(), CsiVolumeTopologyRequestRequiredTopologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeCapabilityInput)(nil)).Elem(), DynamicHostVolumeCapabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeCapabilityArrayInput)(nil)).Elem(), DynamicHostVolumeCapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeConstraintInput)(nil)).Elem(), DynamicHostVolumeConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeConstraintArrayInput)(nil)).Elem(), DynamicHostVolumeConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeRegistrationCapabilityInput)(nil)).Elem(), DynamicHostVolumeRegistrationCapabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeRegistrationCapabilityArrayInput)(nil)).Elem(), DynamicHostVolumeRegistrationCapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeRegistrationConstraintInput)(nil)).Elem(), DynamicHostVolumeRegistrationConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeRegistrationConstraintArrayInput)(nil)).Elem(), DynamicHostVolumeRegistrationConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeCapabilityInput)(nil)).Elem(), ExternalVolumeCapabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeCapabilityArrayInput)(nil)).Elem(), ExternalVolumeCapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeMountOptionsInput)(nil)).Elem(), ExternalVolumeMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeMountOptionsPtrInput)(nil)).Elem(), ExternalVolumeMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyInput)(nil)).Elem(), ExternalVolumeTopologyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyArrayInput)(nil)).Elem(), ExternalVolumeTopologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyRequestInput)(nil)).Elem(), ExternalVolumeTopologyRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyRequestPtrInput)(nil)).Elem(), ExternalVolumeTopologyRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyRequestPreferredInput)(nil)).Elem(), ExternalVolumeTopologyRequestPreferredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyRequestPreferredPtrInput)(nil)).Elem(), ExternalVolumeTopologyRequestPreferredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyRequestPreferredTopologyInput)(nil)).Elem(), ExternalVolumeTopologyRequestPreferredTopologyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyRequestPreferredTopologyArrayInput)(nil)).Elem(), ExternalVolumeTopologyRequestPreferredTopologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyRequestRequiredInput)(nil)).Elem(), ExternalVolumeTopologyRequestRequiredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyRequestRequiredPtrInput)(nil)).Elem(), ExternalVolumeTopologyRequestRequiredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyRequestRequiredTopologyInput)(nil)).Elem(), ExternalVolumeTopologyRequestRequiredTopologyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeTopologyRequestRequiredTopologyArrayInput)(nil)).Elem(), ExternalVolumeTopologyRequestRequiredTopologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobHcl2Input)(nil)).Elem(), JobHcl2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobHcl2PtrInput)(nil)).Elem(), JobHcl2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTaskGroupInput)(nil)).Elem(), JobTaskGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTaskGroupArrayInput)(nil)).Elem(), JobTaskGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTaskGroupTaskInput)(nil)).Elem(), JobTaskGroupTaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTaskGroupTaskArrayInput)(nil)).Elem(), JobTaskGroupTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTaskGroupTaskVolumeMountInput)(nil)).Elem(), JobTaskGroupTaskVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTaskGroupTaskVolumeMountArrayInput)(nil)).Elem(), JobTaskGroupTaskVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTaskGroupVolumeInput)(nil)).Elem(), JobTaskGroupVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobTaskGroupVolumeArrayInput)(nil)).Elem(), JobTaskGroupVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCapabilitiesInput)(nil)).Elem(), NamespaceCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCapabilitiesPtrInput)(nil)).Elem(), NamespaceCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceNodePoolConfigInput)(nil)).Elem(), NamespaceNodePoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceNodePoolConfigPtrInput)(nil)).Elem(), NamespaceNodePoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolSchedulerConfigInput)(nil)).Elem(), NodePoolSchedulerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolSchedulerConfigPtrInput)(nil)).Elem(), NodePoolSchedulerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderHeaderInput)(nil)).Elem(), ProviderHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderHeaderArrayInput)(nil)).Elem(), ProviderHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuoteSpecificationLimitInput)(nil)).Elem(), QuoteSpecificationLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuoteSpecificationLimitArrayInput)(nil)).Elem(), QuoteSpecificationLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuoteSpecificationLimitRegionLimitInput)(nil)).Elem(), QuoteSpecificationLimitRegionLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeCapabilityInput)(nil)).Elem(), VolumeCapabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeCapabilityArrayInput)(nil)).Elem(), VolumeCapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountOptionsInput)(nil)).Elem(), VolumeMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountOptionsPtrInput)(nil)).Elem(), VolumeMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTopologyInput)(nil)).Elem(), VolumeTopologyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTopologyArrayInput)(nil)).Elem(), VolumeTopologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTopologyRequestInput)(nil)).Elem(), VolumeTopologyRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTopologyRequestPtrInput)(nil)).Elem(), VolumeTopologyRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTopologyRequestRequiredInput)(nil)).Elem(), VolumeTopologyRequestRequiredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTopologyRequestRequiredPtrInput)(nil)).Elem(), VolumeTopologyRequestRequiredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTopologyRequestRequiredTopologyInput)(nil)).Elem(), VolumeTopologyRequestRequiredTopologyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTopologyRequestRequiredTopologyArrayInput)(nil)).Elem(), VolumeTopologyRequestRequiredTopologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclPoliciesPolicyInput)(nil)).Elem(), GetAclPoliciesPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclPoliciesPolicyArrayInput)(nil)).Elem(), GetAclPoliciesPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclRolePolicyInput)(nil)).Elem(), GetAclRolePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclRolePolicyArrayInput)(nil)).Elem(), GetAclRolePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclRolesAclRoleInput)(nil)).Elem(), GetAclRolesAclRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclRolesAclRoleArrayInput)(nil)).Elem(), GetAclRolesAclRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclRolesAclRolePolicyInput)(nil)).Elem(), GetAclRolesAclRolePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclRolesAclRolePolicyArrayInput)(nil)).Elem(), GetAclRolesAclRolePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclTokenRoleInput)(nil)).Elem(), GetAclTokenRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclTokenRoleArrayInput)(nil)).Elem(), GetAclTokenRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclTokensAclTokenInput)(nil)).Elem(), GetAclTokensAclTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclTokensAclTokenArrayInput)(nil)).Elem(), GetAclTokensAclTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclTokensAclTokenRoleInput)(nil)).Elem(), GetAclTokensAclTokenRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclTokensAclTokenRoleArrayInput)(nil)).Elem(), GetAclTokensAclTokenRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllocationsAllocationInput)(nil)).Elem(), GetAllocationsAllocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllocationsAllocationArrayInput)(nil)).Elem(), GetAllocationsAllocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDynamicHostVolumeCapabilityInput)(nil)).Elem(), GetDynamicHostVolumeCapabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDynamicHostVolumeCapabilityArrayInput)(nil)).Elem(), GetDynamicHostVolumeCapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDynamicHostVolumeConstraintInput)(nil)).Elem(), GetDynamicHostVolumeConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDynamicHostVolumeConstraintArrayInput)(nil)).Elem(), GetDynamicHostVolumeConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobConstraintInput)(nil)).Elem(), GetJobConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobConstraintArrayInput)(nil)).Elem(), GetJobConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobPeriodicConfigInput)(nil)).Elem(), GetJobPeriodicConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobPeriodicConfigArrayInput)(nil)).Elem(), GetJobPeriodicConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobTaskGroupInput)(nil)).Elem(), GetJobTaskGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobTaskGroupArrayInput)(nil)).Elem(), GetJobTaskGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobTaskGroupTaskInput)(nil)).Elem(), GetJobTaskGroupTaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobTaskGroupTaskArrayInput)(nil)).Elem(), GetJobTaskGroupTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobTaskGroupTaskVolumeMountInput)(nil)).Elem(), GetJobTaskGroupTaskVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobTaskGroupTaskVolumeMountArrayInput)(nil)).Elem(), GetJobTaskGroupTaskVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobTaskGroupVolumeInput)(nil)).Elem(), GetJobTaskGroupVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobTaskGroupVolumeArrayInput)(nil)).Elem(), GetJobTaskGroupVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJwksKeyInput)(nil)).Elem(), GetJwksKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJwksKeyArrayInput)(nil)).Elem(), GetJwksKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespaceCapabilityInput)(nil)).Elem(), GetNamespaceCapabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespaceCapabilityArrayInput)(nil)).Elem(), GetNamespaceCapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespaceNodePoolConfigInput)(nil)).Elem(), GetNamespaceNodePoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespaceNodePoolConfigArrayInput)(nil)).Elem(), GetNamespaceNodePoolConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolSchedulerConfigInput)(nil)).Elem(), GetNodePoolSchedulerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolSchedulerConfigArrayInput)(nil)).Elem(), GetNodePoolSchedulerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolsNodePoolInput)(nil)).Elem(), GetNodePoolsNodePoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolsNodePoolArrayInput)(nil)).Elem(), GetNodePoolsNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolsNodePoolSchedulerConfigInput)(nil)).Elem(), GetNodePoolsNodePoolSchedulerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolsNodePoolSchedulerConfigArrayInput)(nil)).Elem(), GetNodePoolsNodePoolSchedulerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPluginNodeInput)(nil)).Elem(), GetPluginNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPluginNodeArrayInput)(nil)).Elem(), GetPluginNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScalingPoliciesPolicyInput)(nil)).Elem(), GetScalingPoliciesPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScalingPoliciesPolicyArrayInput)(nil)).Elem(), GetScalingPoliciesPolicyArray{})
	pulumi.RegisterOutputType(AclAuthMethodConfigOutput{})
	pulumi.RegisterOutputType(AclAuthMethodConfigPtrOutput{})
	pulumi.RegisterOutputType(AclAuthMethodConfigOidcClientAssertionOutput{})
	pulumi.RegisterOutputType(AclAuthMethodConfigOidcClientAssertionPtrOutput{})
	pulumi.RegisterOutputType(AclAuthMethodConfigOidcClientAssertionPrivateKeyOutput{})
	pulumi.RegisterOutputType(AclAuthMethodConfigOidcClientAssertionPrivateKeyPtrOutput{})
	pulumi.RegisterOutputType(AclPolicyJobAclOutput{})
	pulumi.RegisterOutputType(AclPolicyJobAclPtrOutput{})
	pulumi.RegisterOutputType(AclRolePolicyOutput{})
	pulumi.RegisterOutputType(AclRolePolicyArrayOutput{})
	pulumi.RegisterOutputType(AclTokenRoleOutput{})
	pulumi.RegisterOutputType(AclTokenRoleArrayOutput{})
	pulumi.RegisterOutputType(CsiVolumeCapabilityOutput{})
	pulumi.RegisterOutputType(CsiVolumeCapabilityArrayOutput{})
	pulumi.RegisterOutputType(CsiVolumeMountOptionsOutput{})
	pulumi.RegisterOutputType(CsiVolumeMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationCapabilityOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationCapabilityArrayOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationMountOptionsOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationTopologyOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationTopologyArrayOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationTopologyRequestOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationTopologyRequestPtrOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationTopologyRequestRequiredOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationTopologyRequestRequiredPtrOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationTopologyRequestRequiredTopologyOutput{})
	pulumi.RegisterOutputType(CsiVolumeRegistrationTopologyRequestRequiredTopologyArrayOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyArrayOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyRequestOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyRequestPtrOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyRequestPreferredOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyRequestPreferredPtrOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyRequestPreferredTopologyOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyRequestPreferredTopologyArrayOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyRequestRequiredOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyRequestRequiredPtrOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyRequestRequiredTopologyOutput{})
	pulumi.RegisterOutputType(CsiVolumeTopologyRequestRequiredTopologyArrayOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeCapabilityOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeCapabilityArrayOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeConstraintOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeConstraintArrayOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeRegistrationCapabilityOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeRegistrationCapabilityArrayOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeRegistrationConstraintOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeRegistrationConstraintArrayOutput{})
	pulumi.RegisterOutputType(ExternalVolumeCapabilityOutput{})
	pulumi.RegisterOutputType(ExternalVolumeCapabilityArrayOutput{})
	pulumi.RegisterOutputType(ExternalVolumeMountOptionsOutput{})
	pulumi.RegisterOutputType(ExternalVolumeMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyArrayOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyRequestOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyRequestPtrOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyRequestPreferredOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyRequestPreferredPtrOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyRequestPreferredTopologyOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyRequestPreferredTopologyArrayOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyRequestRequiredOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyRequestRequiredPtrOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyRequestRequiredTopologyOutput{})
	pulumi.RegisterOutputType(ExternalVolumeTopologyRequestRequiredTopologyArrayOutput{})
	pulumi.RegisterOutputType(JobHcl2Output{})
	pulumi.RegisterOutputType(JobHcl2PtrOutput{})
	pulumi.RegisterOutputType(JobTaskGroupOutput{})
	pulumi.RegisterOutputType(JobTaskGroupArrayOutput{})
	pulumi.RegisterOutputType(JobTaskGroupTaskOutput{})
	pulumi.RegisterOutputType(JobTaskGroupTaskArrayOutput{})
	pulumi.RegisterOutputType(JobTaskGroupTaskVolumeMountOutput{})
	pulumi.RegisterOutputType(JobTaskGroupTaskVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(JobTaskGroupVolumeOutput{})
	pulumi.RegisterOutputType(JobTaskGroupVolumeArrayOutput{})
	pulumi.RegisterOutputType(NamespaceCapabilitiesOutput{})
	pulumi.RegisterOutputType(NamespaceCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(NamespaceNodePoolConfigOutput{})
	pulumi.RegisterOutputType(NamespaceNodePoolConfigPtrOutput{})
	pulumi.RegisterOutputType(NodePoolSchedulerConfigOutput{})
	pulumi.RegisterOutputType(NodePoolSchedulerConfigPtrOutput{})
	pulumi.RegisterOutputType(ProviderHeaderOutput{})
	pulumi.RegisterOutputType(ProviderHeaderArrayOutput{})
	pulumi.RegisterOutputType(QuoteSpecificationLimitOutput{})
	pulumi.RegisterOutputType(QuoteSpecificationLimitArrayOutput{})
	pulumi.RegisterOutputType(QuoteSpecificationLimitRegionLimitOutput{})
	pulumi.RegisterOutputType(VolumeCapabilityOutput{})
	pulumi.RegisterOutputType(VolumeCapabilityArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountOptionsOutput{})
	pulumi.RegisterOutputType(VolumeMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(VolumeTopologyOutput{})
	pulumi.RegisterOutputType(VolumeTopologyArrayOutput{})
	pulumi.RegisterOutputType(VolumeTopologyRequestOutput{})
	pulumi.RegisterOutputType(VolumeTopologyRequestPtrOutput{})
	pulumi.RegisterOutputType(VolumeTopologyRequestRequiredOutput{})
	pulumi.RegisterOutputType(VolumeTopologyRequestRequiredPtrOutput{})
	pulumi.RegisterOutputType(VolumeTopologyRequestRequiredTopologyOutput{})
	pulumi.RegisterOutputType(VolumeTopologyRequestRequiredTopologyArrayOutput{})
	pulumi.RegisterOutputType(GetAclPoliciesPolicyOutput{})
	pulumi.RegisterOutputType(GetAclPoliciesPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetAclRolePolicyOutput{})
	pulumi.RegisterOutputType(GetAclRolePolicyArrayOutput{})
	pulumi.RegisterOutputType(GetAclRolesAclRoleOutput{})
	pulumi.RegisterOutputType(GetAclRolesAclRoleArrayOutput{})
	pulumi.RegisterOutputType(GetAclRolesAclRolePolicyOutput{})
	pulumi.RegisterOutputType(GetAclRolesAclRolePolicyArrayOutput{})
	pulumi.RegisterOutputType(GetAclTokenRoleOutput{})
	pulumi.RegisterOutputType(GetAclTokenRoleArrayOutput{})
	pulumi.RegisterOutputType(GetAclTokensAclTokenOutput{})
	pulumi.RegisterOutputType(GetAclTokensAclTokenArrayOutput{})
	pulumi.RegisterOutputType(GetAclTokensAclTokenRoleOutput{})
	pulumi.RegisterOutputType(GetAclTokensAclTokenRoleArrayOutput{})
	pulumi.RegisterOutputType(GetAllocationsAllocationOutput{})
	pulumi.RegisterOutputType(GetAllocationsAllocationArrayOutput{})
	pulumi.RegisterOutputType(GetDynamicHostVolumeCapabilityOutput{})
	pulumi.RegisterOutputType(GetDynamicHostVolumeCapabilityArrayOutput{})
	pulumi.RegisterOutputType(GetDynamicHostVolumeConstraintOutput{})
	pulumi.RegisterOutputType(GetDynamicHostVolumeConstraintArrayOutput{})
	pulumi.RegisterOutputType(GetJobConstraintOutput{})
	pulumi.RegisterOutputType(GetJobConstraintArrayOutput{})
	pulumi.RegisterOutputType(GetJobPeriodicConfigOutput{})
	pulumi.RegisterOutputType(GetJobPeriodicConfigArrayOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupArrayOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupTaskOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupTaskArrayOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupTaskVolumeMountOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupTaskVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupVolumeOutput{})
	pulumi.RegisterOutputType(GetJobTaskGroupVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetJwksKeyOutput{})
	pulumi.RegisterOutputType(GetJwksKeyArrayOutput{})
	pulumi.RegisterOutputType(GetNamespaceCapabilityOutput{})
	pulumi.RegisterOutputType(GetNamespaceCapabilityArrayOutput{})
	pulumi.RegisterOutputType(GetNamespaceNodePoolConfigOutput{})
	pulumi.RegisterOutputType(GetNamespaceNodePoolConfigArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolSchedulerConfigOutput{})
	pulumi.RegisterOutputType(GetNodePoolSchedulerConfigArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolsNodePoolOutput{})
	pulumi.RegisterOutputType(GetNodePoolsNodePoolArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolsNodePoolSchedulerConfigOutput{})
	pulumi.RegisterOutputType(GetNodePoolsNodePoolSchedulerConfigArrayOutput{})
	pulumi.RegisterOutputType(GetPluginNodeOutput{})
	pulumi.RegisterOutputType(GetPluginNodeArrayOutput{})
	pulumi.RegisterOutputType(GetScalingPoliciesPolicyOutput{})
	pulumi.RegisterOutputType(GetScalingPoliciesPolicyArrayOutput{})
}
