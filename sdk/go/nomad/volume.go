// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// Registering a volume:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ebs, err := nomad.GetPlugin(ctx, &nomad.GetPluginArgs{
//				PluginId:       "aws-ebs0",
//				WaitForHealthy: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = nomad.NewVolume(ctx, "mysqlVolume", &nomad.VolumeArgs{
//				Type:       pulumi.String("csi"),
//				PluginId:   pulumi.String("aws-ebs0"),
//				VolumeId:   pulumi.String("mysql_volume"),
//				ExternalId: pulumi.Any(module.Hashistack.Ebs_test_volume_id),
//				Capabilities: nomad.VolumeCapabilityArray{
//					&nomad.VolumeCapabilityArgs{
//						AccessMode:     pulumi.String("single-node-writer"),
//						AttachmentMode: pulumi.String("file-system"),
//					},
//				},
//				MountOptions: &nomad.VolumeMountOptionsArgs{
//					FsType: pulumi.String("ext4"),
//				},
//				TopologyRequest: &nomad.VolumeTopologyRequestArgs{
//					Required: &nomad.VolumeTopologyRequestRequiredArgs{
//						Topologies: nomad.VolumeTopologyRequestRequiredTopologyArray{
//							&nomad.VolumeTopologyRequestRequiredTopologyArgs{
//								Segments: pulumi.StringMap{
//									"rack": pulumi.String("R1"),
//									"zone": pulumi.String("us-east-1a"),
//								},
//							},
//							&nomad.VolumeTopologyRequestRequiredTopologyArgs{
//								Segments: pulumi.StringMap{
//									"rack": pulumi.String("R2"),
//								},
//							},
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				ebs,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Volume struct {
	pulumi.CustomResourceState

	// `(string: <optional>)` - **Deprecated**. Use `capability` block instead. Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	//
	// Deprecated: use capability instead
	AccessMode pulumi.StringPtrOutput `pulumi:"accessMode"`
	// `(string: <otional>)` - **Deprecated**. Use `capability` block instead. The storage API that will be used by the volume.
	//
	// Deprecated: use capability instead
	AttachmentMode pulumi.StringPtrOutput `pulumi:"attachmentMode"`
	// `(``Capability``: <required>)` - Options for validating the capability of a volume.
	Capabilities VolumeCapabilityArrayOutput `pulumi:"capabilities"`
	// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
	Context pulumi.StringMapOutput `pulumi:"context"`
	// `(boolean)`
	ControllerRequired pulumi.BoolOutput `pulumi:"controllerRequired"`
	// `(integer)`
	ControllersExpected pulumi.IntOutput `pulumi:"controllersExpected"`
	// `(integer)`
	ControllersHealthy pulumi.IntOutput `pulumi:"controllersHealthy"`
	// `(boolean: false)` - If true, the volume will be deregistered on destroy.
	DeregisterOnDestroy pulumi.BoolPtrOutput `pulumi:"deregisterOnDestroy"`
	// `(string: <required>)` - The ID of the physical volume from the storage provider.
	ExternalId pulumi.StringOutput `pulumi:"externalId"`
	// `(block: <optional>)` Options for mounting `block-device` volumes without a pre-formatted file system.
	MountOptions VolumeMountOptionsPtrOutput `pulumi:"mountOptions"`
	// `(string: <required>)` - The display name for the volume.
	Name pulumi.StringOutput `pulumi:"name"`
	// `(string: "default")` - The namespace in which to register the volume.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// `(integer)`
	NodesExpected pulumi.IntOutput `pulumi:"nodesExpected"`
	// `(integer)`
	NodesHealthy pulumi.IntOutput `pulumi:"nodesHealthy"`
	// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// `(string)`
	PluginProvider pulumi.StringOutput `pulumi:"pluginProvider"`
	// `(string)`
	PluginProviderVersion pulumi.StringOutput `pulumi:"pluginProviderVersion"`
	// `(boolean)`
	Schedulable pulumi.BoolOutput `pulumi:"schedulable"`
	// `(map[string]string: <optional>)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets pulumi.StringMapOutput `pulumi:"secrets"`
	// `(List of topologies)`
	Topologies VolumeTopologyArrayOutput `pulumi:"topologies"`
	// `(``TopologyRequest``: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
	TopologyRequest VolumeTopologyRequestPtrOutput `pulumi:"topologyRequest"`
	// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// `(string: <required>)` - The unique ID of the volume.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalId'")
	}
	if args.PluginId == nil {
		return nil, errors.New("invalid value for required argument 'PluginId'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	if args.Secrets != nil {
		args.Secrets = pulumi.ToSecret(args.Secrets).(pulumi.StringMapInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secrets",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("nomad:index/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("nomad:index/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// `(string: <optional>)` - **Deprecated**. Use `capability` block instead. Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	//
	// Deprecated: use capability instead
	AccessMode *string `pulumi:"accessMode"`
	// `(string: <otional>)` - **Deprecated**. Use `capability` block instead. The storage API that will be used by the volume.
	//
	// Deprecated: use capability instead
	AttachmentMode *string `pulumi:"attachmentMode"`
	// `(``Capability``: <required>)` - Options for validating the capability of a volume.
	Capabilities []VolumeCapability `pulumi:"capabilities"`
	// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
	Context map[string]string `pulumi:"context"`
	// `(boolean)`
	ControllerRequired *bool `pulumi:"controllerRequired"`
	// `(integer)`
	ControllersExpected *int `pulumi:"controllersExpected"`
	// `(integer)`
	ControllersHealthy *int `pulumi:"controllersHealthy"`
	// `(boolean: false)` - If true, the volume will be deregistered on destroy.
	DeregisterOnDestroy *bool `pulumi:"deregisterOnDestroy"`
	// `(string: <required>)` - The ID of the physical volume from the storage provider.
	ExternalId *string `pulumi:"externalId"`
	// `(block: <optional>)` Options for mounting `block-device` volumes without a pre-formatted file system.
	MountOptions *VolumeMountOptions `pulumi:"mountOptions"`
	// `(string: <required>)` - The display name for the volume.
	Name *string `pulumi:"name"`
	// `(string: "default")` - The namespace in which to register the volume.
	Namespace *string `pulumi:"namespace"`
	// `(integer)`
	NodesExpected *int `pulumi:"nodesExpected"`
	// `(integer)`
	NodesHealthy *int `pulumi:"nodesHealthy"`
	// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters map[string]string `pulumi:"parameters"`
	// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
	PluginId *string `pulumi:"pluginId"`
	// `(string)`
	PluginProvider *string `pulumi:"pluginProvider"`
	// `(string)`
	PluginProviderVersion *string `pulumi:"pluginProviderVersion"`
	// `(boolean)`
	Schedulable *bool `pulumi:"schedulable"`
	// `(map[string]string: <optional>)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets map[string]string `pulumi:"secrets"`
	// `(List of topologies)`
	Topologies []VolumeTopology `pulumi:"topologies"`
	// `(``TopologyRequest``: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
	TopologyRequest *VolumeTopologyRequest `pulumi:"topologyRequest"`
	// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
	Type *string `pulumi:"type"`
	// `(string: <required>)` - The unique ID of the volume.
	VolumeId *string `pulumi:"volumeId"`
}

type VolumeState struct {
	// `(string: <optional>)` - **Deprecated**. Use `capability` block instead. Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	//
	// Deprecated: use capability instead
	AccessMode pulumi.StringPtrInput
	// `(string: <otional>)` - **Deprecated**. Use `capability` block instead. The storage API that will be used by the volume.
	//
	// Deprecated: use capability instead
	AttachmentMode pulumi.StringPtrInput
	// `(``Capability``: <required>)` - Options for validating the capability of a volume.
	Capabilities VolumeCapabilityArrayInput
	// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
	Context pulumi.StringMapInput
	// `(boolean)`
	ControllerRequired pulumi.BoolPtrInput
	// `(integer)`
	ControllersExpected pulumi.IntPtrInput
	// `(integer)`
	ControllersHealthy pulumi.IntPtrInput
	// `(boolean: false)` - If true, the volume will be deregistered on destroy.
	DeregisterOnDestroy pulumi.BoolPtrInput
	// `(string: <required>)` - The ID of the physical volume from the storage provider.
	ExternalId pulumi.StringPtrInput
	// `(block: <optional>)` Options for mounting `block-device` volumes without a pre-formatted file system.
	MountOptions VolumeMountOptionsPtrInput
	// `(string: <required>)` - The display name for the volume.
	Name pulumi.StringPtrInput
	// `(string: "default")` - The namespace in which to register the volume.
	Namespace pulumi.StringPtrInput
	// `(integer)`
	NodesExpected pulumi.IntPtrInput
	// `(integer)`
	NodesHealthy pulumi.IntPtrInput
	// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters pulumi.StringMapInput
	// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
	PluginId pulumi.StringPtrInput
	// `(string)`
	PluginProvider pulumi.StringPtrInput
	// `(string)`
	PluginProviderVersion pulumi.StringPtrInput
	// `(boolean)`
	Schedulable pulumi.BoolPtrInput
	// `(map[string]string: <optional>)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets pulumi.StringMapInput
	// `(List of topologies)`
	Topologies VolumeTopologyArrayInput
	// `(``TopologyRequest``: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
	TopologyRequest VolumeTopologyRequestPtrInput
	// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
	Type pulumi.StringPtrInput
	// `(string: <required>)` - The unique ID of the volume.
	VolumeId pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// `(string: <optional>)` - **Deprecated**. Use `capability` block instead. Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	//
	// Deprecated: use capability instead
	AccessMode *string `pulumi:"accessMode"`
	// `(string: <otional>)` - **Deprecated**. Use `capability` block instead. The storage API that will be used by the volume.
	//
	// Deprecated: use capability instead
	AttachmentMode *string `pulumi:"attachmentMode"`
	// `(``Capability``: <required>)` - Options for validating the capability of a volume.
	Capabilities []VolumeCapability `pulumi:"capabilities"`
	// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
	Context map[string]string `pulumi:"context"`
	// `(boolean: false)` - If true, the volume will be deregistered on destroy.
	DeregisterOnDestroy *bool `pulumi:"deregisterOnDestroy"`
	// `(string: <required>)` - The ID of the physical volume from the storage provider.
	ExternalId string `pulumi:"externalId"`
	// `(block: <optional>)` Options for mounting `block-device` volumes without a pre-formatted file system.
	MountOptions *VolumeMountOptions `pulumi:"mountOptions"`
	// `(string: <required>)` - The display name for the volume.
	Name *string `pulumi:"name"`
	// `(string: "default")` - The namespace in which to register the volume.
	Namespace *string `pulumi:"namespace"`
	// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters map[string]string `pulumi:"parameters"`
	// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
	PluginId string `pulumi:"pluginId"`
	// `(map[string]string: <optional>)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets map[string]string `pulumi:"secrets"`
	// `(``TopologyRequest``: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
	TopologyRequest *VolumeTopologyRequest `pulumi:"topologyRequest"`
	// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
	Type *string `pulumi:"type"`
	// `(string: <required>)` - The unique ID of the volume.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// `(string: <optional>)` - **Deprecated**. Use `capability` block instead. Defines whether a volume should be available concurrently. Possible values are:
	// - `single-node-reader-only`
	// - `single-node-writer`
	// - `multi-node-reader-only`
	// - `multi-node-single-writer`
	// - `multi-node-multi-writer`
	//
	// Deprecated: use capability instead
	AccessMode pulumi.StringPtrInput
	// `(string: <otional>)` - **Deprecated**. Use `capability` block instead. The storage API that will be used by the volume.
	//
	// Deprecated: use capability instead
	AttachmentMode pulumi.StringPtrInput
	// `(``Capability``: <required>)` - Options for validating the capability of a volume.
	Capabilities VolumeCapabilityArrayInput
	// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
	Context pulumi.StringMapInput
	// `(boolean: false)` - If true, the volume will be deregistered on destroy.
	DeregisterOnDestroy pulumi.BoolPtrInput
	// `(string: <required>)` - The ID of the physical volume from the storage provider.
	ExternalId pulumi.StringInput
	// `(block: <optional>)` Options for mounting `block-device` volumes without a pre-formatted file system.
	MountOptions VolumeMountOptionsPtrInput
	// `(string: <required>)` - The display name for the volume.
	Name pulumi.StringPtrInput
	// `(string: "default")` - The namespace in which to register the volume.
	Namespace pulumi.StringPtrInput
	// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters pulumi.StringMapInput
	// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
	PluginId pulumi.StringInput
	// `(map[string]string: <optional>)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets pulumi.StringMapInput
	// `(``TopologyRequest``: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
	TopologyRequest VolumeTopologyRequestPtrInput
	// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
	Type pulumi.StringPtrInput
	// `(string: <required>)` - The unique ID of the volume.
	VolumeId pulumi.StringInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

func (i *Volume) ToOutput(ctx context.Context) pulumix.Output[*Volume] {
	return pulumix.Output[*Volume]{
		OutputState: i.ToVolumeOutputWithContext(ctx).OutputState,
	}
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

func (i VolumeArray) ToOutput(ctx context.Context) pulumix.Output[[]*Volume] {
	return pulumix.Output[[]*Volume]{
		OutputState: i.ToVolumeArrayOutputWithContext(ctx).OutputState,
	}
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

func (i VolumeMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Volume] {
	return pulumix.Output[map[string]*Volume]{
		OutputState: i.ToVolumeMapOutputWithContext(ctx).OutputState,
	}
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func (o VolumeOutput) ToOutput(ctx context.Context) pulumix.Output[*Volume] {
	return pulumix.Output[*Volume]{
		OutputState: o.OutputState,
	}
}

// `(string: <optional>)` - **Deprecated**. Use `capability` block instead. Defines whether a volume should be available concurrently. Possible values are:
// - `single-node-reader-only`
// - `single-node-writer`
// - `multi-node-reader-only`
// - `multi-node-single-writer`
// - `multi-node-multi-writer`
//
// Deprecated: use capability instead
func (o VolumeOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.AccessMode }).(pulumi.StringPtrOutput)
}

// `(string: <otional>)` - **Deprecated**. Use `capability` block instead. The storage API that will be used by the volume.
//
// Deprecated: use capability instead
func (o VolumeOutput) AttachmentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.AttachmentMode }).(pulumi.StringPtrOutput)
}

// `(“Capability“: <required>)` - Options for validating the capability of a volume.
func (o VolumeOutput) Capabilities() VolumeCapabilityArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeCapabilityArrayOutput { return v.Capabilities }).(VolumeCapabilityArrayOutput)
}

// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
func (o VolumeOutput) Context() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.Context }).(pulumi.StringMapOutput)
}

// `(boolean)`
func (o VolumeOutput) ControllerRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.ControllerRequired }).(pulumi.BoolOutput)
}

// `(integer)`
func (o VolumeOutput) ControllersExpected() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.ControllersExpected }).(pulumi.IntOutput)
}

// `(integer)`
func (o VolumeOutput) ControllersHealthy() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.ControllersHealthy }).(pulumi.IntOutput)
}

// `(boolean: false)` - If true, the volume will be deregistered on destroy.
func (o VolumeOutput) DeregisterOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.DeregisterOnDestroy }).(pulumi.BoolPtrOutput)
}

// `(string: <required>)` - The ID of the physical volume from the storage provider.
func (o VolumeOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ExternalId }).(pulumi.StringOutput)
}

// `(block: <optional>)` Options for mounting `block-device` volumes without a pre-formatted file system.
func (o VolumeOutput) MountOptions() VolumeMountOptionsPtrOutput {
	return o.ApplyT(func(v *Volume) VolumeMountOptionsPtrOutput { return v.MountOptions }).(VolumeMountOptionsPtrOutput)
}

// `(string: <required>)` - The display name for the volume.
func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `(string: "default")` - The namespace in which to register the volume.
func (o VolumeOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// `(integer)`
func (o VolumeOutput) NodesExpected() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.NodesExpected }).(pulumi.IntOutput)
}

// `(integer)`
func (o VolumeOutput) NodesHealthy() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.NodesHealthy }).(pulumi.IntOutput)
}

// `(map[string]string: <optional>)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
func (o VolumeOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
func (o VolumeOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// `(string)`
func (o VolumeOutput) PluginProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.PluginProvider }).(pulumi.StringOutput)
}

// `(string)`
func (o VolumeOutput) PluginProviderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.PluginProviderVersion }).(pulumi.StringOutput)
}

// `(boolean)`
func (o VolumeOutput) Schedulable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.Schedulable }).(pulumi.BoolOutput)
}

// `(map[string]string: <optional>)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
func (o VolumeOutput) Secrets() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.Secrets }).(pulumi.StringMapOutput)
}

// `(List of topologies)`
func (o VolumeOutput) Topologies() VolumeTopologyArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeTopologyArrayOutput { return v.Topologies }).(VolumeTopologyArrayOutput)
}

// `(“TopologyRequest“: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
func (o VolumeOutput) TopologyRequest() VolumeTopologyRequestPtrOutput {
	return o.ApplyT(func(v *Volume) VolumeTopologyRequestPtrOutput { return v.TopologyRequest }).(VolumeTopologyRequestPtrOutput)
}

// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
func (o VolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// `(string: <required>)` - The unique ID of the volume.
func (o VolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Volume] {
	return pulumix.Output[[]*Volume]{
		OutputState: o.OutputState,
	}
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Volume] {
	return pulumix.Output[map[string]*Volume]{
		OutputState: o.OutputState,
	}
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
