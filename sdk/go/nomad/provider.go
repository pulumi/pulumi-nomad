// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the nomad package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// URL of the root of the target Nomad agent.
	Address pulumi.StringPtrOutput `pulumi:"address"`
	// A path to a PEM-encoded certificate authority used to verify the remote agent's certificate.
	CaFile pulumi.StringPtrOutput `pulumi:"caFile"`
	// PEM-encoded certificate authority used to verify the remote agent's certificate.
	CaPem pulumi.StringPtrOutput `pulumi:"caPem"`
	// A path to a PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
	CertFile pulumi.StringPtrOutput `pulumi:"certFile"`
	// PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
	CertPem pulumi.StringPtrOutput `pulumi:"certPem"`
	// HTTP basic auth configuration.
	HttpAuth pulumi.StringPtrOutput `pulumi:"httpAuth"`
	// A path to a PEM-encoded private key, required if certFile or certPem is specified.
	KeyFile pulumi.StringPtrOutput `pulumi:"keyFile"`
	// PEM-encoded private key, required if certFile or certPem is specified.
	KeyPem pulumi.StringPtrOutput `pulumi:"keyPem"`
	// Region of the target Nomad agent.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// ACL token secret for API requests.
	SecretId pulumi.StringPtrOutput `pulumi:"secretId"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.Headers != nil {
		args.Headers = pulumi.ToSecret(args.Headers).(ProviderHeaderArrayInput)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:nomad", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// URL of the root of the target Nomad agent.
	Address *string `pulumi:"address"`
	// A path to a PEM-encoded certificate authority used to verify the remote agent's certificate.
	CaFile *string `pulumi:"caFile"`
	// PEM-encoded certificate authority used to verify the remote agent's certificate.
	CaPem *string `pulumi:"caPem"`
	// A path to a PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
	CertFile *string `pulumi:"certFile"`
	// PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
	CertPem *string `pulumi:"certPem"`
	// The headers to send with each Nomad request.
	Headers []ProviderHeader `pulumi:"headers"`
	// HTTP basic auth configuration.
	HttpAuth *string `pulumi:"httpAuth"`
	// A set of environment variables that are ignored by the provider when configuring the Nomad API client.
	IgnoreEnvVars map[string]bool `pulumi:"ignoreEnvVars"`
	// A path to a PEM-encoded private key, required if certFile or certPem is specified.
	KeyFile *string `pulumi:"keyFile"`
	// PEM-encoded private key, required if certFile or certPem is specified.
	KeyPem *string `pulumi:"keyPem"`
	// Region of the target Nomad agent.
	Region *string `pulumi:"region"`
	// ACL token secret for API requests.
	SecretId *string `pulumi:"secretId"`
	// Skip TLS verification on client side.
	SkipVerify *bool `pulumi:"skipVerify"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// URL of the root of the target Nomad agent.
	Address pulumi.StringPtrInput
	// A path to a PEM-encoded certificate authority used to verify the remote agent's certificate.
	CaFile pulumi.StringPtrInput
	// PEM-encoded certificate authority used to verify the remote agent's certificate.
	CaPem pulumi.StringPtrInput
	// A path to a PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
	CertFile pulumi.StringPtrInput
	// PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
	CertPem pulumi.StringPtrInput
	// The headers to send with each Nomad request.
	Headers ProviderHeaderArrayInput
	// HTTP basic auth configuration.
	HttpAuth pulumi.StringPtrInput
	// A set of environment variables that are ignored by the provider when configuring the Nomad API client.
	IgnoreEnvVars pulumi.BoolMapInput
	// A path to a PEM-encoded private key, required if certFile or certPem is specified.
	KeyFile pulumi.StringPtrInput
	// PEM-encoded private key, required if certFile or certPem is specified.
	KeyPem pulumi.StringPtrInput
	// Region of the target Nomad agent.
	Region pulumi.StringPtrInput
	// ACL token secret for API requests.
	SecretId pulumi.StringPtrInput
	// Skip TLS verification on client side.
	SkipVerify pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:nomad/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// URL of the root of the target Nomad agent.
func (o ProviderOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Address }).(pulumi.StringPtrOutput)
}

// A path to a PEM-encoded certificate authority used to verify the remote agent's certificate.
func (o ProviderOutput) CaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CaFile }).(pulumi.StringPtrOutput)
}

// PEM-encoded certificate authority used to verify the remote agent's certificate.
func (o ProviderOutput) CaPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CaPem }).(pulumi.StringPtrOutput)
}

// A path to a PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
func (o ProviderOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CertFile }).(pulumi.StringPtrOutput)
}

// PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
func (o ProviderOutput) CertPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CertPem }).(pulumi.StringPtrOutput)
}

// HTTP basic auth configuration.
func (o ProviderOutput) HttpAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.HttpAuth }).(pulumi.StringPtrOutput)
}

// A path to a PEM-encoded private key, required if certFile or certPem is specified.
func (o ProviderOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.KeyFile }).(pulumi.StringPtrOutput)
}

// PEM-encoded private key, required if certFile or certPem is specified.
func (o ProviderOutput) KeyPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.KeyPem }).(pulumi.StringPtrOutput)
}

// Region of the target Nomad agent.
func (o ProviderOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// ACL token secret for API requests.
func (o ProviderOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
