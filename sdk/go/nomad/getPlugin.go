// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Lookup a plugin by ID. The aim of this datasource is to determine whether
// a particular plugin exists on the cluster, to find information on the health
// and availability of the plugin, and to optionally wait for the plugin
// before performing actions the require an available plugin controller.
//
// If a plugin with the specified ID does not exist and the datasource is not
// configured to wait, it will result in an error. For simple existence checks,
// use the `getPlugins` listing datasource.
//
// ## Example Usage
//
// Check for the existence of a plugin:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-nomad/sdk/go/nomad"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := true
// 		_, err := nomad.GetPlugin(ctx, &nomad.GetPluginArgs{
// 			PluginId:       "aws-ebs0",
// 			WaitForHealthy: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// This will check for a plugin with the ID `aws-ebs0`, waiting until the plugin
// is healthy before returning.
func GetPlugin(ctx *pulumi.Context, args *GetPluginArgs, opts ...pulumi.InvokeOption) (*GetPluginResult, error) {
	var rv GetPluginResult
	err := ctx.Invoke("nomad:index/getPlugin:getPlugin", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlugin.
type GetPluginArgs struct {
	PluginId            string `pulumi:"pluginId"`
	WaitForHealthy      *bool  `pulumi:"waitForHealthy"`
	WaitForRegistration *bool  `pulumi:"waitForRegistration"`
}

// A collection of values returned by getPlugin.
type GetPluginResult struct {
	ControllerRequired  bool `pulumi:"controllerRequired"`
	ControllersExpected int  `pulumi:"controllersExpected"`
	ControllersHealthy  int  `pulumi:"controllersHealthy"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string          `pulumi:"id"`
	Nodes                 []GetPluginNode `pulumi:"nodes"`
	NodesExpected         int             `pulumi:"nodesExpected"`
	NodesHealthy          int             `pulumi:"nodesHealthy"`
	PluginId              string          `pulumi:"pluginId"`
	PluginProvider        string          `pulumi:"pluginProvider"`
	PluginProviderVersion string          `pulumi:"pluginProviderVersion"`
	WaitForHealthy        *bool           `pulumi:"waitForHealthy"`
	WaitForRegistration   *bool           `pulumi:"waitForRegistration"`
}
