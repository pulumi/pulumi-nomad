// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a quota specification in a Nomad cluster.
//
// ## Example Usage
//
// Registering a quota specification:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-nomad/sdk/go/nomad"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := nomad.NewQuoteSpecification(ctx, "prodApi", &nomad.QuoteSpecificationArgs{
// 			Description: pulumi.String("Production instances of backend API servers"),
// 			Limits: QuoteSpecificationLimitArray{
// 				&QuoteSpecificationLimitArgs{
// 					Region: pulumi.String("global"),
// 					RegionLimit: &QuoteSpecificationLimitRegionLimitArgs{
// 						Cpu:      pulumi.Int(2400),
// 						MemoryMb: pulumi.Int(1200),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type QuoteSpecification struct {
	pulumi.CustomResourceState

	// `(string: "")` - A description of the quota specification.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// `(block: <required>)` - A block of quota limits to enforce. Can
	// be repeated. See below for the structure of this block.
	Limits QuoteSpecificationLimitArrayOutput `pulumi:"limits"`
	// `(string: <required>)` - A unique name for the quota specification.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewQuoteSpecification registers a new resource with the given unique name, arguments, and options.
func NewQuoteSpecification(ctx *pulumi.Context,
	name string, args *QuoteSpecificationArgs, opts ...pulumi.ResourceOption) (*QuoteSpecification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Limits == nil {
		return nil, errors.New("invalid value for required argument 'Limits'")
	}
	var resource QuoteSpecification
	err := ctx.RegisterResource("nomad:index/quoteSpecification:QuoteSpecification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQuoteSpecification gets an existing QuoteSpecification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuoteSpecification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QuoteSpecificationState, opts ...pulumi.ResourceOption) (*QuoteSpecification, error) {
	var resource QuoteSpecification
	err := ctx.ReadResource("nomad:index/quoteSpecification:QuoteSpecification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QuoteSpecification resources.
type quoteSpecificationState struct {
	// `(string: "")` - A description of the quota specification.
	Description *string `pulumi:"description"`
	// `(block: <required>)` - A block of quota limits to enforce. Can
	// be repeated. See below for the structure of this block.
	Limits []QuoteSpecificationLimit `pulumi:"limits"`
	// `(string: <required>)` - A unique name for the quota specification.
	Name *string `pulumi:"name"`
}

type QuoteSpecificationState struct {
	// `(string: "")` - A description of the quota specification.
	Description pulumi.StringPtrInput
	// `(block: <required>)` - A block of quota limits to enforce. Can
	// be repeated. See below for the structure of this block.
	Limits QuoteSpecificationLimitArrayInput
	// `(string: <required>)` - A unique name for the quota specification.
	Name pulumi.StringPtrInput
}

func (QuoteSpecificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*quoteSpecificationState)(nil)).Elem()
}

type quoteSpecificationArgs struct {
	// `(string: "")` - A description of the quota specification.
	Description *string `pulumi:"description"`
	// `(block: <required>)` - A block of quota limits to enforce. Can
	// be repeated. See below for the structure of this block.
	Limits []QuoteSpecificationLimit `pulumi:"limits"`
	// `(string: <required>)` - A unique name for the quota specification.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a QuoteSpecification resource.
type QuoteSpecificationArgs struct {
	// `(string: "")` - A description of the quota specification.
	Description pulumi.StringPtrInput
	// `(block: <required>)` - A block of quota limits to enforce. Can
	// be repeated. See below for the structure of this block.
	Limits QuoteSpecificationLimitArrayInput
	// `(string: <required>)` - A unique name for the quota specification.
	Name pulumi.StringPtrInput
}

func (QuoteSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*quoteSpecificationArgs)(nil)).Elem()
}

type QuoteSpecificationInput interface {
	pulumi.Input

	ToQuoteSpecificationOutput() QuoteSpecificationOutput
	ToQuoteSpecificationOutputWithContext(ctx context.Context) QuoteSpecificationOutput
}

func (*QuoteSpecification) ElementType() reflect.Type {
	return reflect.TypeOf((**QuoteSpecification)(nil)).Elem()
}

func (i *QuoteSpecification) ToQuoteSpecificationOutput() QuoteSpecificationOutput {
	return i.ToQuoteSpecificationOutputWithContext(context.Background())
}

func (i *QuoteSpecification) ToQuoteSpecificationOutputWithContext(ctx context.Context) QuoteSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuoteSpecificationOutput)
}

// QuoteSpecificationArrayInput is an input type that accepts QuoteSpecificationArray and QuoteSpecificationArrayOutput values.
// You can construct a concrete instance of `QuoteSpecificationArrayInput` via:
//
//          QuoteSpecificationArray{ QuoteSpecificationArgs{...} }
type QuoteSpecificationArrayInput interface {
	pulumi.Input

	ToQuoteSpecificationArrayOutput() QuoteSpecificationArrayOutput
	ToQuoteSpecificationArrayOutputWithContext(context.Context) QuoteSpecificationArrayOutput
}

type QuoteSpecificationArray []QuoteSpecificationInput

func (QuoteSpecificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QuoteSpecification)(nil)).Elem()
}

func (i QuoteSpecificationArray) ToQuoteSpecificationArrayOutput() QuoteSpecificationArrayOutput {
	return i.ToQuoteSpecificationArrayOutputWithContext(context.Background())
}

func (i QuoteSpecificationArray) ToQuoteSpecificationArrayOutputWithContext(ctx context.Context) QuoteSpecificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuoteSpecificationArrayOutput)
}

// QuoteSpecificationMapInput is an input type that accepts QuoteSpecificationMap and QuoteSpecificationMapOutput values.
// You can construct a concrete instance of `QuoteSpecificationMapInput` via:
//
//          QuoteSpecificationMap{ "key": QuoteSpecificationArgs{...} }
type QuoteSpecificationMapInput interface {
	pulumi.Input

	ToQuoteSpecificationMapOutput() QuoteSpecificationMapOutput
	ToQuoteSpecificationMapOutputWithContext(context.Context) QuoteSpecificationMapOutput
}

type QuoteSpecificationMap map[string]QuoteSpecificationInput

func (QuoteSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QuoteSpecification)(nil)).Elem()
}

func (i QuoteSpecificationMap) ToQuoteSpecificationMapOutput() QuoteSpecificationMapOutput {
	return i.ToQuoteSpecificationMapOutputWithContext(context.Background())
}

func (i QuoteSpecificationMap) ToQuoteSpecificationMapOutputWithContext(ctx context.Context) QuoteSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuoteSpecificationMapOutput)
}

type QuoteSpecificationOutput struct{ *pulumi.OutputState }

func (QuoteSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuoteSpecification)(nil)).Elem()
}

func (o QuoteSpecificationOutput) ToQuoteSpecificationOutput() QuoteSpecificationOutput {
	return o
}

func (o QuoteSpecificationOutput) ToQuoteSpecificationOutputWithContext(ctx context.Context) QuoteSpecificationOutput {
	return o
}

type QuoteSpecificationArrayOutput struct{ *pulumi.OutputState }

func (QuoteSpecificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QuoteSpecification)(nil)).Elem()
}

func (o QuoteSpecificationArrayOutput) ToQuoteSpecificationArrayOutput() QuoteSpecificationArrayOutput {
	return o
}

func (o QuoteSpecificationArrayOutput) ToQuoteSpecificationArrayOutputWithContext(ctx context.Context) QuoteSpecificationArrayOutput {
	return o
}

func (o QuoteSpecificationArrayOutput) Index(i pulumi.IntInput) QuoteSpecificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QuoteSpecification {
		return vs[0].([]*QuoteSpecification)[vs[1].(int)]
	}).(QuoteSpecificationOutput)
}

type QuoteSpecificationMapOutput struct{ *pulumi.OutputState }

func (QuoteSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QuoteSpecification)(nil)).Elem()
}

func (o QuoteSpecificationMapOutput) ToQuoteSpecificationMapOutput() QuoteSpecificationMapOutput {
	return o
}

func (o QuoteSpecificationMapOutput) ToQuoteSpecificationMapOutputWithContext(ctx context.Context) QuoteSpecificationMapOutput {
	return o
}

func (o QuoteSpecificationMapOutput) MapIndex(k pulumi.StringInput) QuoteSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QuoteSpecification {
		return vs[0].(map[string]*QuoteSpecification)[vs[1].(string)]
	}).(QuoteSpecificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QuoteSpecificationInput)(nil)).Elem(), &QuoteSpecification{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuoteSpecificationArrayInput)(nil)).Elem(), QuoteSpecificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuoteSpecificationMapInput)(nil)).Elem(), QuoteSpecificationMap{})
	pulumi.RegisterOutputType(QuoteSpecificationOutput{})
	pulumi.RegisterOutputType(QuoteSpecificationArrayOutput{})
	pulumi.RegisterOutputType(QuoteSpecificationMapOutput{})
}
