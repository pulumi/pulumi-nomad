// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information on a dynamic host volume from Nomad.
//
// ## Example Usage
//
// Check for the existing of a host volume:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nomad.LookupDynamicHostVolume(ctx, &nomad.LookupDynamicHostVolumeArgs{
//				Namespace: pulumi.StringRef("prod"),
//				Id:        "d688ff7a-d299-11ef-ae3c-6f2400953c18",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// This will check for a dynamic host volume with the ID
// `d688ff7a-d299-11ef-ae3c-6f2400953c18`.
func LookupDynamicHostVolume(ctx *pulumi.Context, args *LookupDynamicHostVolumeArgs, opts ...pulumi.InvokeOption) (*LookupDynamicHostVolumeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDynamicHostVolumeResult
	err := ctx.Invoke("nomad:index/getDynamicHostVolume:getDynamicHostVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDynamicHostVolume.
type LookupDynamicHostVolumeArgs struct {
	// `(string)` - the ID of the volume
	Id string `pulumi:"id"`
	// `(string)` - the namespace of the volume. Defaults to `"default"`
	Namespace *string `pulumi:"namespace"`
}

// A collection of values returned by getDynamicHostVolume.
type LookupDynamicHostVolumeResult struct {
	// `(block)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities []GetDynamicHostVolumeCapability `pulumi:"capabilities"`
	// `(string)` - The size of the volume, in human-friendly format
	// (ex. 10 GiB)
	Capacity string `pulumi:"capacity"`
	// `(int)` - The size of the volume, in bytes.
	CapacityBytes int `pulumi:"capacityBytes"`
	// `(string)` - The requested maximum capacity of the volume, in
	// human-friendly format (ex. 10 GiB).
	CapacityMax string `pulumi:"capacityMax"`
	// `(string)` - The requested maximum capacity of the
	// volume, in bytes.
	CapacityMaxBytes int `pulumi:"capacityMaxBytes"`
	// `(string)` - The requested minimum capacity of the volume, in
	// human-friendly format (ex. 10 GiB).
	CapacityMin string `pulumi:"capacityMin"`
	// `(string)` - The requested minimum capacity of the
	// volume, in bytes.
	CapacityMinBytes int `pulumi:"capacityMinBytes"`
	// `(block)` - The restrictions used to place the volume on a node,
	// similar to the [`constraint`][] block on a Nomad job specification. A volume
	// may have multiple `constraint` blocks. Each constraint block has the following
	// attributes.
	Constraints []GetDynamicHostVolumeConstraint `pulumi:"constraints"`
	// `(string)` - The path on disk where the volume exists.
	HostPath string `pulumi:"hostPath"`
	Id       string `pulumi:"id"`
	// `(string)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names are be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name string `pulumi:"name"`
	// `(string)` - The namespace of the volume.
	Namespace *string `pulumi:"namespace"`
	// `(string)` - A specific node where the volume is mounted.
	NodeId string `pulumi:"nodeId"`
	// `(string: <optional>)` - The node pool of the node where the
	// volume is mounted.
	NodePool string `pulumi:"nodePool"`
	// `(map<string|string>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	Parameters map[string]string `pulumi:"parameters"`
	// `(string: <required>)` - The ID of the [dynamic host volume
	// plugin][dhvPlugin] that manages this volume.
	PluginId string `pulumi:"pluginId"`
	State    string `pulumi:"state"`
}

func LookupDynamicHostVolumeOutput(ctx *pulumi.Context, args LookupDynamicHostVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupDynamicHostVolumeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDynamicHostVolumeResultOutput, error) {
			args := v.(LookupDynamicHostVolumeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("nomad:index/getDynamicHostVolume:getDynamicHostVolume", args, LookupDynamicHostVolumeResultOutput{}, options).(LookupDynamicHostVolumeResultOutput), nil
		}).(LookupDynamicHostVolumeResultOutput)
}

// A collection of arguments for invoking getDynamicHostVolume.
type LookupDynamicHostVolumeOutputArgs struct {
	// `(string)` - the ID of the volume
	Id pulumi.StringInput `pulumi:"id"`
	// `(string)` - the namespace of the volume. Defaults to `"default"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (LookupDynamicHostVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDynamicHostVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getDynamicHostVolume.
type LookupDynamicHostVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupDynamicHostVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDynamicHostVolumeResult)(nil)).Elem()
}

func (o LookupDynamicHostVolumeResultOutput) ToLookupDynamicHostVolumeResultOutput() LookupDynamicHostVolumeResultOutput {
	return o
}

func (o LookupDynamicHostVolumeResultOutput) ToLookupDynamicHostVolumeResultOutputWithContext(ctx context.Context) LookupDynamicHostVolumeResultOutput {
	return o
}

// `(block)` - Option for validating the capability of a
// volume. Each capability block has the following attributes:
func (o LookupDynamicHostVolumeResultOutput) Capabilities() GetDynamicHostVolumeCapabilityArrayOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) []GetDynamicHostVolumeCapability { return v.Capabilities }).(GetDynamicHostVolumeCapabilityArrayOutput)
}

// `(string)` - The size of the volume, in human-friendly format
// (ex. 10 GiB)
func (o LookupDynamicHostVolumeResultOutput) Capacity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) string { return v.Capacity }).(pulumi.StringOutput)
}

// `(int)` - The size of the volume, in bytes.
func (o LookupDynamicHostVolumeResultOutput) CapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) int { return v.CapacityBytes }).(pulumi.IntOutput)
}

// `(string)` - The requested maximum capacity of the volume, in
// human-friendly format (ex. 10 GiB).
func (o LookupDynamicHostVolumeResultOutput) CapacityMax() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) string { return v.CapacityMax }).(pulumi.StringOutput)
}

// `(string)` - The requested maximum capacity of the
// volume, in bytes.
func (o LookupDynamicHostVolumeResultOutput) CapacityMaxBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) int { return v.CapacityMaxBytes }).(pulumi.IntOutput)
}

// `(string)` - The requested minimum capacity of the volume, in
// human-friendly format (ex. 10 GiB).
func (o LookupDynamicHostVolumeResultOutput) CapacityMin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) string { return v.CapacityMin }).(pulumi.StringOutput)
}

// `(string)` - The requested minimum capacity of the
// volume, in bytes.
func (o LookupDynamicHostVolumeResultOutput) CapacityMinBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) int { return v.CapacityMinBytes }).(pulumi.IntOutput)
}

// `(block)` - The restrictions used to place the volume on a node,
// similar to the [`constraint`][] block on a Nomad job specification. A volume
// may have multiple `constraint` blocks. Each constraint block has the following
// attributes.
func (o LookupDynamicHostVolumeResultOutput) Constraints() GetDynamicHostVolumeConstraintArrayOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) []GetDynamicHostVolumeConstraint { return v.Constraints }).(GetDynamicHostVolumeConstraintArrayOutput)
}

// `(string)` - The path on disk where the volume exists.
func (o LookupDynamicHostVolumeResultOutput) HostPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) string { return v.HostPath }).(pulumi.StringOutput)
}

func (o LookupDynamicHostVolumeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) string { return v.Id }).(pulumi.StringOutput)
}

// `(string)` - The name of the volume, which is used as the
// [`volume.source`][volumeSource] field in job specifications that claim this
// volume. Host volume names are be unique per node. Names are visible to any
// user with `node:read` ACL, even across namespaces, so they should not be
// treated as sensitive values.
func (o LookupDynamicHostVolumeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) string { return v.Name }).(pulumi.StringOutput)
}

// `(string)` - The namespace of the volume.
func (o LookupDynamicHostVolumeResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// `(string)` - A specific node where the volume is mounted.
func (o LookupDynamicHostVolumeResultOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) string { return v.NodeId }).(pulumi.StringOutput)
}

// `(string: <optional>)` - The node pool of the node where the
// volume is mounted.
func (o LookupDynamicHostVolumeResultOutput) NodePool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) string { return v.NodePool }).(pulumi.StringOutput)
}

// `(map<string|string>)` - A key-value map of strings
// passed directly to the plugin to configure the volume. The details of these
// parameters are specific to the plugin.
func (o LookupDynamicHostVolumeResultOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// `(string: <required>)` - The ID of the [dynamic host volume
// plugin][dhvPlugin] that manages this volume.
func (o LookupDynamicHostVolumeResultOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) string { return v.PluginId }).(pulumi.StringOutput)
}

func (o LookupDynamicHostVolumeResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDynamicHostVolumeResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDynamicHostVolumeResultOutput{})
}
