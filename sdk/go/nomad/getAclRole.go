// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information on an ACL Role.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nomad.LookupAclRole(ctx, &nomad.LookupAclRoleArgs{
//				Id: "aa534e09-6a07-0a45-2295-a7f77063d429",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAclRole(ctx *pulumi.Context, args *LookupAclRoleArgs, opts ...pulumi.InvokeOption) (*LookupAclRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAclRoleResult
	err := ctx.Invoke("nomad:index/getAclRole:getAclRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAclRole.
type LookupAclRoleArgs struct {
	// `(string)` The unique identifier of the ACL Role.
	Id string `pulumi:"id"`
}

// A collection of values returned by getAclRole.
type LookupAclRoleResult struct {
	// `(string)` - The description of the ACL Role.
	Description string `pulumi:"description"`
	// `(string)` - The ACL Role unique identifier.
	Id string `pulumi:"id"`
	// `(string)` - Unique name of the ACL role.
	Name string `pulumi:"name"`
	// `(set)` - The policies applied to the role.
	Policies []GetAclRolePolicy `pulumi:"policies"`
}

func LookupAclRoleOutput(ctx *pulumi.Context, args LookupAclRoleOutputArgs, opts ...pulumi.InvokeOption) LookupAclRoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAclRoleResult, error) {
			args := v.(LookupAclRoleArgs)
			r, err := LookupAclRole(ctx, &args, opts...)
			var s LookupAclRoleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAclRoleResultOutput)
}

// A collection of arguments for invoking getAclRole.
type LookupAclRoleOutputArgs struct {
	// `(string)` The unique identifier of the ACL Role.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupAclRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclRoleArgs)(nil)).Elem()
}

// A collection of values returned by getAclRole.
type LookupAclRoleResultOutput struct{ *pulumi.OutputState }

func (LookupAclRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclRoleResult)(nil)).Elem()
}

func (o LookupAclRoleResultOutput) ToLookupAclRoleResultOutput() LookupAclRoleResultOutput {
	return o
}

func (o LookupAclRoleResultOutput) ToLookupAclRoleResultOutputWithContext(ctx context.Context) LookupAclRoleResultOutput {
	return o
}

// `(string)` - The description of the ACL Role.
func (o LookupAclRoleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclRoleResult) string { return v.Description }).(pulumi.StringOutput)
}

// `(string)` - The ACL Role unique identifier.
func (o LookupAclRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// `(string)` - Unique name of the ACL role.
func (o LookupAclRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

// `(set)` - The policies applied to the role.
func (o LookupAclRoleResultOutput) Policies() GetAclRolePolicyArrayOutput {
	return o.ApplyT(func(v LookupAclRoleResult) []GetAclRolePolicy { return v.Policies }).(GetAclRolePolicyArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAclRoleResultOutput{})
}
