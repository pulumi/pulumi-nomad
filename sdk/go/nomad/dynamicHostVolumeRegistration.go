// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registers a dynamic host volume in Nomad that has already been created. Note
// that Nomad supports two workflows for dynamic host volumes: create and
// register. Both resources result in the same data source with the same outputs.
type DynamicHostVolumeRegistration struct {
	pulumi.CustomResourceState

	// `(block: <optional>)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities DynamicHostVolumeRegistrationCapabilityArrayOutput `pulumi:"capabilities"`
	// `(string: <optional>)` - The size of a volume in bytes. Either the
	// physical size of a disk or a quota, depending on the plugin. This field must
	// be between the `capacityMin` and `capacityMax` values unless they are
	// omitted. Accepts human-friendly suffixes such as `"100GiB"`.
	Capacity         pulumi.StringPtrOutput `pulumi:"capacity"`
	CapacityBytes    pulumi.IntOutput       `pulumi:"capacityBytes"`
	CapacityMaxBytes pulumi.IntOutput       `pulumi:"capacityMaxBytes"`
	CapacityMinBytes pulumi.IntOutput       `pulumi:"capacityMinBytes"`
	// Constraints
	Constraints DynamicHostVolumeRegistrationConstraintArrayOutput `pulumi:"constraints"`
	// `(string)` - The path on disk where the volume exists.
	HostPath pulumi.StringOutput `pulumi:"hostPath"`
	// `(string: <required>)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names must be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name pulumi.StringOutput `pulumi:"name"`
	// `(string: <optional>)` - The namespace of the volume. This field
	// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
	// environment variable. Defaults to `"default"` if unset.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// `(string: <required>)` - A specific node where the volume is
	// mounted.
	NodeId pulumi.StringOutput `pulumi:"nodeId"`
	// Node pool
	NodePool pulumi.StringOutput `pulumi:"nodePool"`
	// `(map<string|string>: <optional>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	//
	// [`accessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
	// [`attachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
	// [volumeSource]: /nomad/docs/job-specification/volume#source
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// Plugin ID
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// State
	State pulumi.StringOutput `pulumi:"state"`
}

// NewDynamicHostVolumeRegistration registers a new resource with the given unique name, arguments, and options.
func NewDynamicHostVolumeRegistration(ctx *pulumi.Context,
	name string, args *DynamicHostVolumeRegistrationArgs, opts ...pulumi.ResourceOption) (*DynamicHostVolumeRegistration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capabilities == nil {
		return nil, errors.New("invalid value for required argument 'Capabilities'")
	}
	if args.HostPath == nil {
		return nil, errors.New("invalid value for required argument 'HostPath'")
	}
	if args.NodeId == nil {
		return nil, errors.New("invalid value for required argument 'NodeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DynamicHostVolumeRegistration
	err := ctx.RegisterResource("nomad:index/dynamicHostVolumeRegistration:DynamicHostVolumeRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynamicHostVolumeRegistration gets an existing DynamicHostVolumeRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynamicHostVolumeRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynamicHostVolumeRegistrationState, opts ...pulumi.ResourceOption) (*DynamicHostVolumeRegistration, error) {
	var resource DynamicHostVolumeRegistration
	err := ctx.ReadResource("nomad:index/dynamicHostVolumeRegistration:DynamicHostVolumeRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DynamicHostVolumeRegistration resources.
type dynamicHostVolumeRegistrationState struct {
	// `(block: <optional>)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities []DynamicHostVolumeRegistrationCapability `pulumi:"capabilities"`
	// `(string: <optional>)` - The size of a volume in bytes. Either the
	// physical size of a disk or a quota, depending on the plugin. This field must
	// be between the `capacityMin` and `capacityMax` values unless they are
	// omitted. Accepts human-friendly suffixes such as `"100GiB"`.
	Capacity         *string `pulumi:"capacity"`
	CapacityBytes    *int    `pulumi:"capacityBytes"`
	CapacityMaxBytes *int    `pulumi:"capacityMaxBytes"`
	CapacityMinBytes *int    `pulumi:"capacityMinBytes"`
	// Constraints
	Constraints []DynamicHostVolumeRegistrationConstraint `pulumi:"constraints"`
	// `(string)` - The path on disk where the volume exists.
	HostPath *string `pulumi:"hostPath"`
	// `(string: <required>)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names must be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name *string `pulumi:"name"`
	// `(string: <optional>)` - The namespace of the volume. This field
	// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
	// environment variable. Defaults to `"default"` if unset.
	Namespace *string `pulumi:"namespace"`
	// `(string: <required>)` - A specific node where the volume is
	// mounted.
	NodeId *string `pulumi:"nodeId"`
	// Node pool
	NodePool *string `pulumi:"nodePool"`
	// `(map<string|string>: <optional>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	//
	// [`accessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
	// [`attachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
	// [volumeSource]: /nomad/docs/job-specification/volume#source
	Parameters map[string]string `pulumi:"parameters"`
	// Plugin ID
	PluginId *string `pulumi:"pluginId"`
	// State
	State *string `pulumi:"state"`
}

type DynamicHostVolumeRegistrationState struct {
	// `(block: <optional>)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities DynamicHostVolumeRegistrationCapabilityArrayInput
	// `(string: <optional>)` - The size of a volume in bytes. Either the
	// physical size of a disk or a quota, depending on the plugin. This field must
	// be between the `capacityMin` and `capacityMax` values unless they are
	// omitted. Accepts human-friendly suffixes such as `"100GiB"`.
	Capacity         pulumi.StringPtrInput
	CapacityBytes    pulumi.IntPtrInput
	CapacityMaxBytes pulumi.IntPtrInput
	CapacityMinBytes pulumi.IntPtrInput
	// Constraints
	Constraints DynamicHostVolumeRegistrationConstraintArrayInput
	// `(string)` - The path on disk where the volume exists.
	HostPath pulumi.StringPtrInput
	// `(string: <required>)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names must be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name pulumi.StringPtrInput
	// `(string: <optional>)` - The namespace of the volume. This field
	// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
	// environment variable. Defaults to `"default"` if unset.
	Namespace pulumi.StringPtrInput
	// `(string: <required>)` - A specific node where the volume is
	// mounted.
	NodeId pulumi.StringPtrInput
	// Node pool
	NodePool pulumi.StringPtrInput
	// `(map<string|string>: <optional>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	//
	// [`accessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
	// [`attachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
	// [volumeSource]: /nomad/docs/job-specification/volume#source
	Parameters pulumi.StringMapInput
	// Plugin ID
	PluginId pulumi.StringPtrInput
	// State
	State pulumi.StringPtrInput
}

func (DynamicHostVolumeRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicHostVolumeRegistrationState)(nil)).Elem()
}

type dynamicHostVolumeRegistrationArgs struct {
	// `(block: <optional>)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities []DynamicHostVolumeRegistrationCapability `pulumi:"capabilities"`
	// `(string: <optional>)` - The size of a volume in bytes. Either the
	// physical size of a disk or a quota, depending on the plugin. This field must
	// be between the `capacityMin` and `capacityMax` values unless they are
	// omitted. Accepts human-friendly suffixes such as `"100GiB"`.
	Capacity *string `pulumi:"capacity"`
	// `(string)` - The path on disk where the volume exists.
	HostPath string `pulumi:"hostPath"`
	// `(string: <required>)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names must be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name *string `pulumi:"name"`
	// `(string: <optional>)` - The namespace of the volume. This field
	// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
	// environment variable. Defaults to `"default"` if unset.
	Namespace *string `pulumi:"namespace"`
	// `(string: <required>)` - A specific node where the volume is
	// mounted.
	NodeId string `pulumi:"nodeId"`
	// `(map<string|string>: <optional>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	//
	// [`accessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
	// [`attachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
	// [volumeSource]: /nomad/docs/job-specification/volume#source
	Parameters map[string]string `pulumi:"parameters"`
}

// The set of arguments for constructing a DynamicHostVolumeRegistration resource.
type DynamicHostVolumeRegistrationArgs struct {
	// `(block: <optional>)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities DynamicHostVolumeRegistrationCapabilityArrayInput
	// `(string: <optional>)` - The size of a volume in bytes. Either the
	// physical size of a disk or a quota, depending on the plugin. This field must
	// be between the `capacityMin` and `capacityMax` values unless they are
	// omitted. Accepts human-friendly suffixes such as `"100GiB"`.
	Capacity pulumi.StringPtrInput
	// `(string)` - The path on disk where the volume exists.
	HostPath pulumi.StringInput
	// `(string: <required>)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names must be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name pulumi.StringPtrInput
	// `(string: <optional>)` - The namespace of the volume. This field
	// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
	// environment variable. Defaults to `"default"` if unset.
	Namespace pulumi.StringPtrInput
	// `(string: <required>)` - A specific node where the volume is
	// mounted.
	NodeId pulumi.StringInput
	// `(map<string|string>: <optional>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	//
	// [`accessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
	// [`attachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
	// [volumeSource]: /nomad/docs/job-specification/volume#source
	Parameters pulumi.StringMapInput
}

func (DynamicHostVolumeRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicHostVolumeRegistrationArgs)(nil)).Elem()
}

type DynamicHostVolumeRegistrationInput interface {
	pulumi.Input

	ToDynamicHostVolumeRegistrationOutput() DynamicHostVolumeRegistrationOutput
	ToDynamicHostVolumeRegistrationOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationOutput
}

func (*DynamicHostVolumeRegistration) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicHostVolumeRegistration)(nil)).Elem()
}

func (i *DynamicHostVolumeRegistration) ToDynamicHostVolumeRegistrationOutput() DynamicHostVolumeRegistrationOutput {
	return i.ToDynamicHostVolumeRegistrationOutputWithContext(context.Background())
}

func (i *DynamicHostVolumeRegistration) ToDynamicHostVolumeRegistrationOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeRegistrationOutput)
}

// DynamicHostVolumeRegistrationArrayInput is an input type that accepts DynamicHostVolumeRegistrationArray and DynamicHostVolumeRegistrationArrayOutput values.
// You can construct a concrete instance of `DynamicHostVolumeRegistrationArrayInput` via:
//
//	DynamicHostVolumeRegistrationArray{ DynamicHostVolumeRegistrationArgs{...} }
type DynamicHostVolumeRegistrationArrayInput interface {
	pulumi.Input

	ToDynamicHostVolumeRegistrationArrayOutput() DynamicHostVolumeRegistrationArrayOutput
	ToDynamicHostVolumeRegistrationArrayOutputWithContext(context.Context) DynamicHostVolumeRegistrationArrayOutput
}

type DynamicHostVolumeRegistrationArray []DynamicHostVolumeRegistrationInput

func (DynamicHostVolumeRegistrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicHostVolumeRegistration)(nil)).Elem()
}

func (i DynamicHostVolumeRegistrationArray) ToDynamicHostVolumeRegistrationArrayOutput() DynamicHostVolumeRegistrationArrayOutput {
	return i.ToDynamicHostVolumeRegistrationArrayOutputWithContext(context.Background())
}

func (i DynamicHostVolumeRegistrationArray) ToDynamicHostVolumeRegistrationArrayOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeRegistrationArrayOutput)
}

// DynamicHostVolumeRegistrationMapInput is an input type that accepts DynamicHostVolumeRegistrationMap and DynamicHostVolumeRegistrationMapOutput values.
// You can construct a concrete instance of `DynamicHostVolumeRegistrationMapInput` via:
//
//	DynamicHostVolumeRegistrationMap{ "key": DynamicHostVolumeRegistrationArgs{...} }
type DynamicHostVolumeRegistrationMapInput interface {
	pulumi.Input

	ToDynamicHostVolumeRegistrationMapOutput() DynamicHostVolumeRegistrationMapOutput
	ToDynamicHostVolumeRegistrationMapOutputWithContext(context.Context) DynamicHostVolumeRegistrationMapOutput
}

type DynamicHostVolumeRegistrationMap map[string]DynamicHostVolumeRegistrationInput

func (DynamicHostVolumeRegistrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicHostVolumeRegistration)(nil)).Elem()
}

func (i DynamicHostVolumeRegistrationMap) ToDynamicHostVolumeRegistrationMapOutput() DynamicHostVolumeRegistrationMapOutput {
	return i.ToDynamicHostVolumeRegistrationMapOutputWithContext(context.Background())
}

func (i DynamicHostVolumeRegistrationMap) ToDynamicHostVolumeRegistrationMapOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeRegistrationMapOutput)
}

type DynamicHostVolumeRegistrationOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicHostVolumeRegistration)(nil)).Elem()
}

func (o DynamicHostVolumeRegistrationOutput) ToDynamicHostVolumeRegistrationOutput() DynamicHostVolumeRegistrationOutput {
	return o
}

func (o DynamicHostVolumeRegistrationOutput) ToDynamicHostVolumeRegistrationOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationOutput {
	return o
}

// `(block: <optional>)` - Option for validating the capability of a
// volume. Each capability block has the following attributes:
func (o DynamicHostVolumeRegistrationOutput) Capabilities() DynamicHostVolumeRegistrationCapabilityArrayOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) DynamicHostVolumeRegistrationCapabilityArrayOutput {
		return v.Capabilities
	}).(DynamicHostVolumeRegistrationCapabilityArrayOutput)
}

// `(string: <optional>)` - The size of a volume in bytes. Either the
// physical size of a disk or a quota, depending on the plugin. This field must
// be between the `capacityMin` and `capacityMax` values unless they are
// omitted. Accepts human-friendly suffixes such as `"100GiB"`.
func (o DynamicHostVolumeRegistrationOutput) Capacity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.StringPtrOutput { return v.Capacity }).(pulumi.StringPtrOutput)
}

func (o DynamicHostVolumeRegistrationOutput) CapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.IntOutput { return v.CapacityBytes }).(pulumi.IntOutput)
}

func (o DynamicHostVolumeRegistrationOutput) CapacityMaxBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.IntOutput { return v.CapacityMaxBytes }).(pulumi.IntOutput)
}

func (o DynamicHostVolumeRegistrationOutput) CapacityMinBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.IntOutput { return v.CapacityMinBytes }).(pulumi.IntOutput)
}

// Constraints
func (o DynamicHostVolumeRegistrationOutput) Constraints() DynamicHostVolumeRegistrationConstraintArrayOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) DynamicHostVolumeRegistrationConstraintArrayOutput {
		return v.Constraints
	}).(DynamicHostVolumeRegistrationConstraintArrayOutput)
}

// `(string)` - The path on disk where the volume exists.
func (o DynamicHostVolumeRegistrationOutput) HostPath() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.StringOutput { return v.HostPath }).(pulumi.StringOutput)
}

// `(string: <required>)` - The name of the volume, which is used as the
// [`volume.source`][volumeSource] field in job specifications that claim this
// volume. Host volume names must be unique per node. Names are visible to any
// user with `node:read` ACL, even across namespaces, so they should not be
// treated as sensitive values.
func (o DynamicHostVolumeRegistrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `(string: <optional>)` - The namespace of the volume. This field
// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
// environment variable. Defaults to `"default"` if unset.
func (o DynamicHostVolumeRegistrationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// `(string: <required>)` - A specific node where the volume is
// mounted.
func (o DynamicHostVolumeRegistrationOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

// Node pool
func (o DynamicHostVolumeRegistrationOutput) NodePool() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.StringOutput { return v.NodePool }).(pulumi.StringOutput)
}

// `(map<string|string>: <optional>)` - A key-value map of strings
// passed directly to the plugin to configure the volume. The details of these
// parameters are specific to the plugin.
//
// [`accessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
// [`attachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
// [volumeSource]: /nomad/docs/job-specification/volume#source
func (o DynamicHostVolumeRegistrationOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// Plugin ID
func (o DynamicHostVolumeRegistrationOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// State
func (o DynamicHostVolumeRegistrationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolumeRegistration) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type DynamicHostVolumeRegistrationArrayOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeRegistrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicHostVolumeRegistration)(nil)).Elem()
}

func (o DynamicHostVolumeRegistrationArrayOutput) ToDynamicHostVolumeRegistrationArrayOutput() DynamicHostVolumeRegistrationArrayOutput {
	return o
}

func (o DynamicHostVolumeRegistrationArrayOutput) ToDynamicHostVolumeRegistrationArrayOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationArrayOutput {
	return o
}

func (o DynamicHostVolumeRegistrationArrayOutput) Index(i pulumi.IntInput) DynamicHostVolumeRegistrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DynamicHostVolumeRegistration {
		return vs[0].([]*DynamicHostVolumeRegistration)[vs[1].(int)]
	}).(DynamicHostVolumeRegistrationOutput)
}

type DynamicHostVolumeRegistrationMapOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeRegistrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicHostVolumeRegistration)(nil)).Elem()
}

func (o DynamicHostVolumeRegistrationMapOutput) ToDynamicHostVolumeRegistrationMapOutput() DynamicHostVolumeRegistrationMapOutput {
	return o
}

func (o DynamicHostVolumeRegistrationMapOutput) ToDynamicHostVolumeRegistrationMapOutputWithContext(ctx context.Context) DynamicHostVolumeRegistrationMapOutput {
	return o
}

func (o DynamicHostVolumeRegistrationMapOutput) MapIndex(k pulumi.StringInput) DynamicHostVolumeRegistrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DynamicHostVolumeRegistration {
		return vs[0].(map[string]*DynamicHostVolumeRegistration)[vs[1].(string)]
	}).(DynamicHostVolumeRegistrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeRegistrationInput)(nil)).Elem(), &DynamicHostVolumeRegistration{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeRegistrationArrayInput)(nil)).Elem(), DynamicHostVolumeRegistrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeRegistrationMapInput)(nil)).Elem(), DynamicHostVolumeRegistrationMap{})
	pulumi.RegisterOutputType(DynamicHostVolumeRegistrationOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeRegistrationArrayOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeRegistrationMapOutput{})
}
