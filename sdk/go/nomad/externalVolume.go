// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// Creating a volume:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-nomad/sdk/go/nomad"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		ebs, err := nomad.GetPlugin(ctx, &GetPluginArgs{
// 			PluginId:       "aws-ebs0",
// 			WaitForHealthy: pulumi.BoolRef(true),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = nomad.NewExternalVolume(ctx, "mysqlVolume", &nomad.ExternalVolumeArgs{
// 			Type:        pulumi.String("csi"),
// 			PluginId:    pulumi.String("aws-ebs0"),
// 			VolumeId:    pulumi.String("mysql_volume"),
// 			CapacityMin: pulumi.String("10GiB"),
// 			CapacityMax: pulumi.String("20GiB"),
// 			Capabilities: ExternalVolumeCapabilityArray{
// 				&ExternalVolumeCapabilityArgs{
// 					AccessMode:     pulumi.String("single-node-writer"),
// 					AttachmentMode: pulumi.String("file-system"),
// 				},
// 			},
// 			MountOptions: &ExternalVolumeMountOptionsArgs{
// 				FsType: pulumi.String("ext4"),
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			ebs,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ExternalVolume struct {
	pulumi.CustomResourceState

	// Capabilities intended to be used in a job. At least one capability must be provided.
	Capabilities ExternalVolumeCapabilityArrayOutput `pulumi:"capabilities"`
	// Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
	CapacityMax pulumi.StringPtrOutput `pulumi:"capacityMax"`
	// Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
	CapacityMin pulumi.StringPtrOutput `pulumi:"capacityMin"`
	// The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
	CloneId             pulumi.StringPtrOutput `pulumi:"cloneId"`
	ControllerRequired  pulumi.BoolOutput      `pulumi:"controllerRequired"`
	ControllersExpected pulumi.IntOutput       `pulumi:"controllersExpected"`
	ControllersHealthy  pulumi.IntOutput       `pulumi:"controllersHealthy"`
	// Options for mounting 'block-device' volumes without a pre-formatted file system.
	MountOptions ExternalVolumeMountOptionsPtrOutput `pulumi:"mountOptions"`
	// The display name of the volume.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace in which to create the volume.
	Namespace     pulumi.StringPtrOutput `pulumi:"namespace"`
	NodesExpected pulumi.IntOutput       `pulumi:"nodesExpected"`
	NodesHealthy  pulumi.IntOutput       `pulumi:"nodesHealthy"`
	// An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The ID of the CSI plugin that manages this volume.
	PluginId              pulumi.StringOutput `pulumi:"pluginId"`
	PluginProvider        pulumi.StringOutput `pulumi:"pluginProvider"`
	PluginProviderVersion pulumi.StringOutput `pulumi:"pluginProviderVersion"`
	Schedulable           pulumi.BoolOutput   `pulumi:"schedulable"`
	// An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets pulumi.StringMapOutput `pulumi:"secrets"`
	// The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
	// 'clone_id'.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// The type of the volume. Currently, only 'csi' is supported.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The unique ID of the volume, how jobs will refer to the volume.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewExternalVolume registers a new resource with the given unique name, arguments, and options.
func NewExternalVolume(ctx *pulumi.Context,
	name string, args *ExternalVolumeArgs, opts ...pulumi.ResourceOption) (*ExternalVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capabilities == nil {
		return nil, errors.New("invalid value for required argument 'Capabilities'")
	}
	if args.PluginId == nil {
		return nil, errors.New("invalid value for required argument 'PluginId'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	var resource ExternalVolume
	err := ctx.RegisterResource("nomad:index/externalVolume:ExternalVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalVolume gets an existing ExternalVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalVolumeState, opts ...pulumi.ResourceOption) (*ExternalVolume, error) {
	var resource ExternalVolume
	err := ctx.ReadResource("nomad:index/externalVolume:ExternalVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalVolume resources.
type externalVolumeState struct {
	// Capabilities intended to be used in a job. At least one capability must be provided.
	Capabilities []ExternalVolumeCapability `pulumi:"capabilities"`
	// Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
	CapacityMax *string `pulumi:"capacityMax"`
	// Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
	CapacityMin *string `pulumi:"capacityMin"`
	// The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
	CloneId             *string `pulumi:"cloneId"`
	ControllerRequired  *bool   `pulumi:"controllerRequired"`
	ControllersExpected *int    `pulumi:"controllersExpected"`
	ControllersHealthy  *int    `pulumi:"controllersHealthy"`
	// Options for mounting 'block-device' volumes without a pre-formatted file system.
	MountOptions *ExternalVolumeMountOptions `pulumi:"mountOptions"`
	// The display name of the volume.
	Name *string `pulumi:"name"`
	// The namespace in which to create the volume.
	Namespace     *string `pulumi:"namespace"`
	NodesExpected *int    `pulumi:"nodesExpected"`
	NodesHealthy  *int    `pulumi:"nodesHealthy"`
	// An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters map[string]string `pulumi:"parameters"`
	// The ID of the CSI plugin that manages this volume.
	PluginId              *string `pulumi:"pluginId"`
	PluginProvider        *string `pulumi:"pluginProvider"`
	PluginProviderVersion *string `pulumi:"pluginProviderVersion"`
	Schedulable           *bool   `pulumi:"schedulable"`
	// An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets map[string]string `pulumi:"secrets"`
	// The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
	// 'clone_id'.
	SnapshotId *string `pulumi:"snapshotId"`
	// The type of the volume. Currently, only 'csi' is supported.
	Type *string `pulumi:"type"`
	// The unique ID of the volume, how jobs will refer to the volume.
	VolumeId *string `pulumi:"volumeId"`
}

type ExternalVolumeState struct {
	// Capabilities intended to be used in a job. At least one capability must be provided.
	Capabilities ExternalVolumeCapabilityArrayInput
	// Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
	CapacityMax pulumi.StringPtrInput
	// Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
	CapacityMin pulumi.StringPtrInput
	// The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
	CloneId             pulumi.StringPtrInput
	ControllerRequired  pulumi.BoolPtrInput
	ControllersExpected pulumi.IntPtrInput
	ControllersHealthy  pulumi.IntPtrInput
	// Options for mounting 'block-device' volumes without a pre-formatted file system.
	MountOptions ExternalVolumeMountOptionsPtrInput
	// The display name of the volume.
	Name pulumi.StringPtrInput
	// The namespace in which to create the volume.
	Namespace     pulumi.StringPtrInput
	NodesExpected pulumi.IntPtrInput
	NodesHealthy  pulumi.IntPtrInput
	// An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters pulumi.StringMapInput
	// The ID of the CSI plugin that manages this volume.
	PluginId              pulumi.StringPtrInput
	PluginProvider        pulumi.StringPtrInput
	PluginProviderVersion pulumi.StringPtrInput
	Schedulable           pulumi.BoolPtrInput
	// An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets pulumi.StringMapInput
	// The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
	// 'clone_id'.
	SnapshotId pulumi.StringPtrInput
	// The type of the volume. Currently, only 'csi' is supported.
	Type pulumi.StringPtrInput
	// The unique ID of the volume, how jobs will refer to the volume.
	VolumeId pulumi.StringPtrInput
}

func (ExternalVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalVolumeState)(nil)).Elem()
}

type externalVolumeArgs struct {
	// Capabilities intended to be used in a job. At least one capability must be provided.
	Capabilities []ExternalVolumeCapability `pulumi:"capabilities"`
	// Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
	CapacityMax *string `pulumi:"capacityMax"`
	// Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
	CapacityMin *string `pulumi:"capacityMin"`
	// The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
	CloneId *string `pulumi:"cloneId"`
	// Options for mounting 'block-device' volumes without a pre-formatted file system.
	MountOptions *ExternalVolumeMountOptions `pulumi:"mountOptions"`
	// The display name of the volume.
	Name *string `pulumi:"name"`
	// The namespace in which to create the volume.
	Namespace *string `pulumi:"namespace"`
	// An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters map[string]string `pulumi:"parameters"`
	// The ID of the CSI plugin that manages this volume.
	PluginId string `pulumi:"pluginId"`
	// An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets map[string]string `pulumi:"secrets"`
	// The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
	// 'clone_id'.
	SnapshotId *string `pulumi:"snapshotId"`
	// The type of the volume. Currently, only 'csi' is supported.
	Type *string `pulumi:"type"`
	// The unique ID of the volume, how jobs will refer to the volume.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a ExternalVolume resource.
type ExternalVolumeArgs struct {
	// Capabilities intended to be used in a job. At least one capability must be provided.
	Capabilities ExternalVolumeCapabilityArrayInput
	// Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
	CapacityMax pulumi.StringPtrInput
	// Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
	CapacityMin pulumi.StringPtrInput
	// The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
	CloneId pulumi.StringPtrInput
	// Options for mounting 'block-device' volumes without a pre-formatted file system.
	MountOptions ExternalVolumeMountOptionsPtrInput
	// The display name of the volume.
	Name pulumi.StringPtrInput
	// The namespace in which to create the volume.
	Namespace pulumi.StringPtrInput
	// An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters pulumi.StringMapInput
	// The ID of the CSI plugin that manages this volume.
	PluginId pulumi.StringInput
	// An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets pulumi.StringMapInput
	// The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
	// 'clone_id'.
	SnapshotId pulumi.StringPtrInput
	// The type of the volume. Currently, only 'csi' is supported.
	Type pulumi.StringPtrInput
	// The unique ID of the volume, how jobs will refer to the volume.
	VolumeId pulumi.StringInput
}

func (ExternalVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalVolumeArgs)(nil)).Elem()
}

type ExternalVolumeInput interface {
	pulumi.Input

	ToExternalVolumeOutput() ExternalVolumeOutput
	ToExternalVolumeOutputWithContext(ctx context.Context) ExternalVolumeOutput
}

func (*ExternalVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolume)(nil)).Elem()
}

func (i *ExternalVolume) ToExternalVolumeOutput() ExternalVolumeOutput {
	return i.ToExternalVolumeOutputWithContext(context.Background())
}

func (i *ExternalVolume) ToExternalVolumeOutputWithContext(ctx context.Context) ExternalVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeOutput)
}

// ExternalVolumeArrayInput is an input type that accepts ExternalVolumeArray and ExternalVolumeArrayOutput values.
// You can construct a concrete instance of `ExternalVolumeArrayInput` via:
//
//          ExternalVolumeArray{ ExternalVolumeArgs{...} }
type ExternalVolumeArrayInput interface {
	pulumi.Input

	ToExternalVolumeArrayOutput() ExternalVolumeArrayOutput
	ToExternalVolumeArrayOutputWithContext(context.Context) ExternalVolumeArrayOutput
}

type ExternalVolumeArray []ExternalVolumeInput

func (ExternalVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalVolume)(nil)).Elem()
}

func (i ExternalVolumeArray) ToExternalVolumeArrayOutput() ExternalVolumeArrayOutput {
	return i.ToExternalVolumeArrayOutputWithContext(context.Background())
}

func (i ExternalVolumeArray) ToExternalVolumeArrayOutputWithContext(ctx context.Context) ExternalVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeArrayOutput)
}

// ExternalVolumeMapInput is an input type that accepts ExternalVolumeMap and ExternalVolumeMapOutput values.
// You can construct a concrete instance of `ExternalVolumeMapInput` via:
//
//          ExternalVolumeMap{ "key": ExternalVolumeArgs{...} }
type ExternalVolumeMapInput interface {
	pulumi.Input

	ToExternalVolumeMapOutput() ExternalVolumeMapOutput
	ToExternalVolumeMapOutputWithContext(context.Context) ExternalVolumeMapOutput
}

type ExternalVolumeMap map[string]ExternalVolumeInput

func (ExternalVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalVolume)(nil)).Elem()
}

func (i ExternalVolumeMap) ToExternalVolumeMapOutput() ExternalVolumeMapOutput {
	return i.ToExternalVolumeMapOutputWithContext(context.Background())
}

func (i ExternalVolumeMap) ToExternalVolumeMapOutputWithContext(ctx context.Context) ExternalVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeMapOutput)
}

type ExternalVolumeOutput struct{ *pulumi.OutputState }

func (ExternalVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolume)(nil)).Elem()
}

func (o ExternalVolumeOutput) ToExternalVolumeOutput() ExternalVolumeOutput {
	return o
}

func (o ExternalVolumeOutput) ToExternalVolumeOutputWithContext(ctx context.Context) ExternalVolumeOutput {
	return o
}

type ExternalVolumeArrayOutput struct{ *pulumi.OutputState }

func (ExternalVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalVolume)(nil)).Elem()
}

func (o ExternalVolumeArrayOutput) ToExternalVolumeArrayOutput() ExternalVolumeArrayOutput {
	return o
}

func (o ExternalVolumeArrayOutput) ToExternalVolumeArrayOutputWithContext(ctx context.Context) ExternalVolumeArrayOutput {
	return o
}

func (o ExternalVolumeArrayOutput) Index(i pulumi.IntInput) ExternalVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalVolume {
		return vs[0].([]*ExternalVolume)[vs[1].(int)]
	}).(ExternalVolumeOutput)
}

type ExternalVolumeMapOutput struct{ *pulumi.OutputState }

func (ExternalVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalVolume)(nil)).Elem()
}

func (o ExternalVolumeMapOutput) ToExternalVolumeMapOutput() ExternalVolumeMapOutput {
	return o
}

func (o ExternalVolumeMapOutput) ToExternalVolumeMapOutputWithContext(ctx context.Context) ExternalVolumeMapOutput {
	return o
}

func (o ExternalVolumeMapOutput) MapIndex(k pulumi.StringInput) ExternalVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalVolume {
		return vs[0].(map[string]*ExternalVolume)[vs[1].(string)]
	}).(ExternalVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeInput)(nil)).Elem(), &ExternalVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeArrayInput)(nil)).Elem(), ExternalVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeMapInput)(nil)).Elem(), ExternalVolumeMap{})
	pulumi.RegisterOutputType(ExternalVolumeOutput{})
	pulumi.RegisterOutputType(ExternalVolumeArrayOutput{})
	pulumi.RegisterOutputType(ExternalVolumeMapOutput{})
}
