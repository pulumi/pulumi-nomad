// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// Creating a volume:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-nomad/sdk/go/nomad"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ebs, err := nomad.GetPlugin(ctx, &nomad.GetPluginArgs{
//				PluginId:       "aws-ebs0",
//				WaitForHealthy: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = nomad.NewExternalVolume(ctx, "mysqlVolume", &nomad.ExternalVolumeArgs{
//				Type:        pulumi.String("csi"),
//				PluginId:    pulumi.String("aws-ebs0"),
//				VolumeId:    pulumi.String("mysql_volume"),
//				CapacityMin: pulumi.String("10GiB"),
//				CapacityMax: pulumi.String("20GiB"),
//				Capabilities: nomad.ExternalVolumeCapabilityArray{
//					&nomad.ExternalVolumeCapabilityArgs{
//						AccessMode:     pulumi.String("single-node-writer"),
//						AttachmentMode: pulumi.String("file-system"),
//					},
//				},
//				MountOptions: &nomad.ExternalVolumeMountOptionsArgs{
//					FsType: pulumi.String("ext4"),
//				},
//				TopologyRequest: &nomad.ExternalVolumeTopologyRequestArgs{
//					Required: &nomad.ExternalVolumeTopologyRequestRequiredArgs{
//						Topologies: nomad.ExternalVolumeTopologyRequestRequiredTopologyArray{
//							&nomad.ExternalVolumeTopologyRequestRequiredTopologyArgs{
//								Segments: pulumi.StringMap{
//									"rack": pulumi.String("R1"),
//									"zone": pulumi.String("us-east-1a"),
//								},
//							},
//							&nomad.ExternalVolumeTopologyRequestRequiredTopologyArgs{
//								Segments: pulumi.StringMap{
//									"rack": pulumi.String("R2"),
//								},
//							},
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				ebs,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ExternalVolume struct {
	pulumi.CustomResourceState

	// `(``Capability``: <required>)` - Options for validating the capability of a volume.
	Capabilities ExternalVolumeCapabilityArrayOutput `pulumi:"capabilities"`
	// `(string: <optional>)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
	CapacityMax pulumi.StringPtrOutput `pulumi:"capacityMax"`
	// `(string: <optional>)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
	CapacityMin pulumi.StringPtrOutput `pulumi:"capacityMin"`
	// `(string: <optional>)` - The external ID of an existing volume to restore. If ommited, the volume will be created from scratch. Conflicts with `snapshotId`.
	CloneId pulumi.StringPtrOutput `pulumi:"cloneId"`
	// `(boolean)`
	ControllerRequired pulumi.BoolOutput `pulumi:"controllerRequired"`
	// `(integer)`
	ControllersExpected pulumi.IntOutput `pulumi:"controllersExpected"`
	// `(integer)`
	ControllersHealthy pulumi.IntOutput `pulumi:"controllersHealthy"`
	// `(block: optional)` Options for mounting `block-device` volumes without a pre-formatted file system.
	MountOptions ExternalVolumeMountOptionsPtrOutput `pulumi:"mountOptions"`
	// `(string: <required>)` - The display name for the volume.
	Name pulumi.StringOutput `pulumi:"name"`
	// `(string: "default")` - The namespace in which to register the volume.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// `(integer)`
	NodesExpected pulumi.IntOutput `pulumi:"nodesExpected"`
	// `(integer)`
	NodesHealthy pulumi.IntOutput `pulumi:"nodesHealthy"`
	// `(map[string]string: optional)` An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// `(string)`
	PluginProvider pulumi.StringOutput `pulumi:"pluginProvider"`
	// `(string)`
	PluginProviderVersion pulumi.StringOutput `pulumi:"pluginProviderVersion"`
	// `(boolean)`
	Schedulable pulumi.BoolOutput `pulumi:"schedulable"`
	// `(map[string]string: optional)` An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets pulumi.StringMapOutput `pulumi:"secrets"`
	// `(string: <optional>)` - The external ID of a snapshot to restore. If ommited, the volume will be created from scratch. Conflicts with `cloneId`.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// `(List of topologies)`
	Topologies ExternalVolumeTopologyArrayOutput `pulumi:"topologies"`
	// `(``TopologyRequest``: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
	TopologyRequest ExternalVolumeTopologyRequestPtrOutput `pulumi:"topologyRequest"`
	// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// `(string: <required>)` - The unique ID of the volume.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewExternalVolume registers a new resource with the given unique name, arguments, and options.
func NewExternalVolume(ctx *pulumi.Context,
	name string, args *ExternalVolumeArgs, opts ...pulumi.ResourceOption) (*ExternalVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capabilities == nil {
		return nil, errors.New("invalid value for required argument 'Capabilities'")
	}
	if args.PluginId == nil {
		return nil, errors.New("invalid value for required argument 'PluginId'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	if args.Secrets != nil {
		args.Secrets = pulumi.ToSecret(args.Secrets).(pulumi.StringMapInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secrets",
	})
	opts = append(opts, secrets)
	var resource ExternalVolume
	err := ctx.RegisterResource("nomad:index/externalVolume:ExternalVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalVolume gets an existing ExternalVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalVolumeState, opts ...pulumi.ResourceOption) (*ExternalVolume, error) {
	var resource ExternalVolume
	err := ctx.ReadResource("nomad:index/externalVolume:ExternalVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalVolume resources.
type externalVolumeState struct {
	// `(``Capability``: <required>)` - Options for validating the capability of a volume.
	Capabilities []ExternalVolumeCapability `pulumi:"capabilities"`
	// `(string: <optional>)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
	CapacityMax *string `pulumi:"capacityMax"`
	// `(string: <optional>)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
	CapacityMin *string `pulumi:"capacityMin"`
	// `(string: <optional>)` - The external ID of an existing volume to restore. If ommited, the volume will be created from scratch. Conflicts with `snapshotId`.
	CloneId *string `pulumi:"cloneId"`
	// `(boolean)`
	ControllerRequired *bool `pulumi:"controllerRequired"`
	// `(integer)`
	ControllersExpected *int `pulumi:"controllersExpected"`
	// `(integer)`
	ControllersHealthy *int `pulumi:"controllersHealthy"`
	// `(block: optional)` Options for mounting `block-device` volumes without a pre-formatted file system.
	MountOptions *ExternalVolumeMountOptions `pulumi:"mountOptions"`
	// `(string: <required>)` - The display name for the volume.
	Name *string `pulumi:"name"`
	// `(string: "default")` - The namespace in which to register the volume.
	Namespace *string `pulumi:"namespace"`
	// `(integer)`
	NodesExpected *int `pulumi:"nodesExpected"`
	// `(integer)`
	NodesHealthy *int `pulumi:"nodesHealthy"`
	// `(map[string]string: optional)` An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters map[string]string `pulumi:"parameters"`
	// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
	PluginId *string `pulumi:"pluginId"`
	// `(string)`
	PluginProvider *string `pulumi:"pluginProvider"`
	// `(string)`
	PluginProviderVersion *string `pulumi:"pluginProviderVersion"`
	// `(boolean)`
	Schedulable *bool `pulumi:"schedulable"`
	// `(map[string]string: optional)` An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets map[string]string `pulumi:"secrets"`
	// `(string: <optional>)` - The external ID of a snapshot to restore. If ommited, the volume will be created from scratch. Conflicts with `cloneId`.
	SnapshotId *string `pulumi:"snapshotId"`
	// `(List of topologies)`
	Topologies []ExternalVolumeTopology `pulumi:"topologies"`
	// `(``TopologyRequest``: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
	TopologyRequest *ExternalVolumeTopologyRequest `pulumi:"topologyRequest"`
	// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
	Type *string `pulumi:"type"`
	// `(string: <required>)` - The unique ID of the volume.
	VolumeId *string `pulumi:"volumeId"`
}

type ExternalVolumeState struct {
	// `(``Capability``: <required>)` - Options for validating the capability of a volume.
	Capabilities ExternalVolumeCapabilityArrayInput
	// `(string: <optional>)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
	CapacityMax pulumi.StringPtrInput
	// `(string: <optional>)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
	CapacityMin pulumi.StringPtrInput
	// `(string: <optional>)` - The external ID of an existing volume to restore. If ommited, the volume will be created from scratch. Conflicts with `snapshotId`.
	CloneId pulumi.StringPtrInput
	// `(boolean)`
	ControllerRequired pulumi.BoolPtrInput
	// `(integer)`
	ControllersExpected pulumi.IntPtrInput
	// `(integer)`
	ControllersHealthy pulumi.IntPtrInput
	// `(block: optional)` Options for mounting `block-device` volumes without a pre-formatted file system.
	MountOptions ExternalVolumeMountOptionsPtrInput
	// `(string: <required>)` - The display name for the volume.
	Name pulumi.StringPtrInput
	// `(string: "default")` - The namespace in which to register the volume.
	Namespace pulumi.StringPtrInput
	// `(integer)`
	NodesExpected pulumi.IntPtrInput
	// `(integer)`
	NodesHealthy pulumi.IntPtrInput
	// `(map[string]string: optional)` An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters pulumi.StringMapInput
	// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
	PluginId pulumi.StringPtrInput
	// `(string)`
	PluginProvider pulumi.StringPtrInput
	// `(string)`
	PluginProviderVersion pulumi.StringPtrInput
	// `(boolean)`
	Schedulable pulumi.BoolPtrInput
	// `(map[string]string: optional)` An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets pulumi.StringMapInput
	// `(string: <optional>)` - The external ID of a snapshot to restore. If ommited, the volume will be created from scratch. Conflicts with `cloneId`.
	SnapshotId pulumi.StringPtrInput
	// `(List of topologies)`
	Topologies ExternalVolumeTopologyArrayInput
	// `(``TopologyRequest``: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
	TopologyRequest ExternalVolumeTopologyRequestPtrInput
	// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
	Type pulumi.StringPtrInput
	// `(string: <required>)` - The unique ID of the volume.
	VolumeId pulumi.StringPtrInput
}

func (ExternalVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalVolumeState)(nil)).Elem()
}

type externalVolumeArgs struct {
	// `(``Capability``: <required>)` - Options for validating the capability of a volume.
	Capabilities []ExternalVolumeCapability `pulumi:"capabilities"`
	// `(string: <optional>)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
	CapacityMax *string `pulumi:"capacityMax"`
	// `(string: <optional>)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
	CapacityMin *string `pulumi:"capacityMin"`
	// `(string: <optional>)` - The external ID of an existing volume to restore. If ommited, the volume will be created from scratch. Conflicts with `snapshotId`.
	CloneId *string `pulumi:"cloneId"`
	// `(block: optional)` Options for mounting `block-device` volumes without a pre-formatted file system.
	MountOptions *ExternalVolumeMountOptions `pulumi:"mountOptions"`
	// `(string: <required>)` - The display name for the volume.
	Name *string `pulumi:"name"`
	// `(string: "default")` - The namespace in which to register the volume.
	Namespace *string `pulumi:"namespace"`
	// `(map[string]string: optional)` An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters map[string]string `pulumi:"parameters"`
	// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
	PluginId string `pulumi:"pluginId"`
	// `(map[string]string: optional)` An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets map[string]string `pulumi:"secrets"`
	// `(string: <optional>)` - The external ID of a snapshot to restore. If ommited, the volume will be created from scratch. Conflicts with `cloneId`.
	SnapshotId *string `pulumi:"snapshotId"`
	// `(``TopologyRequest``: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
	TopologyRequest *ExternalVolumeTopologyRequest `pulumi:"topologyRequest"`
	// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
	Type *string `pulumi:"type"`
	// `(string: <required>)` - The unique ID of the volume.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a ExternalVolume resource.
type ExternalVolumeArgs struct {
	// `(``Capability``: <required>)` - Options for validating the capability of a volume.
	Capabilities ExternalVolumeCapabilityArrayInput
	// `(string: <optional>)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
	CapacityMax pulumi.StringPtrInput
	// `(string: <optional>)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
	CapacityMin pulumi.StringPtrInput
	// `(string: <optional>)` - The external ID of an existing volume to restore. If ommited, the volume will be created from scratch. Conflicts with `snapshotId`.
	CloneId pulumi.StringPtrInput
	// `(block: optional)` Options for mounting `block-device` volumes without a pre-formatted file system.
	MountOptions ExternalVolumeMountOptionsPtrInput
	// `(string: <required>)` - The display name for the volume.
	Name pulumi.StringPtrInput
	// `(string: "default")` - The namespace in which to register the volume.
	Namespace pulumi.StringPtrInput
	// `(map[string]string: optional)` An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
	Parameters pulumi.StringMapInput
	// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
	PluginId pulumi.StringInput
	// `(map[string]string: optional)` An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
	Secrets pulumi.StringMapInput
	// `(string: <optional>)` - The external ID of a snapshot to restore. If ommited, the volume will be created from scratch. Conflicts with `cloneId`.
	SnapshotId pulumi.StringPtrInput
	// `(``TopologyRequest``: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
	TopologyRequest ExternalVolumeTopologyRequestPtrInput
	// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
	Type pulumi.StringPtrInput
	// `(string: <required>)` - The unique ID of the volume.
	VolumeId pulumi.StringInput
}

func (ExternalVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalVolumeArgs)(nil)).Elem()
}

type ExternalVolumeInput interface {
	pulumi.Input

	ToExternalVolumeOutput() ExternalVolumeOutput
	ToExternalVolumeOutputWithContext(ctx context.Context) ExternalVolumeOutput
}

func (*ExternalVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolume)(nil)).Elem()
}

func (i *ExternalVolume) ToExternalVolumeOutput() ExternalVolumeOutput {
	return i.ToExternalVolumeOutputWithContext(context.Background())
}

func (i *ExternalVolume) ToExternalVolumeOutputWithContext(ctx context.Context) ExternalVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeOutput)
}

// ExternalVolumeArrayInput is an input type that accepts ExternalVolumeArray and ExternalVolumeArrayOutput values.
// You can construct a concrete instance of `ExternalVolumeArrayInput` via:
//
//	ExternalVolumeArray{ ExternalVolumeArgs{...} }
type ExternalVolumeArrayInput interface {
	pulumi.Input

	ToExternalVolumeArrayOutput() ExternalVolumeArrayOutput
	ToExternalVolumeArrayOutputWithContext(context.Context) ExternalVolumeArrayOutput
}

type ExternalVolumeArray []ExternalVolumeInput

func (ExternalVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalVolume)(nil)).Elem()
}

func (i ExternalVolumeArray) ToExternalVolumeArrayOutput() ExternalVolumeArrayOutput {
	return i.ToExternalVolumeArrayOutputWithContext(context.Background())
}

func (i ExternalVolumeArray) ToExternalVolumeArrayOutputWithContext(ctx context.Context) ExternalVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeArrayOutput)
}

// ExternalVolumeMapInput is an input type that accepts ExternalVolumeMap and ExternalVolumeMapOutput values.
// You can construct a concrete instance of `ExternalVolumeMapInput` via:
//
//	ExternalVolumeMap{ "key": ExternalVolumeArgs{...} }
type ExternalVolumeMapInput interface {
	pulumi.Input

	ToExternalVolumeMapOutput() ExternalVolumeMapOutput
	ToExternalVolumeMapOutputWithContext(context.Context) ExternalVolumeMapOutput
}

type ExternalVolumeMap map[string]ExternalVolumeInput

func (ExternalVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalVolume)(nil)).Elem()
}

func (i ExternalVolumeMap) ToExternalVolumeMapOutput() ExternalVolumeMapOutput {
	return i.ToExternalVolumeMapOutputWithContext(context.Background())
}

func (i ExternalVolumeMap) ToExternalVolumeMapOutputWithContext(ctx context.Context) ExternalVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeMapOutput)
}

type ExternalVolumeOutput struct{ *pulumi.OutputState }

func (ExternalVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolume)(nil)).Elem()
}

func (o ExternalVolumeOutput) ToExternalVolumeOutput() ExternalVolumeOutput {
	return o
}

func (o ExternalVolumeOutput) ToExternalVolumeOutputWithContext(ctx context.Context) ExternalVolumeOutput {
	return o
}

// `(“Capability“: <required>)` - Options for validating the capability of a volume.
func (o ExternalVolumeOutput) Capabilities() ExternalVolumeCapabilityArrayOutput {
	return o.ApplyT(func(v *ExternalVolume) ExternalVolumeCapabilityArrayOutput { return v.Capabilities }).(ExternalVolumeCapabilityArrayOutput)
}

// `(string: <optional>)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
func (o ExternalVolumeOutput) CapacityMax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringPtrOutput { return v.CapacityMax }).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
func (o ExternalVolumeOutput) CapacityMin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringPtrOutput { return v.CapacityMin }).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - The external ID of an existing volume to restore. If ommited, the volume will be created from scratch. Conflicts with `snapshotId`.
func (o ExternalVolumeOutput) CloneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringPtrOutput { return v.CloneId }).(pulumi.StringPtrOutput)
}

// `(boolean)`
func (o ExternalVolumeOutput) ControllerRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.BoolOutput { return v.ControllerRequired }).(pulumi.BoolOutput)
}

// `(integer)`
func (o ExternalVolumeOutput) ControllersExpected() pulumi.IntOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.IntOutput { return v.ControllersExpected }).(pulumi.IntOutput)
}

// `(integer)`
func (o ExternalVolumeOutput) ControllersHealthy() pulumi.IntOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.IntOutput { return v.ControllersHealthy }).(pulumi.IntOutput)
}

// `(block: optional)` Options for mounting `block-device` volumes without a pre-formatted file system.
func (o ExternalVolumeOutput) MountOptions() ExternalVolumeMountOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalVolume) ExternalVolumeMountOptionsPtrOutput { return v.MountOptions }).(ExternalVolumeMountOptionsPtrOutput)
}

// `(string: <required>)` - The display name for the volume.
func (o ExternalVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `(string: "default")` - The namespace in which to register the volume.
func (o ExternalVolumeOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// `(integer)`
func (o ExternalVolumeOutput) NodesExpected() pulumi.IntOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.IntOutput { return v.NodesExpected }).(pulumi.IntOutput)
}

// `(integer)`
func (o ExternalVolumeOutput) NodesHealthy() pulumi.IntOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.IntOutput { return v.NodesHealthy }).(pulumi.IntOutput)
}

// `(map[string]string: optional)` An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
func (o ExternalVolumeOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// `(string: <required>)` - The ID of the Nomad plugin for registering this volume.
func (o ExternalVolumeOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// `(string)`
func (o ExternalVolumeOutput) PluginProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringOutput { return v.PluginProvider }).(pulumi.StringOutput)
}

// `(string)`
func (o ExternalVolumeOutput) PluginProviderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringOutput { return v.PluginProviderVersion }).(pulumi.StringOutput)
}

// `(boolean)`
func (o ExternalVolumeOutput) Schedulable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.BoolOutput { return v.Schedulable }).(pulumi.BoolOutput)
}

// `(map[string]string: optional)` An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
func (o ExternalVolumeOutput) Secrets() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringMapOutput { return v.Secrets }).(pulumi.StringMapOutput)
}

// `(string: <optional>)` - The external ID of a snapshot to restore. If ommited, the volume will be created from scratch. Conflicts with `cloneId`.
func (o ExternalVolumeOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// `(List of topologies)`
func (o ExternalVolumeOutput) Topologies() ExternalVolumeTopologyArrayOutput {
	return o.ApplyT(func(v *ExternalVolume) ExternalVolumeTopologyArrayOutput { return v.Topologies }).(ExternalVolumeTopologyArrayOutput)
}

// `(“TopologyRequest“: <optional>)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
func (o ExternalVolumeOutput) TopologyRequest() ExternalVolumeTopologyRequestPtrOutput {
	return o.ApplyT(func(v *ExternalVolume) ExternalVolumeTopologyRequestPtrOutput { return v.TopologyRequest }).(ExternalVolumeTopologyRequestPtrOutput)
}

// `(string: <required>)` - The type of the volume. Currently, only `csi` is supported.
func (o ExternalVolumeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// `(string: <required>)` - The unique ID of the volume.
func (o ExternalVolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type ExternalVolumeArrayOutput struct{ *pulumi.OutputState }

func (ExternalVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalVolume)(nil)).Elem()
}

func (o ExternalVolumeArrayOutput) ToExternalVolumeArrayOutput() ExternalVolumeArrayOutput {
	return o
}

func (o ExternalVolumeArrayOutput) ToExternalVolumeArrayOutputWithContext(ctx context.Context) ExternalVolumeArrayOutput {
	return o
}

func (o ExternalVolumeArrayOutput) Index(i pulumi.IntInput) ExternalVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalVolume {
		return vs[0].([]*ExternalVolume)[vs[1].(int)]
	}).(ExternalVolumeOutput)
}

type ExternalVolumeMapOutput struct{ *pulumi.OutputState }

func (ExternalVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalVolume)(nil)).Elem()
}

func (o ExternalVolumeMapOutput) ToExternalVolumeMapOutput() ExternalVolumeMapOutput {
	return o
}

func (o ExternalVolumeMapOutput) ToExternalVolumeMapOutputWithContext(ctx context.Context) ExternalVolumeMapOutput {
	return o
}

func (o ExternalVolumeMapOutput) MapIndex(k pulumi.StringInput) ExternalVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalVolume {
		return vs[0].(map[string]*ExternalVolume)[vs[1].(string)]
	}).(ExternalVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeInput)(nil)).Elem(), &ExternalVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeArrayInput)(nil)).Elem(), ExternalVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeMapInput)(nil)).Elem(), ExternalVolumeMap{})
	pulumi.RegisterOutputType(ExternalVolumeOutput{})
	pulumi.RegisterOutputType(ExternalVolumeArrayOutput{})
	pulumi.RegisterOutputType(ExternalVolumeMapOutput{})
}
