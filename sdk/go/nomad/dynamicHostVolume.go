// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// layout: "nomad"
// page_title: "Nomad: DynamicHostVolume"
// sidebar_current: "docs-nomad-resource-dynamic-host-volume"
// description: |-
//
//	Manages the lifecycle of creating and deleting dynamic host volumes.
//
// ---
//
// Creates and registers a dynamic host volume in Nomad. Note that Nomad supports
// two workflows for dynamic host volumes: create and register. Both resources
// result in the same data source with the same outputs.
//
// > **Warning:** Destroying this resource **will result in data loss**. Use the
//
//	[`preventDestroy`][tfDocsPreventDestroy] directive to avoid accidental
//	deletions.
//
// ## Example Usage
//
// Creating a dynamic host volume:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nomad.NewDynamicHostVolume(ctx, "example", &nomad.DynamicHostVolumeArgs{
//				Name:        pulumi.String("example"),
//				Namespace:   pulumi.String("prod"),
//				PluginId:    pulumi.String("mkdir"),
//				CapacityMax: pulumi.String("12 GiB"),
//				CapacityMin: pulumi.String("1.0 GiB"),
//				Capabilities: nomad.DynamicHostVolumeCapabilityArray{
//					&nomad.DynamicHostVolumeCapabilityArgs{
//						AccessMode:     pulumi.String("single-node-writer"),
//						AttachmentMode: pulumi.String("file-system"),
//					},
//				},
//				Constraints: nomad.DynamicHostVolumeConstraintArray{
//					&nomad.DynamicHostVolumeConstraintArgs{
//						Attribute: pulumi.Sprintf("${attr.kernel.name}"),
//						Value:     pulumi.String("linux"),
//					},
//				},
//				Parameters: pulumi.StringMap{
//					"some_key": pulumi.String("some_value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DynamicHostVolume struct {
	pulumi.CustomResourceState

	// `(block: <optional>)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities DynamicHostVolumeCapabilityArrayOutput `pulumi:"capabilities"`
	// Provisioned capacity
	Capacity      pulumi.StringOutput `pulumi:"capacity"`
	CapacityBytes pulumi.IntOutput    `pulumi:"capacityBytes"`
	// `(string: <optional>)` - Option for requesting a maximum
	// capacity, in bytes. The capacity of a volume may be the physical size of a
	// disk, or a quota, depending on the plugin. The specific size of the resulting
	// volume is somewhere between `capacityMin` and `capacityMax`; the exact
	// behavior is up to the plugin. If you want to specify an exact size, set
	// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
	// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
	// may ignore this field.
	CapacityMax      pulumi.StringPtrOutput `pulumi:"capacityMax"`
	CapacityMaxBytes pulumi.IntOutput       `pulumi:"capacityMaxBytes"`
	// `(string: <optional>)` - Option for requesting a minimum
	// capacity, in bytes. The capacity of a volume may be the physical size of a
	// disk, or a quota, depending on the plugin. The specific size of the resulting
	// volume is somewhere between `capacityMin` and `capacityMax`; the exact
	// behavior is up to the plugin. If you want to specify an exact size, set
	// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
	// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
	// may ignore this field.
	CapacityMin      pulumi.StringPtrOutput `pulumi:"capacityMin"`
	CapacityMinBytes pulumi.IntOutput       `pulumi:"capacityMinBytes"`
	// `(block: <optional>)` - A restriction on the eligible nodes where
	// a volume can be created, similar to the [`constraint`][] block on a Nomad job
	// specification.. You can provide multiple `constraint` blocks to add more
	// constraints. Each constraint block has the following attributes.
	Constraints DynamicHostVolumeConstraintArrayOutput `pulumi:"constraints"`
	// Host path
	HostPath pulumi.StringOutput `pulumi:"hostPath"`
	// `(string: <required>)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names must be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name pulumi.StringOutput `pulumi:"name"`
	// `(string: <optional>)` - The namespace of the volume. This field
	// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
	// environment variable. Defaults to `"default"` if unset.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// `(string: <optional>)` - A specific node where you would like the
	// volume to be created.
	NodeId pulumi.StringOutput `pulumi:"nodeId"`
	// `(string: <optional>)` - A specific node pool where you would like
	// the volume to be created. If you also provide `nodeId`, the node must be in the
	// provided `nodePool`.
	NodePool pulumi.StringOutput `pulumi:"nodePool"`
	// `(map<string|string>: <optional>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// Plugin ID
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// State
	State pulumi.StringOutput `pulumi:"state"`
}

// NewDynamicHostVolume registers a new resource with the given unique name, arguments, and options.
func NewDynamicHostVolume(ctx *pulumi.Context,
	name string, args *DynamicHostVolumeArgs, opts ...pulumi.ResourceOption) (*DynamicHostVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capabilities == nil {
		return nil, errors.New("invalid value for required argument 'Capabilities'")
	}
	if args.PluginId == nil {
		return nil, errors.New("invalid value for required argument 'PluginId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DynamicHostVolume
	err := ctx.RegisterResource("nomad:index/dynamicHostVolume:DynamicHostVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynamicHostVolume gets an existing DynamicHostVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynamicHostVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynamicHostVolumeState, opts ...pulumi.ResourceOption) (*DynamicHostVolume, error) {
	var resource DynamicHostVolume
	err := ctx.ReadResource("nomad:index/dynamicHostVolume:DynamicHostVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DynamicHostVolume resources.
type dynamicHostVolumeState struct {
	// `(block: <optional>)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities []DynamicHostVolumeCapability `pulumi:"capabilities"`
	// Provisioned capacity
	Capacity      *string `pulumi:"capacity"`
	CapacityBytes *int    `pulumi:"capacityBytes"`
	// `(string: <optional>)` - Option for requesting a maximum
	// capacity, in bytes. The capacity of a volume may be the physical size of a
	// disk, or a quota, depending on the plugin. The specific size of the resulting
	// volume is somewhere between `capacityMin` and `capacityMax`; the exact
	// behavior is up to the plugin. If you want to specify an exact size, set
	// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
	// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
	// may ignore this field.
	CapacityMax      *string `pulumi:"capacityMax"`
	CapacityMaxBytes *int    `pulumi:"capacityMaxBytes"`
	// `(string: <optional>)` - Option for requesting a minimum
	// capacity, in bytes. The capacity of a volume may be the physical size of a
	// disk, or a quota, depending on the plugin. The specific size of the resulting
	// volume is somewhere between `capacityMin` and `capacityMax`; the exact
	// behavior is up to the plugin. If you want to specify an exact size, set
	// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
	// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
	// may ignore this field.
	CapacityMin      *string `pulumi:"capacityMin"`
	CapacityMinBytes *int    `pulumi:"capacityMinBytes"`
	// `(block: <optional>)` - A restriction on the eligible nodes where
	// a volume can be created, similar to the [`constraint`][] block on a Nomad job
	// specification.. You can provide multiple `constraint` blocks to add more
	// constraints. Each constraint block has the following attributes.
	Constraints []DynamicHostVolumeConstraint `pulumi:"constraints"`
	// Host path
	HostPath *string `pulumi:"hostPath"`
	// `(string: <required>)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names must be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name *string `pulumi:"name"`
	// `(string: <optional>)` - The namespace of the volume. This field
	// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
	// environment variable. Defaults to `"default"` if unset.
	Namespace *string `pulumi:"namespace"`
	// `(string: <optional>)` - A specific node where you would like the
	// volume to be created.
	NodeId *string `pulumi:"nodeId"`
	// `(string: <optional>)` - A specific node pool where you would like
	// the volume to be created. If you also provide `nodeId`, the node must be in the
	// provided `nodePool`.
	NodePool *string `pulumi:"nodePool"`
	// `(map<string|string>: <optional>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	Parameters map[string]string `pulumi:"parameters"`
	// Plugin ID
	PluginId *string `pulumi:"pluginId"`
	// State
	State *string `pulumi:"state"`
}

type DynamicHostVolumeState struct {
	// `(block: <optional>)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities DynamicHostVolumeCapabilityArrayInput
	// Provisioned capacity
	Capacity      pulumi.StringPtrInput
	CapacityBytes pulumi.IntPtrInput
	// `(string: <optional>)` - Option for requesting a maximum
	// capacity, in bytes. The capacity of a volume may be the physical size of a
	// disk, or a quota, depending on the plugin. The specific size of the resulting
	// volume is somewhere between `capacityMin` and `capacityMax`; the exact
	// behavior is up to the plugin. If you want to specify an exact size, set
	// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
	// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
	// may ignore this field.
	CapacityMax      pulumi.StringPtrInput
	CapacityMaxBytes pulumi.IntPtrInput
	// `(string: <optional>)` - Option for requesting a minimum
	// capacity, in bytes. The capacity of a volume may be the physical size of a
	// disk, or a quota, depending on the plugin. The specific size of the resulting
	// volume is somewhere between `capacityMin` and `capacityMax`; the exact
	// behavior is up to the plugin. If you want to specify an exact size, set
	// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
	// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
	// may ignore this field.
	CapacityMin      pulumi.StringPtrInput
	CapacityMinBytes pulumi.IntPtrInput
	// `(block: <optional>)` - A restriction on the eligible nodes where
	// a volume can be created, similar to the [`constraint`][] block on a Nomad job
	// specification.. You can provide multiple `constraint` blocks to add more
	// constraints. Each constraint block has the following attributes.
	Constraints DynamicHostVolumeConstraintArrayInput
	// Host path
	HostPath pulumi.StringPtrInput
	// `(string: <required>)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names must be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name pulumi.StringPtrInput
	// `(string: <optional>)` - The namespace of the volume. This field
	// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
	// environment variable. Defaults to `"default"` if unset.
	Namespace pulumi.StringPtrInput
	// `(string: <optional>)` - A specific node where you would like the
	// volume to be created.
	NodeId pulumi.StringPtrInput
	// `(string: <optional>)` - A specific node pool where you would like
	// the volume to be created. If you also provide `nodeId`, the node must be in the
	// provided `nodePool`.
	NodePool pulumi.StringPtrInput
	// `(map<string|string>: <optional>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	Parameters pulumi.StringMapInput
	// Plugin ID
	PluginId pulumi.StringPtrInput
	// State
	State pulumi.StringPtrInput
}

func (DynamicHostVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicHostVolumeState)(nil)).Elem()
}

type dynamicHostVolumeArgs struct {
	// `(block: <optional>)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities []DynamicHostVolumeCapability `pulumi:"capabilities"`
	// `(string: <optional>)` - Option for requesting a maximum
	// capacity, in bytes. The capacity of a volume may be the physical size of a
	// disk, or a quota, depending on the plugin. The specific size of the resulting
	// volume is somewhere between `capacityMin` and `capacityMax`; the exact
	// behavior is up to the plugin. If you want to specify an exact size, set
	// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
	// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
	// may ignore this field.
	CapacityMax *string `pulumi:"capacityMax"`
	// `(string: <optional>)` - Option for requesting a minimum
	// capacity, in bytes. The capacity of a volume may be the physical size of a
	// disk, or a quota, depending on the plugin. The specific size of the resulting
	// volume is somewhere between `capacityMin` and `capacityMax`; the exact
	// behavior is up to the plugin. If you want to specify an exact size, set
	// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
	// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
	// may ignore this field.
	CapacityMin *string `pulumi:"capacityMin"`
	// `(block: <optional>)` - A restriction on the eligible nodes where
	// a volume can be created, similar to the [`constraint`][] block on a Nomad job
	// specification.. You can provide multiple `constraint` blocks to add more
	// constraints. Each constraint block has the following attributes.
	Constraints []DynamicHostVolumeConstraint `pulumi:"constraints"`
	// `(string: <required>)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names must be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name *string `pulumi:"name"`
	// `(string: <optional>)` - The namespace of the volume. This field
	// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
	// environment variable. Defaults to `"default"` if unset.
	Namespace *string `pulumi:"namespace"`
	// `(string: <optional>)` - A specific node where you would like the
	// volume to be created.
	NodeId *string `pulumi:"nodeId"`
	// `(string: <optional>)` - A specific node pool where you would like
	// the volume to be created. If you also provide `nodeId`, the node must be in the
	// provided `nodePool`.
	NodePool *string `pulumi:"nodePool"`
	// `(map<string|string>: <optional>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	Parameters map[string]string `pulumi:"parameters"`
	// Plugin ID
	PluginId string `pulumi:"pluginId"`
}

// The set of arguments for constructing a DynamicHostVolume resource.
type DynamicHostVolumeArgs struct {
	// `(block: <optional>)` - Option for validating the capability of a
	// volume. Each capability block has the following attributes:
	Capabilities DynamicHostVolumeCapabilityArrayInput
	// `(string: <optional>)` - Option for requesting a maximum
	// capacity, in bytes. The capacity of a volume may be the physical size of a
	// disk, or a quota, depending on the plugin. The specific size of the resulting
	// volume is somewhere between `capacityMin` and `capacityMax`; the exact
	// behavior is up to the plugin. If you want to specify an exact size, set
	// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
	// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
	// may ignore this field.
	CapacityMax pulumi.StringPtrInput
	// `(string: <optional>)` - Option for requesting a minimum
	// capacity, in bytes. The capacity of a volume may be the physical size of a
	// disk, or a quota, depending on the plugin. The specific size of the resulting
	// volume is somewhere between `capacityMin` and `capacityMax`; the exact
	// behavior is up to the plugin. If you want to specify an exact size, set
	// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
	// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
	// may ignore this field.
	CapacityMin pulumi.StringPtrInput
	// `(block: <optional>)` - A restriction on the eligible nodes where
	// a volume can be created, similar to the [`constraint`][] block on a Nomad job
	// specification.. You can provide multiple `constraint` blocks to add more
	// constraints. Each constraint block has the following attributes.
	Constraints DynamicHostVolumeConstraintArrayInput
	// `(string: <required>)` - The name of the volume, which is used as the
	// [`volume.source`][volumeSource] field in job specifications that claim this
	// volume. Host volume names must be unique per node. Names are visible to any
	// user with `node:read` ACL, even across namespaces, so they should not be
	// treated as sensitive values.
	Name pulumi.StringPtrInput
	// `(string: <optional>)` - The namespace of the volume. This field
	// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
	// environment variable. Defaults to `"default"` if unset.
	Namespace pulumi.StringPtrInput
	// `(string: <optional>)` - A specific node where you would like the
	// volume to be created.
	NodeId pulumi.StringPtrInput
	// `(string: <optional>)` - A specific node pool where you would like
	// the volume to be created. If you also provide `nodeId`, the node must be in the
	// provided `nodePool`.
	NodePool pulumi.StringPtrInput
	// `(map<string|string>: <optional>)` - A key-value map of strings
	// passed directly to the plugin to configure the volume. The details of these
	// parameters are specific to the plugin.
	Parameters pulumi.StringMapInput
	// Plugin ID
	PluginId pulumi.StringInput
}

func (DynamicHostVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicHostVolumeArgs)(nil)).Elem()
}

type DynamicHostVolumeInput interface {
	pulumi.Input

	ToDynamicHostVolumeOutput() DynamicHostVolumeOutput
	ToDynamicHostVolumeOutputWithContext(ctx context.Context) DynamicHostVolumeOutput
}

func (*DynamicHostVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicHostVolume)(nil)).Elem()
}

func (i *DynamicHostVolume) ToDynamicHostVolumeOutput() DynamicHostVolumeOutput {
	return i.ToDynamicHostVolumeOutputWithContext(context.Background())
}

func (i *DynamicHostVolume) ToDynamicHostVolumeOutputWithContext(ctx context.Context) DynamicHostVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeOutput)
}

// DynamicHostVolumeArrayInput is an input type that accepts DynamicHostVolumeArray and DynamicHostVolumeArrayOutput values.
// You can construct a concrete instance of `DynamicHostVolumeArrayInput` via:
//
//	DynamicHostVolumeArray{ DynamicHostVolumeArgs{...} }
type DynamicHostVolumeArrayInput interface {
	pulumi.Input

	ToDynamicHostVolumeArrayOutput() DynamicHostVolumeArrayOutput
	ToDynamicHostVolumeArrayOutputWithContext(context.Context) DynamicHostVolumeArrayOutput
}

type DynamicHostVolumeArray []DynamicHostVolumeInput

func (DynamicHostVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicHostVolume)(nil)).Elem()
}

func (i DynamicHostVolumeArray) ToDynamicHostVolumeArrayOutput() DynamicHostVolumeArrayOutput {
	return i.ToDynamicHostVolumeArrayOutputWithContext(context.Background())
}

func (i DynamicHostVolumeArray) ToDynamicHostVolumeArrayOutputWithContext(ctx context.Context) DynamicHostVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeArrayOutput)
}

// DynamicHostVolumeMapInput is an input type that accepts DynamicHostVolumeMap and DynamicHostVolumeMapOutput values.
// You can construct a concrete instance of `DynamicHostVolumeMapInput` via:
//
//	DynamicHostVolumeMap{ "key": DynamicHostVolumeArgs{...} }
type DynamicHostVolumeMapInput interface {
	pulumi.Input

	ToDynamicHostVolumeMapOutput() DynamicHostVolumeMapOutput
	ToDynamicHostVolumeMapOutputWithContext(context.Context) DynamicHostVolumeMapOutput
}

type DynamicHostVolumeMap map[string]DynamicHostVolumeInput

func (DynamicHostVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicHostVolume)(nil)).Elem()
}

func (i DynamicHostVolumeMap) ToDynamicHostVolumeMapOutput() DynamicHostVolumeMapOutput {
	return i.ToDynamicHostVolumeMapOutputWithContext(context.Background())
}

func (i DynamicHostVolumeMap) ToDynamicHostVolumeMapOutputWithContext(ctx context.Context) DynamicHostVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicHostVolumeMapOutput)
}

type DynamicHostVolumeOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicHostVolume)(nil)).Elem()
}

func (o DynamicHostVolumeOutput) ToDynamicHostVolumeOutput() DynamicHostVolumeOutput {
	return o
}

func (o DynamicHostVolumeOutput) ToDynamicHostVolumeOutputWithContext(ctx context.Context) DynamicHostVolumeOutput {
	return o
}

// `(block: <optional>)` - Option for validating the capability of a
// volume. Each capability block has the following attributes:
func (o DynamicHostVolumeOutput) Capabilities() DynamicHostVolumeCapabilityArrayOutput {
	return o.ApplyT(func(v *DynamicHostVolume) DynamicHostVolumeCapabilityArrayOutput { return v.Capabilities }).(DynamicHostVolumeCapabilityArrayOutput)
}

// Provisioned capacity
func (o DynamicHostVolumeOutput) Capacity() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringOutput { return v.Capacity }).(pulumi.StringOutput)
}

func (o DynamicHostVolumeOutput) CapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.IntOutput { return v.CapacityBytes }).(pulumi.IntOutput)
}

// `(string: <optional>)` - Option for requesting a maximum
// capacity, in bytes. The capacity of a volume may be the physical size of a
// disk, or a quota, depending on the plugin. The specific size of the resulting
// volume is somewhere between `capacityMin` and `capacityMax`; the exact
// behavior is up to the plugin. If you want to specify an exact size, set
// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
// may ignore this field.
func (o DynamicHostVolumeOutput) CapacityMax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringPtrOutput { return v.CapacityMax }).(pulumi.StringPtrOutput)
}

func (o DynamicHostVolumeOutput) CapacityMaxBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.IntOutput { return v.CapacityMaxBytes }).(pulumi.IntOutput)
}

// `(string: <optional>)` - Option for requesting a minimum
// capacity, in bytes. The capacity of a volume may be the physical size of a
// disk, or a quota, depending on the plugin. The specific size of the resulting
// volume is somewhere between `capacityMin` and `capacityMax`; the exact
// behavior is up to the plugin. If you want to specify an exact size, set
// `capacityMin` and `capacityMax` to the same value. Accepts human-friendly
// suffixes such as `"100GiB"`. Plugins that cannot restrict the size of volumes
// may ignore this field.
func (o DynamicHostVolumeOutput) CapacityMin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringPtrOutput { return v.CapacityMin }).(pulumi.StringPtrOutput)
}

func (o DynamicHostVolumeOutput) CapacityMinBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.IntOutput { return v.CapacityMinBytes }).(pulumi.IntOutput)
}

// `(block: <optional>)` - A restriction on the eligible nodes where
// a volume can be created, similar to the [`constraint`][] block on a Nomad job
// specification.. You can provide multiple `constraint` blocks to add more
// constraints. Each constraint block has the following attributes.
func (o DynamicHostVolumeOutput) Constraints() DynamicHostVolumeConstraintArrayOutput {
	return o.ApplyT(func(v *DynamicHostVolume) DynamicHostVolumeConstraintArrayOutput { return v.Constraints }).(DynamicHostVolumeConstraintArrayOutput)
}

// Host path
func (o DynamicHostVolumeOutput) HostPath() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringOutput { return v.HostPath }).(pulumi.StringOutput)
}

// `(string: <required>)` - The name of the volume, which is used as the
// [`volume.source`][volumeSource] field in job specifications that claim this
// volume. Host volume names must be unique per node. Names are visible to any
// user with `node:read` ACL, even across namespaces, so they should not be
// treated as sensitive values.
func (o DynamicHostVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `(string: <optional>)` - The namespace of the volume. This field
// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
// environment variable. Defaults to `"default"` if unset.
func (o DynamicHostVolumeOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// `(string: <optional>)` - A specific node where you would like the
// volume to be created.
func (o DynamicHostVolumeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

// `(string: <optional>)` - A specific node pool where you would like
// the volume to be created. If you also provide `nodeId`, the node must be in the
// provided `nodePool`.
func (o DynamicHostVolumeOutput) NodePool() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringOutput { return v.NodePool }).(pulumi.StringOutput)
}

// `(map<string|string>: <optional>)` - A key-value map of strings
// passed directly to the plugin to configure the volume. The details of these
// parameters are specific to the plugin.
func (o DynamicHostVolumeOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// Plugin ID
func (o DynamicHostVolumeOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// State
func (o DynamicHostVolumeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicHostVolume) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type DynamicHostVolumeArrayOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicHostVolume)(nil)).Elem()
}

func (o DynamicHostVolumeArrayOutput) ToDynamicHostVolumeArrayOutput() DynamicHostVolumeArrayOutput {
	return o
}

func (o DynamicHostVolumeArrayOutput) ToDynamicHostVolumeArrayOutputWithContext(ctx context.Context) DynamicHostVolumeArrayOutput {
	return o
}

func (o DynamicHostVolumeArrayOutput) Index(i pulumi.IntInput) DynamicHostVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DynamicHostVolume {
		return vs[0].([]*DynamicHostVolume)[vs[1].(int)]
	}).(DynamicHostVolumeOutput)
}

type DynamicHostVolumeMapOutput struct{ *pulumi.OutputState }

func (DynamicHostVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicHostVolume)(nil)).Elem()
}

func (o DynamicHostVolumeMapOutput) ToDynamicHostVolumeMapOutput() DynamicHostVolumeMapOutput {
	return o
}

func (o DynamicHostVolumeMapOutput) ToDynamicHostVolumeMapOutputWithContext(ctx context.Context) DynamicHostVolumeMapOutput {
	return o
}

func (o DynamicHostVolumeMapOutput) MapIndex(k pulumi.StringInput) DynamicHostVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DynamicHostVolume {
		return vs[0].(map[string]*DynamicHostVolume)[vs[1].(string)]
	}).(DynamicHostVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeInput)(nil)).Elem(), &DynamicHostVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeArrayInput)(nil)).Elem(), DynamicHostVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicHostVolumeMapInput)(nil)).Elem(), DynamicHostVolumeMap{})
	pulumi.RegisterOutputType(DynamicHostVolumeOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeArrayOutput{})
	pulumi.RegisterOutputType(DynamicHostVolumeMapOutput{})
}
