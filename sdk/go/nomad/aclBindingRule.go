// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nomad

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-nomad/sdk/v2/go/nomad/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type AclBindingRule struct {
	pulumi.CustomResourceState

	// `(string: <required>)` - Name of the auth method for which this
	// rule applies to.
	AuthMethod pulumi.StringOutput `pulumi:"authMethod"`
	// `(string: <optional>)` - Target of the binding. If `bindType` is
	// `role` or `policy` then `bindName` is required. If `bindType` is
	// `management` than `bindName` must not be defined.
	BindName pulumi.StringPtrOutput `pulumi:"bindName"`
	// `(string: <required>)` - Adjusts how this binding rule is applied
	// at login time. Valid values are `role`, `policy`, and `management`.
	BindType pulumi.StringOutput `pulumi:"bindType"`
	// `(string: "")` - Description for this ACL binding rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// `(string: "")` - A boolean expression that matches against verified
	// identity attributes returned from the auth method during login.
	Selector pulumi.StringPtrOutput `pulumi:"selector"`
}

// NewAclBindingRule registers a new resource with the given unique name, arguments, and options.
func NewAclBindingRule(ctx *pulumi.Context,
	name string, args *AclBindingRuleArgs, opts ...pulumi.ResourceOption) (*AclBindingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthMethod == nil {
		return nil, errors.New("invalid value for required argument 'AuthMethod'")
	}
	if args.BindType == nil {
		return nil, errors.New("invalid value for required argument 'BindType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AclBindingRule
	err := ctx.RegisterResource("nomad:index/aclBindingRule:AclBindingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclBindingRule gets an existing AclBindingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclBindingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclBindingRuleState, opts ...pulumi.ResourceOption) (*AclBindingRule, error) {
	var resource AclBindingRule
	err := ctx.ReadResource("nomad:index/aclBindingRule:AclBindingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclBindingRule resources.
type aclBindingRuleState struct {
	// `(string: <required>)` - Name of the auth method for which this
	// rule applies to.
	AuthMethod *string `pulumi:"authMethod"`
	// `(string: <optional>)` - Target of the binding. If `bindType` is
	// `role` or `policy` then `bindName` is required. If `bindType` is
	// `management` than `bindName` must not be defined.
	BindName *string `pulumi:"bindName"`
	// `(string: <required>)` - Adjusts how this binding rule is applied
	// at login time. Valid values are `role`, `policy`, and `management`.
	BindType *string `pulumi:"bindType"`
	// `(string: "")` - Description for this ACL binding rule.
	Description *string `pulumi:"description"`
	// `(string: "")` - A boolean expression that matches against verified
	// identity attributes returned from the auth method during login.
	Selector *string `pulumi:"selector"`
}

type AclBindingRuleState struct {
	// `(string: <required>)` - Name of the auth method for which this
	// rule applies to.
	AuthMethod pulumi.StringPtrInput
	// `(string: <optional>)` - Target of the binding. If `bindType` is
	// `role` or `policy` then `bindName` is required. If `bindType` is
	// `management` than `bindName` must not be defined.
	BindName pulumi.StringPtrInput
	// `(string: <required>)` - Adjusts how this binding rule is applied
	// at login time. Valid values are `role`, `policy`, and `management`.
	BindType pulumi.StringPtrInput
	// `(string: "")` - Description for this ACL binding rule.
	Description pulumi.StringPtrInput
	// `(string: "")` - A boolean expression that matches against verified
	// identity attributes returned from the auth method during login.
	Selector pulumi.StringPtrInput
}

func (AclBindingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclBindingRuleState)(nil)).Elem()
}

type aclBindingRuleArgs struct {
	// `(string: <required>)` - Name of the auth method for which this
	// rule applies to.
	AuthMethod string `pulumi:"authMethod"`
	// `(string: <optional>)` - Target of the binding. If `bindType` is
	// `role` or `policy` then `bindName` is required. If `bindType` is
	// `management` than `bindName` must not be defined.
	BindName *string `pulumi:"bindName"`
	// `(string: <required>)` - Adjusts how this binding rule is applied
	// at login time. Valid values are `role`, `policy`, and `management`.
	BindType string `pulumi:"bindType"`
	// `(string: "")` - Description for this ACL binding rule.
	Description *string `pulumi:"description"`
	// `(string: "")` - A boolean expression that matches against verified
	// identity attributes returned from the auth method during login.
	Selector *string `pulumi:"selector"`
}

// The set of arguments for constructing a AclBindingRule resource.
type AclBindingRuleArgs struct {
	// `(string: <required>)` - Name of the auth method for which this
	// rule applies to.
	AuthMethod pulumi.StringInput
	// `(string: <optional>)` - Target of the binding. If `bindType` is
	// `role` or `policy` then `bindName` is required. If `bindType` is
	// `management` than `bindName` must not be defined.
	BindName pulumi.StringPtrInput
	// `(string: <required>)` - Adjusts how this binding rule is applied
	// at login time. Valid values are `role`, `policy`, and `management`.
	BindType pulumi.StringInput
	// `(string: "")` - Description for this ACL binding rule.
	Description pulumi.StringPtrInput
	// `(string: "")` - A boolean expression that matches against verified
	// identity attributes returned from the auth method during login.
	Selector pulumi.StringPtrInput
}

func (AclBindingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclBindingRuleArgs)(nil)).Elem()
}

type AclBindingRuleInput interface {
	pulumi.Input

	ToAclBindingRuleOutput() AclBindingRuleOutput
	ToAclBindingRuleOutputWithContext(ctx context.Context) AclBindingRuleOutput
}

func (*AclBindingRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AclBindingRule)(nil)).Elem()
}

func (i *AclBindingRule) ToAclBindingRuleOutput() AclBindingRuleOutput {
	return i.ToAclBindingRuleOutputWithContext(context.Background())
}

func (i *AclBindingRule) ToAclBindingRuleOutputWithContext(ctx context.Context) AclBindingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclBindingRuleOutput)
}

func (i *AclBindingRule) ToOutput(ctx context.Context) pulumix.Output[*AclBindingRule] {
	return pulumix.Output[*AclBindingRule]{
		OutputState: i.ToAclBindingRuleOutputWithContext(ctx).OutputState,
	}
}

// AclBindingRuleArrayInput is an input type that accepts AclBindingRuleArray and AclBindingRuleArrayOutput values.
// You can construct a concrete instance of `AclBindingRuleArrayInput` via:
//
//	AclBindingRuleArray{ AclBindingRuleArgs{...} }
type AclBindingRuleArrayInput interface {
	pulumi.Input

	ToAclBindingRuleArrayOutput() AclBindingRuleArrayOutput
	ToAclBindingRuleArrayOutputWithContext(context.Context) AclBindingRuleArrayOutput
}

type AclBindingRuleArray []AclBindingRuleInput

func (AclBindingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclBindingRule)(nil)).Elem()
}

func (i AclBindingRuleArray) ToAclBindingRuleArrayOutput() AclBindingRuleArrayOutput {
	return i.ToAclBindingRuleArrayOutputWithContext(context.Background())
}

func (i AclBindingRuleArray) ToAclBindingRuleArrayOutputWithContext(ctx context.Context) AclBindingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclBindingRuleArrayOutput)
}

func (i AclBindingRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*AclBindingRule] {
	return pulumix.Output[[]*AclBindingRule]{
		OutputState: i.ToAclBindingRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// AclBindingRuleMapInput is an input type that accepts AclBindingRuleMap and AclBindingRuleMapOutput values.
// You can construct a concrete instance of `AclBindingRuleMapInput` via:
//
//	AclBindingRuleMap{ "key": AclBindingRuleArgs{...} }
type AclBindingRuleMapInput interface {
	pulumi.Input

	ToAclBindingRuleMapOutput() AclBindingRuleMapOutput
	ToAclBindingRuleMapOutputWithContext(context.Context) AclBindingRuleMapOutput
}

type AclBindingRuleMap map[string]AclBindingRuleInput

func (AclBindingRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclBindingRule)(nil)).Elem()
}

func (i AclBindingRuleMap) ToAclBindingRuleMapOutput() AclBindingRuleMapOutput {
	return i.ToAclBindingRuleMapOutputWithContext(context.Background())
}

func (i AclBindingRuleMap) ToAclBindingRuleMapOutputWithContext(ctx context.Context) AclBindingRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclBindingRuleMapOutput)
}

func (i AclBindingRuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AclBindingRule] {
	return pulumix.Output[map[string]*AclBindingRule]{
		OutputState: i.ToAclBindingRuleMapOutputWithContext(ctx).OutputState,
	}
}

type AclBindingRuleOutput struct{ *pulumi.OutputState }

func (AclBindingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclBindingRule)(nil)).Elem()
}

func (o AclBindingRuleOutput) ToAclBindingRuleOutput() AclBindingRuleOutput {
	return o
}

func (o AclBindingRuleOutput) ToAclBindingRuleOutputWithContext(ctx context.Context) AclBindingRuleOutput {
	return o
}

func (o AclBindingRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*AclBindingRule] {
	return pulumix.Output[*AclBindingRule]{
		OutputState: o.OutputState,
	}
}

// `(string: <required>)` - Name of the auth method for which this
// rule applies to.
func (o AclBindingRuleOutput) AuthMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringOutput { return v.AuthMethod }).(pulumi.StringOutput)
}

// `(string: <optional>)` - Target of the binding. If `bindType` is
// `role` or `policy` then `bindName` is required. If `bindType` is
// `management` than `bindName` must not be defined.
func (o AclBindingRuleOutput) BindName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringPtrOutput { return v.BindName }).(pulumi.StringPtrOutput)
}

// `(string: <required>)` - Adjusts how this binding rule is applied
// at login time. Valid values are `role`, `policy`, and `management`.
func (o AclBindingRuleOutput) BindType() pulumi.StringOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringOutput { return v.BindType }).(pulumi.StringOutput)
}

// `(string: "")` - Description for this ACL binding rule.
func (o AclBindingRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// `(string: "")` - A boolean expression that matches against verified
// identity attributes returned from the auth method during login.
func (o AclBindingRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclBindingRule) pulumi.StringPtrOutput { return v.Selector }).(pulumi.StringPtrOutput)
}

type AclBindingRuleArrayOutput struct{ *pulumi.OutputState }

func (AclBindingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclBindingRule)(nil)).Elem()
}

func (o AclBindingRuleArrayOutput) ToAclBindingRuleArrayOutput() AclBindingRuleArrayOutput {
	return o
}

func (o AclBindingRuleArrayOutput) ToAclBindingRuleArrayOutputWithContext(ctx context.Context) AclBindingRuleArrayOutput {
	return o
}

func (o AclBindingRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AclBindingRule] {
	return pulumix.Output[[]*AclBindingRule]{
		OutputState: o.OutputState,
	}
}

func (o AclBindingRuleArrayOutput) Index(i pulumi.IntInput) AclBindingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclBindingRule {
		return vs[0].([]*AclBindingRule)[vs[1].(int)]
	}).(AclBindingRuleOutput)
}

type AclBindingRuleMapOutput struct{ *pulumi.OutputState }

func (AclBindingRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclBindingRule)(nil)).Elem()
}

func (o AclBindingRuleMapOutput) ToAclBindingRuleMapOutput() AclBindingRuleMapOutput {
	return o
}

func (o AclBindingRuleMapOutput) ToAclBindingRuleMapOutputWithContext(ctx context.Context) AclBindingRuleMapOutput {
	return o
}

func (o AclBindingRuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AclBindingRule] {
	return pulumix.Output[map[string]*AclBindingRule]{
		OutputState: o.OutputState,
	}
}

func (o AclBindingRuleMapOutput) MapIndex(k pulumi.StringInput) AclBindingRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclBindingRule {
		return vs[0].(map[string]*AclBindingRule)[vs[1].(string)]
	}).(AclBindingRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclBindingRuleInput)(nil)).Elem(), &AclBindingRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclBindingRuleArrayInput)(nil)).Elem(), AclBindingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclBindingRuleMapInput)(nil)).Elem(), AclBindingRuleMap{})
	pulumi.RegisterOutputType(AclBindingRuleOutput{})
	pulumi.RegisterOutputType(AclBindingRuleArrayOutput{})
	pulumi.RegisterOutputType(AclBindingRuleMapOutput{})
}
