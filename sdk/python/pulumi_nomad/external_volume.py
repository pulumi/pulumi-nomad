# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExternalVolumeArgs', 'ExternalVolume']

@pulumi.input_type
class ExternalVolumeArgs:
    def __init__(__self__, *,
                 capabilities: pulumi.Input[Sequence[pulumi.Input['ExternalVolumeCapabilityArgs']]],
                 plugin_id: pulumi.Input[str],
                 volume_id: pulumi.Input[str],
                 capacity_max: Optional[pulumi.Input[str]] = None,
                 capacity_min: Optional[pulumi.Input[str]] = None,
                 clone_id: Optional[pulumi.Input[str]] = None,
                 mount_options: Optional[pulumi.Input['ExternalVolumeMountOptionsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ExternalVolume resource.
        :param pulumi.Input[Sequence[pulumi.Input['ExternalVolumeCapabilityArgs']]] capabilities: Capabilities intended to be used in a job. At least one capability must be provided.
        :param pulumi.Input[str] plugin_id: The ID of the CSI plugin that manages this volume.
        :param pulumi.Input[str] volume_id: The unique ID of the volume, how jobs will refer to the volume.
        :param pulumi.Input[str] capacity_max: Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
        :param pulumi.Input[str] capacity_min: Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
        :param pulumi.Input[str] clone_id: The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
        :param pulumi.Input['ExternalVolumeMountOptionsArgs'] mount_options: Options for mounting 'block-device' volumes without a pre-formatted file system.
        :param pulumi.Input[str] name: The display name of the volume.
        :param pulumi.Input[str] namespace: The namespace in which to create the volume.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] secrets: An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        :param pulumi.Input[str] snapshot_id: The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
               'clone_id'.
        :param pulumi.Input[str] type: The type of the volume. Currently, only 'csi' is supported.
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "plugin_id", plugin_id)
        pulumi.set(__self__, "volume_id", volume_id)
        if capacity_max is not None:
            pulumi.set(__self__, "capacity_max", capacity_max)
        if capacity_min is not None:
            pulumi.set(__self__, "capacity_min", capacity_min)
        if clone_id is not None:
            pulumi.set(__self__, "clone_id", clone_id)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def capabilities(self) -> pulumi.Input[Sequence[pulumi.Input['ExternalVolumeCapabilityArgs']]]:
        """
        Capabilities intended to be used in a job. At least one capability must be provided.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: pulumi.Input[Sequence[pulumi.Input['ExternalVolumeCapabilityArgs']]]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> pulumi.Input[str]:
        """
        The ID of the CSI plugin that manages this volume.
        """
        return pulumi.get(self, "plugin_id")

    @plugin_id.setter
    def plugin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_id", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[str]:
        """
        The unique ID of the volume, how jobs will refer to the volume.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="capacityMax")
    def capacity_max(self) -> Optional[pulumi.Input[str]]:
        """
        Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
        """
        return pulumi.get(self, "capacity_max")

    @capacity_max.setter
    def capacity_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capacity_max", value)

    @property
    @pulumi.getter(name="capacityMin")
    def capacity_min(self) -> Optional[pulumi.Input[str]]:
        """
        Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
        """
        return pulumi.get(self, "capacity_min")

    @capacity_min.setter
    def capacity_min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capacity_min", value)

    @property
    @pulumi.getter(name="cloneId")
    def clone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
        """
        return pulumi.get(self, "clone_id")

    @clone_id.setter
    def clone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clone_id", value)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input['ExternalVolumeMountOptionsArgs']]:
        """
        Options for mounting 'block-device' volumes without a pre-formatted file system.
        """
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input['ExternalVolumeMountOptionsArgs']]):
        pulumi.set(self, "mount_options", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in which to create the volume.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
        'clone_id'.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the volume. Currently, only 'csi' is supported.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ExternalVolumeState:
    def __init__(__self__, *,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalVolumeCapabilityArgs']]]] = None,
                 capacity_max: Optional[pulumi.Input[str]] = None,
                 capacity_min: Optional[pulumi.Input[str]] = None,
                 clone_id: Optional[pulumi.Input[str]] = None,
                 controller_required: Optional[pulumi.Input[bool]] = None,
                 controllers_expected: Optional[pulumi.Input[int]] = None,
                 controllers_healthy: Optional[pulumi.Input[int]] = None,
                 mount_options: Optional[pulumi.Input['ExternalVolumeMountOptionsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 nodes_expected: Optional[pulumi.Input[int]] = None,
                 nodes_healthy: Optional[pulumi.Input[int]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 plugin_id: Optional[pulumi.Input[str]] = None,
                 plugin_provider: Optional[pulumi.Input[str]] = None,
                 plugin_provider_version: Optional[pulumi.Input[str]] = None,
                 schedulable: Optional[pulumi.Input[bool]] = None,
                 secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExternalVolume resources.
        :param pulumi.Input[Sequence[pulumi.Input['ExternalVolumeCapabilityArgs']]] capabilities: Capabilities intended to be used in a job. At least one capability must be provided.
        :param pulumi.Input[str] capacity_max: Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
        :param pulumi.Input[str] capacity_min: Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
        :param pulumi.Input[str] clone_id: The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
        :param pulumi.Input['ExternalVolumeMountOptionsArgs'] mount_options: Options for mounting 'block-device' volumes without a pre-formatted file system.
        :param pulumi.Input[str] name: The display name of the volume.
        :param pulumi.Input[str] namespace: The namespace in which to create the volume.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        :param pulumi.Input[str] plugin_id: The ID of the CSI plugin that manages this volume.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] secrets: An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        :param pulumi.Input[str] snapshot_id: The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
               'clone_id'.
        :param pulumi.Input[str] type: The type of the volume. Currently, only 'csi' is supported.
        :param pulumi.Input[str] volume_id: The unique ID of the volume, how jobs will refer to the volume.
        """
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if capacity_max is not None:
            pulumi.set(__self__, "capacity_max", capacity_max)
        if capacity_min is not None:
            pulumi.set(__self__, "capacity_min", capacity_min)
        if clone_id is not None:
            pulumi.set(__self__, "clone_id", clone_id)
        if controller_required is not None:
            pulumi.set(__self__, "controller_required", controller_required)
        if controllers_expected is not None:
            pulumi.set(__self__, "controllers_expected", controllers_expected)
        if controllers_healthy is not None:
            pulumi.set(__self__, "controllers_healthy", controllers_healthy)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if nodes_expected is not None:
            pulumi.set(__self__, "nodes_expected", nodes_expected)
        if nodes_healthy is not None:
            pulumi.set(__self__, "nodes_healthy", nodes_healthy)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if plugin_id is not None:
            pulumi.set(__self__, "plugin_id", plugin_id)
        if plugin_provider is not None:
            pulumi.set(__self__, "plugin_provider", plugin_provider)
        if plugin_provider_version is not None:
            pulumi.set(__self__, "plugin_provider_version", plugin_provider_version)
        if schedulable is not None:
            pulumi.set(__self__, "schedulable", schedulable)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalVolumeCapabilityArgs']]]]:
        """
        Capabilities intended to be used in a job. At least one capability must be provided.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalVolumeCapabilityArgs']]]]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter(name="capacityMax")
    def capacity_max(self) -> Optional[pulumi.Input[str]]:
        """
        Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
        """
        return pulumi.get(self, "capacity_max")

    @capacity_max.setter
    def capacity_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capacity_max", value)

    @property
    @pulumi.getter(name="capacityMin")
    def capacity_min(self) -> Optional[pulumi.Input[str]]:
        """
        Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
        """
        return pulumi.get(self, "capacity_min")

    @capacity_min.setter
    def capacity_min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capacity_min", value)

    @property
    @pulumi.getter(name="cloneId")
    def clone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
        """
        return pulumi.get(self, "clone_id")

    @clone_id.setter
    def clone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clone_id", value)

    @property
    @pulumi.getter(name="controllerRequired")
    def controller_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "controller_required")

    @controller_required.setter
    def controller_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "controller_required", value)

    @property
    @pulumi.getter(name="controllersExpected")
    def controllers_expected(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "controllers_expected")

    @controllers_expected.setter
    def controllers_expected(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "controllers_expected", value)

    @property
    @pulumi.getter(name="controllersHealthy")
    def controllers_healthy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "controllers_healthy")

    @controllers_healthy.setter
    def controllers_healthy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "controllers_healthy", value)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input['ExternalVolumeMountOptionsArgs']]:
        """
        Options for mounting 'block-device' volumes without a pre-formatted file system.
        """
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input['ExternalVolumeMountOptionsArgs']]):
        pulumi.set(self, "mount_options", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in which to create the volume.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="nodesExpected")
    def nodes_expected(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nodes_expected")

    @nodes_expected.setter
    def nodes_expected(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nodes_expected", value)

    @property
    @pulumi.getter(name="nodesHealthy")
    def nodes_healthy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nodes_healthy")

    @nodes_healthy.setter
    def nodes_healthy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nodes_healthy", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the CSI plugin that manages this volume.
        """
        return pulumi.get(self, "plugin_id")

    @plugin_id.setter
    def plugin_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_id", value)

    @property
    @pulumi.getter(name="pluginProvider")
    def plugin_provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin_provider")

    @plugin_provider.setter
    def plugin_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_provider", value)

    @property
    @pulumi.getter(name="pluginProviderVersion")
    def plugin_provider_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin_provider_version")

    @plugin_provider_version.setter
    def plugin_provider_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_provider_version", value)

    @property
    @pulumi.getter
    def schedulable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "schedulable")

    @schedulable.setter
    def schedulable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "schedulable", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
        'clone_id'.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the volume. Currently, only 'csi' is supported.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID of the volume, how jobs will refer to the volume.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)


class ExternalVolume(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalVolumeCapabilityArgs']]]]] = None,
                 capacity_max: Optional[pulumi.Input[str]] = None,
                 capacity_min: Optional[pulumi.Input[str]] = None,
                 clone_id: Optional[pulumi.Input[str]] = None,
                 mount_options: Optional[pulumi.Input[pulumi.InputType['ExternalVolumeMountOptionsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 plugin_id: Optional[pulumi.Input[str]] = None,
                 secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ExternalVolume resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalVolumeCapabilityArgs']]]] capabilities: Capabilities intended to be used in a job. At least one capability must be provided.
        :param pulumi.Input[str] capacity_max: Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
        :param pulumi.Input[str] capacity_min: Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
        :param pulumi.Input[str] clone_id: The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
        :param pulumi.Input[pulumi.InputType['ExternalVolumeMountOptionsArgs']] mount_options: Options for mounting 'block-device' volumes without a pre-formatted file system.
        :param pulumi.Input[str] name: The display name of the volume.
        :param pulumi.Input[str] namespace: The namespace in which to create the volume.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        :param pulumi.Input[str] plugin_id: The ID of the CSI plugin that manages this volume.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] secrets: An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        :param pulumi.Input[str] snapshot_id: The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
               'clone_id'.
        :param pulumi.Input[str] type: The type of the volume. Currently, only 'csi' is supported.
        :param pulumi.Input[str] volume_id: The unique ID of the volume, how jobs will refer to the volume.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExternalVolumeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ExternalVolume resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExternalVolumeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExternalVolumeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalVolumeCapabilityArgs']]]]] = None,
                 capacity_max: Optional[pulumi.Input[str]] = None,
                 capacity_min: Optional[pulumi.Input[str]] = None,
                 clone_id: Optional[pulumi.Input[str]] = None,
                 mount_options: Optional[pulumi.Input[pulumi.InputType['ExternalVolumeMountOptionsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 plugin_id: Optional[pulumi.Input[str]] = None,
                 secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExternalVolumeArgs.__new__(ExternalVolumeArgs)

            if capabilities is None and not opts.urn:
                raise TypeError("Missing required property 'capabilities'")
            __props__.__dict__["capabilities"] = capabilities
            __props__.__dict__["capacity_max"] = capacity_max
            __props__.__dict__["capacity_min"] = capacity_min
            __props__.__dict__["clone_id"] = clone_id
            __props__.__dict__["mount_options"] = mount_options
            __props__.__dict__["name"] = name
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["parameters"] = parameters
            if plugin_id is None and not opts.urn:
                raise TypeError("Missing required property 'plugin_id'")
            __props__.__dict__["plugin_id"] = plugin_id
            __props__.__dict__["secrets"] = secrets
            __props__.__dict__["snapshot_id"] = snapshot_id
            __props__.__dict__["type"] = type
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["controller_required"] = None
            __props__.__dict__["controllers_expected"] = None
            __props__.__dict__["controllers_healthy"] = None
            __props__.__dict__["nodes_expected"] = None
            __props__.__dict__["nodes_healthy"] = None
            __props__.__dict__["plugin_provider"] = None
            __props__.__dict__["plugin_provider_version"] = None
            __props__.__dict__["schedulable"] = None
        super(ExternalVolume, __self__).__init__(
            'nomad:index/externalVolume:ExternalVolume',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalVolumeCapabilityArgs']]]]] = None,
            capacity_max: Optional[pulumi.Input[str]] = None,
            capacity_min: Optional[pulumi.Input[str]] = None,
            clone_id: Optional[pulumi.Input[str]] = None,
            controller_required: Optional[pulumi.Input[bool]] = None,
            controllers_expected: Optional[pulumi.Input[int]] = None,
            controllers_healthy: Optional[pulumi.Input[int]] = None,
            mount_options: Optional[pulumi.Input[pulumi.InputType['ExternalVolumeMountOptionsArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            nodes_expected: Optional[pulumi.Input[int]] = None,
            nodes_healthy: Optional[pulumi.Input[int]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            plugin_id: Optional[pulumi.Input[str]] = None,
            plugin_provider: Optional[pulumi.Input[str]] = None,
            plugin_provider_version: Optional[pulumi.Input[str]] = None,
            schedulable: Optional[pulumi.Input[bool]] = None,
            secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            snapshot_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            volume_id: Optional[pulumi.Input[str]] = None) -> 'ExternalVolume':
        """
        Get an existing ExternalVolume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalVolumeCapabilityArgs']]]] capabilities: Capabilities intended to be used in a job. At least one capability must be provided.
        :param pulumi.Input[str] capacity_max: Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
        :param pulumi.Input[str] capacity_min: Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
        :param pulumi.Input[str] clone_id: The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
        :param pulumi.Input[pulumi.InputType['ExternalVolumeMountOptionsArgs']] mount_options: Options for mounting 'block-device' volumes without a pre-formatted file system.
        :param pulumi.Input[str] name: The display name of the volume.
        :param pulumi.Input[str] namespace: The namespace in which to create the volume.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        :param pulumi.Input[str] plugin_id: The ID of the CSI plugin that manages this volume.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] secrets: An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        :param pulumi.Input[str] snapshot_id: The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
               'clone_id'.
        :param pulumi.Input[str] type: The type of the volume. Currently, only 'csi' is supported.
        :param pulumi.Input[str] volume_id: The unique ID of the volume, how jobs will refer to the volume.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExternalVolumeState.__new__(_ExternalVolumeState)

        __props__.__dict__["capabilities"] = capabilities
        __props__.__dict__["capacity_max"] = capacity_max
        __props__.__dict__["capacity_min"] = capacity_min
        __props__.__dict__["clone_id"] = clone_id
        __props__.__dict__["controller_required"] = controller_required
        __props__.__dict__["controllers_expected"] = controllers_expected
        __props__.__dict__["controllers_healthy"] = controllers_healthy
        __props__.__dict__["mount_options"] = mount_options
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["nodes_expected"] = nodes_expected
        __props__.__dict__["nodes_healthy"] = nodes_healthy
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["plugin_id"] = plugin_id
        __props__.__dict__["plugin_provider"] = plugin_provider
        __props__.__dict__["plugin_provider_version"] = plugin_provider_version
        __props__.__dict__["schedulable"] = schedulable
        __props__.__dict__["secrets"] = secrets
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["type"] = type
        __props__.__dict__["volume_id"] = volume_id
        return ExternalVolume(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def capabilities(self) -> pulumi.Output[Sequence['outputs.ExternalVolumeCapability']]:
        """
        Capabilities intended to be used in a job. At least one capability must be provided.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="capacityMax")
    def capacity_max(self) -> pulumi.Output[Optional[str]]:
        """
        Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
        """
        return pulumi.get(self, "capacity_max")

    @property
    @pulumi.getter(name="capacityMin")
    def capacity_min(self) -> pulumi.Output[Optional[str]]:
        """
        Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
        """
        return pulumi.get(self, "capacity_min")

    @property
    @pulumi.getter(name="cloneId")
    def clone_id(self) -> pulumi.Output[Optional[str]]:
        """
        The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
        """
        return pulumi.get(self, "clone_id")

    @property
    @pulumi.getter(name="controllerRequired")
    def controller_required(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "controller_required")

    @property
    @pulumi.getter(name="controllersExpected")
    def controllers_expected(self) -> pulumi.Output[int]:
        return pulumi.get(self, "controllers_expected")

    @property
    @pulumi.getter(name="controllersHealthy")
    def controllers_healthy(self) -> pulumi.Output[int]:
        return pulumi.get(self, "controllers_healthy")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> pulumi.Output[Optional['outputs.ExternalVolumeMountOptions']]:
        """
        Options for mounting 'block-device' volumes without a pre-formatted file system.
        """
        return pulumi.get(self, "mount_options")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The display name of the volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        The namespace in which to create the volume.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="nodesExpected")
    def nodes_expected(self) -> pulumi.Output[int]:
        return pulumi.get(self, "nodes_expected")

    @property
    @pulumi.getter(name="nodesHealthy")
    def nodes_healthy(self) -> pulumi.Output[int]:
        return pulumi.get(self, "nodes_healthy")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> pulumi.Output[str]:
        """
        The ID of the CSI plugin that manages this volume.
        """
        return pulumi.get(self, "plugin_id")

    @property
    @pulumi.getter(name="pluginProvider")
    def plugin_provider(self) -> pulumi.Output[str]:
        return pulumi.get(self, "plugin_provider")

    @property
    @pulumi.getter(name="pluginProviderVersion")
    def plugin_provider_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "plugin_provider_version")

    @property
    @pulumi.getter
    def schedulable(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "schedulable")

    @property
    @pulumi.getter
    def secrets(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[Optional[str]]:
        """
        The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
        'clone_id'.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of the volume. Currently, only 'csi' is supported.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[str]:
        """
        The unique ID of the volume, how jobs will refer to the volume.
        """
        return pulumi.get(self, "volume_id")

