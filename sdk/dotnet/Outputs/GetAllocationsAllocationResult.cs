// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad.Outputs
{

    [OutputType]
    public sealed class GetAllocationsAllocationResult
    {
        /// <summary>
        /// `(string)` - The current client status of the allocation.
        /// </summary>
        public readonly string ClientStatus;
        /// <summary>
        /// `(int)` - The Raft index in which the allocation was created.
        /// </summary>
        public readonly int CreateIndex;
        /// <summary>
        /// `(int)` - The timestamp of when the allocation was created.
        /// </summary>
        public readonly int CreateTime;
        /// <summary>
        /// `(string)` - The current desired status of the allocation.
        /// </summary>
        public readonly string DesiredStatus;
        /// <summary>
        /// `(string)` - The ID of the evaluation that generated the allocation.
        /// </summary>
        public readonly string EvalId;
        /// <summary>
        /// `(string)` - The ID of the evaluation that succeeds the allocation evaluation.
        /// </summary>
        public readonly string FollowupEvalId;
        /// <summary>
        /// `(string)` - The ID of the allocation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// `(string)` - The ID of the job related to the allocation.
        /// </summary>
        public readonly string JobId;
        /// <summary>
        /// `(string)` - The type of the job related to the allocation.
        /// </summary>
        public readonly string JobType;
        /// <summary>
        /// `(int)` - The version of the job that generated the allocation.
        /// </summary>
        public readonly int JobVersion;
        /// <summary>
        /// `(int)` - The Raft index in which the allocation was last modified.
        /// </summary>
        public readonly int ModifyIndex;
        /// <summary>
        /// `(int)` - The timestamp of when the allocation was last modified.
        /// </summary>
        public readonly int ModifyTime;
        /// <summary>
        /// `(string)` - The name of the allocation.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// `(string: &lt;optional&gt;)` - Specifies the namespace to search for
        /// allocations in.
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// `(string)` - The ID of the allocation that succeeds the allocation.
        /// </summary>
        public readonly string NextAllocation;
        /// <summary>
        /// `(string)` - The ID of the node to which the allocation was scheduled.
        /// </summary>
        public readonly string NodeId;
        /// <summary>
        /// `(string)` - The ID of the node to which the allocation was scheduled.
        /// </summary>
        public readonly string NodeName;
        /// <summary>
        /// `(string)` - The ID of the allocation that preempted the allocation.
        /// </summary>
        public readonly string PreemptedByAllocation;
        /// <summary>
        /// `(string)` - The job task group related to the allocation.
        /// </summary>
        public readonly string TaskGroup;

        [OutputConstructor]
        private GetAllocationsAllocationResult(
            string clientStatus,

            int createIndex,

            int createTime,

            string desiredStatus,

            string evalId,

            string followupEvalId,

            string id,

            string jobId,

            string jobType,

            int jobVersion,

            int modifyIndex,

            int modifyTime,

            string name,

            string @namespace,

            string nextAllocation,

            string nodeId,

            string nodeName,

            string preemptedByAllocation,

            string taskGroup)
        {
            ClientStatus = clientStatus;
            CreateIndex = createIndex;
            CreateTime = createTime;
            DesiredStatus = desiredStatus;
            EvalId = evalId;
            FollowupEvalId = followupEvalId;
            Id = id;
            JobId = jobId;
            JobType = jobType;
            JobVersion = jobVersion;
            ModifyIndex = modifyIndex;
            ModifyTime = modifyTime;
            Name = name;
            Namespace = @namespace;
            NextAllocation = nextAllocation;
            NodeId = nodeId;
            NodeName = nodeName;
            PreemptedByAllocation = preemptedByAllocation;
            TaskGroup = taskGroup;
        }
    }
}
