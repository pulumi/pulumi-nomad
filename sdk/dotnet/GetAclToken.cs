// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    public static class GetAclToken
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myToken = Nomad.GetAclToken.Invoke(new()
        ///     {
        ///         AccessorId = "aa534e09-6a07-0a45-2295-a7f77063d429",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAclTokenResult> InvokeAsync(GetAclTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAclTokenResult>("nomad:index/getAclToken:getAclToken", args ?? new GetAclTokenArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myToken = Nomad.GetAclToken.Invoke(new()
        ///     {
        ///         AccessorId = "aa534e09-6a07-0a45-2295-a7f77063d429",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAclTokenResult> Invoke(GetAclTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAclTokenResult>("nomad:index/getAclToken:getAclToken", args ?? new GetAclTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAclTokenArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `(string)` Non-sensitive identifier for this token.
        /// </summary>
        [Input("accessorId", required: true)]
        public string AccessorId { get; set; } = null!;

        public GetAclTokenArgs()
        {
        }
        public static new GetAclTokenArgs Empty => new GetAclTokenArgs();
    }

    public sealed class GetAclTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `(string)` Non-sensitive identifier for this token.
        /// </summary>
        [Input("accessorId", required: true)]
        public Input<string> AccessorId { get; set; } = null!;

        public GetAclTokenInvokeArgs()
        {
        }
        public static new GetAclTokenInvokeArgs Empty => new GetAclTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetAclTokenResult
    {
        /// <summary>
        /// `(string)` Non-sensitive identifier for this token.
        /// </summary>
        public readonly string AccessorId;
        /// <summary>
        /// `(string)` Date and time the token was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// `(string)` - The timestamp after which the token is
        /// considered expired and eligible for destruction.
        /// </summary>
        public readonly string ExpirationTime;
        /// <summary>
        /// `(string)` The expiration TTL for the token.
        /// </summary>
        public readonly string ExpirationTtl;
        /// <summary>
        /// `(bool)` Whether the token is replicated to all regions, or if it 
        /// will only be used in the region it was created.
        /// </summary>
        public readonly bool Global;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// `(string)` Non-sensitive identifier for this token.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// `(list of strings)` List of policy names associated with this token.
        /// </summary>
        public readonly ImmutableArray<string> Policies;
        /// <summary>
        /// `(set: [])` - The list of roles attached to the token. Each entry has
        /// `name` and `id` attributes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAclTokenRoleResult> Roles;
        /// <summary>
        /// `(string)` The token value itself.
        /// </summary>
        public readonly string SecretId;
        /// <summary>
        /// `(string)` The type of the token.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAclTokenResult(
            string accessorId,

            string createTime,

            string expirationTime,

            string expirationTtl,

            bool global,

            string id,

            string name,

            ImmutableArray<string> policies,

            ImmutableArray<Outputs.GetAclTokenRoleResult> roles,

            string secretId,

            string type)
        {
            AccessorId = accessorId;
            CreateTime = createTime;
            ExpirationTime = expirationTime;
            ExpirationTtl = expirationTtl;
            Global = global;
            Id = id;
            Name = name;
            Policies = policies;
            Roles = roles;
            SecretId = secretId;
            Type = type;
        }
    }
}
