// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    public static class GetDynamicHostVolume
    {
        /// <summary>
        /// Get information on a dynamic host volume from Nomad.
        /// 
        /// ## Example Usage
        /// 
        /// Check for the existing of a host volume:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nomad.GetDynamicHostVolume.Invoke(new()
        ///     {
        ///         Namespace = "prod",
        ///         Id = "d688ff7a-d299-11ef-ae3c-6f2400953c18",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// This will check for a dynamic host volume with the ID
        /// `d688ff7a-d299-11ef-ae3c-6f2400953c18`.
        /// </summary>
        public static Task<GetDynamicHostVolumeResult> InvokeAsync(GetDynamicHostVolumeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDynamicHostVolumeResult>("nomad:index/getDynamicHostVolume:getDynamicHostVolume", args ?? new GetDynamicHostVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information on a dynamic host volume from Nomad.
        /// 
        /// ## Example Usage
        /// 
        /// Check for the existing of a host volume:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nomad.GetDynamicHostVolume.Invoke(new()
        ///     {
        ///         Namespace = "prod",
        ///         Id = "d688ff7a-d299-11ef-ae3c-6f2400953c18",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// This will check for a dynamic host volume with the ID
        /// `d688ff7a-d299-11ef-ae3c-6f2400953c18`.
        /// </summary>
        public static Output<GetDynamicHostVolumeResult> Invoke(GetDynamicHostVolumeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDynamicHostVolumeResult>("nomad:index/getDynamicHostVolume:getDynamicHostVolume", args ?? new GetDynamicHostVolumeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information on a dynamic host volume from Nomad.
        /// 
        /// ## Example Usage
        /// 
        /// Check for the existing of a host volume:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nomad.GetDynamicHostVolume.Invoke(new()
        ///     {
        ///         Namespace = "prod",
        ///         Id = "d688ff7a-d299-11ef-ae3c-6f2400953c18",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// This will check for a dynamic host volume with the ID
        /// `d688ff7a-d299-11ef-ae3c-6f2400953c18`.
        /// </summary>
        public static Output<GetDynamicHostVolumeResult> Invoke(GetDynamicHostVolumeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDynamicHostVolumeResult>("nomad:index/getDynamicHostVolume:getDynamicHostVolume", args ?? new GetDynamicHostVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDynamicHostVolumeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `(string)` - the ID of the volume
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// `(string)` - the namespace of the volume. Defaults to `"default"`
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        public GetDynamicHostVolumeArgs()
        {
        }
        public static new GetDynamicHostVolumeArgs Empty => new GetDynamicHostVolumeArgs();
    }

    public sealed class GetDynamicHostVolumeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `(string)` - the ID of the volume
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// `(string)` - the namespace of the volume. Defaults to `"default"`
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public GetDynamicHostVolumeInvokeArgs()
        {
        }
        public static new GetDynamicHostVolumeInvokeArgs Empty => new GetDynamicHostVolumeInvokeArgs();
    }


    [OutputType]
    public sealed class GetDynamicHostVolumeResult
    {
        /// <summary>
        /// `(block)` - Option for validating the capability of a
        /// volume. Each capability block has the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDynamicHostVolumeCapabilityResult> Capabilities;
        /// <summary>
        /// `(string)` - The size of the volume, in human-friendly format
        /// (ex. 10 GiB)
        /// </summary>
        public readonly string Capacity;
        /// <summary>
        /// `(int)` - The size of the volume, in bytes.
        /// </summary>
        public readonly int CapacityBytes;
        /// <summary>
        /// `(string)` - The requested maximum capacity of the volume, in
        /// human-friendly format (ex. 10 GiB).
        /// </summary>
        public readonly string CapacityMax;
        /// <summary>
        /// `(string)` - The requested maximum capacity of the
        /// volume, in bytes.
        /// </summary>
        public readonly int CapacityMaxBytes;
        /// <summary>
        /// `(string)` - The requested minimum capacity of the volume, in
        /// human-friendly format (ex. 10 GiB).
        /// </summary>
        public readonly string CapacityMin;
        /// <summary>
        /// `(string)` - The requested minimum capacity of the
        /// volume, in bytes.
        /// </summary>
        public readonly int CapacityMinBytes;
        /// <summary>
        /// `(block)` - The restrictions used to place the volume on a node,
        /// similar to the [`constraint`][] block on a Nomad job specification. A volume
        /// may have multiple `constraint` blocks. Each constraint block has the following
        /// attributes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDynamicHostVolumeConstraintResult> Constraints;
        /// <summary>
        /// `(string)` - The path on disk where the volume exists.
        /// </summary>
        public readonly string HostPath;
        public readonly string Id;
        /// <summary>
        /// `(string)` - The name of the volume, which is used as the
        /// [`volume.source`][volume_source] field in job specifications that claim this
        /// volume. Host volume names are be unique per node. Names are visible to any
        /// user with `node:read` ACL, even across namespaces, so they should not be
        /// treated as sensitive values.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// `(string)` - The namespace of the volume.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// `(string)` - A specific node where the volume is mounted.
        /// </summary>
        public readonly string NodeId;
        /// <summary>
        /// `(string: &lt;optional&gt;)` - The node pool of the node where the
        /// volume is mounted.
        /// </summary>
        public readonly string NodePool;
        /// <summary>
        /// `(map&lt;string|string&gt;)` - A key-value map of strings
        /// passed directly to the plugin to configure the volume. The details of these
        /// parameters are specific to the plugin.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Parameters;
        /// <summary>
        /// `(string: &lt;required&gt;)` - The ID of the [dynamic host volume
        /// plugin][dhv_plugin] that manages this volume.
        /// </summary>
        public readonly string PluginId;
        public readonly string State;

        [OutputConstructor]
        private GetDynamicHostVolumeResult(
            ImmutableArray<Outputs.GetDynamicHostVolumeCapabilityResult> capabilities,

            string capacity,

            int capacityBytes,

            string capacityMax,

            int capacityMaxBytes,

            string capacityMin,

            int capacityMinBytes,

            ImmutableArray<Outputs.GetDynamicHostVolumeConstraintResult> constraints,

            string hostPath,

            string id,

            string name,

            string? @namespace,

            string nodeId,

            string nodePool,

            ImmutableDictionary<string, string> parameters,

            string pluginId,

            string state)
        {
            Capabilities = capabilities;
            Capacity = capacity;
            CapacityBytes = capacityBytes;
            CapacityMax = capacityMax;
            CapacityMaxBytes = capacityMaxBytes;
            CapacityMin = capacityMin;
            CapacityMinBytes = capacityMinBytes;
            Constraints = constraints;
            HostPath = hostPath;
            Id = id;
            Name = name;
            Namespace = @namespace;
            NodeId = nodeId;
            NodePool = nodePool;
            Parameters = parameters;
            PluginId = pluginId;
            State = state;
        }
    }
}
