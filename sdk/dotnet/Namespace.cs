// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    /// <summary>
    /// Provisions a namespace within a Nomad cluster.
    /// 
    /// Nomad auto-generates a default namespace called `default`. This namespace
    /// cannot be removed, so destroying a `nomad.Namespace` resource where
    /// `name = "default"` will cause the namespace to be reset to its default
    /// configuration.
    /// 
    /// ## Example Usage
    /// 
    /// Registering a namespace:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Nomad = Pulumi.Nomad;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dev = new Nomad.Namespace("dev", new()
    ///     {
    ///         Description = "Shared development environment.",
    ///         Quota = "dev",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Registering a namespace with a quota:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Nomad = Pulumi.Nomad;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var webTeam = new Nomad.QuoteSpecification("webTeam", new()
    ///     {
    ///         Description = "web team quota",
    ///         Limits = new[]
    ///         {
    ///             new Nomad.Inputs.QuoteSpecificationLimitArgs
    ///             {
    ///                 Region = "global",
    ///                 RegionLimit = new Nomad.Inputs.QuoteSpecificationLimitRegionLimitArgs
    ///                 {
    ///                     Cpu = 1000,
    ///                     MemoryMb = 256,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var web = new Nomad.Namespace("web", new()
    ///     {
    ///         Description = "Web team production environment.",
    ///         Quota = webTeam.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NomadResourceType("nomad:index/namespace:Namespace")]
    public partial class Namespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// `(string: "")` - A description of the namespace.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - A unique name for the namespace.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// `(string: "")` - A resource quota to attach to the namespace.
        /// </summary>
        [Output("quota")]
        public Output<string?> Quota { get; private set; } = null!;


        /// <summary>
        /// Create a Namespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Namespace(string name, NamespaceArgs? args = null, CustomResourceOptions? options = null)
            : base("nomad:index/namespace:Namespace", name, args ?? new NamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Namespace(string name, Input<string> id, NamespaceState? state = null, CustomResourceOptions? options = null)
            : base("nomad:index/namespace:Namespace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Namespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Namespace Get(string name, Input<string> id, NamespaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Namespace(name, id, state, options);
        }
    }

    public sealed class NamespaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// `(string: "")` - A description of the namespace.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - A unique name for the namespace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `(string: "")` - A resource quota to attach to the namespace.
        /// </summary>
        [Input("quota")]
        public Input<string>? Quota { get; set; }

        public NamespaceArgs()
        {
        }
        public static new NamespaceArgs Empty => new NamespaceArgs();
    }

    public sealed class NamespaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// `(string: "")` - A description of the namespace.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - A unique name for the namespace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `(string: "")` - A resource quota to attach to the namespace.
        /// </summary>
        [Input("quota")]
        public Input<string>? Quota { get; set; }

        public NamespaceState()
        {
        }
        public static new NamespaceState Empty => new NamespaceState();
    }
}
