// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    [NomadResourceType("nomad:index/volume:Volume")]
    public partial class Volume : Pulumi.CustomResource
    {
        /// <summary>
        /// Defines whether a volume should be available concurrently.
        /// </summary>
        [Output("accessMode")]
        public Output<string?> AccessMode { get; private set; } = null!;

        /// <summary>
        /// The storage API that will be used by the volume.
        /// </summary>
        [Output("attachmentMode")]
        public Output<string?> AttachmentMode { get; private set; } = null!;

        /// <summary>
        /// Capabilities intended to be used in a job. At least one capability must be provided.
        /// </summary>
        [Output("capabilities")]
        public Output<ImmutableArray<Outputs.VolumeCapability>> Capabilities { get; private set; } = null!;

        /// <summary>
        /// An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
        /// </summary>
        [Output("context")]
        public Output<ImmutableDictionary<string, string>?> Context { get; private set; } = null!;

        [Output("controllerRequired")]
        public Output<bool> ControllerRequired { get; private set; } = null!;

        [Output("controllersExpected")]
        public Output<int> ControllersExpected { get; private set; } = null!;

        [Output("controllersHealthy")]
        public Output<int> ControllersHealthy { get; private set; } = null!;

        /// <summary>
        /// If true, the volume will be deregistered on destroy.
        /// </summary>
        [Output("deregisterOnDestroy")]
        public Output<bool?> DeregisterOnDestroy { get; private set; } = null!;

        /// <summary>
        /// The ID of the physical volume from the storage provider.
        /// </summary>
        [Output("externalId")]
        public Output<string> ExternalId { get; private set; } = null!;

        /// <summary>
        /// Options for mounting 'block-device' volumes without a pre-formatted file system.
        /// </summary>
        [Output("mountOptions")]
        public Output<Outputs.VolumeMountOptions?> MountOptions { get; private set; } = null!;

        /// <summary>
        /// The display name of the volume.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace in which to create the volume.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        [Output("nodesExpected")]
        public Output<int> NodesExpected { get; private set; } = null!;

        [Output("nodesHealthy")]
        public Output<int> NodesHealthy { get; private set; } = null!;

        /// <summary>
        /// An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// The ID of the CSI plugin that manages this volume.
        /// </summary>
        [Output("pluginId")]
        public Output<string> PluginId { get; private set; } = null!;

        [Output("pluginProvider")]
        public Output<string> PluginProvider { get; private set; } = null!;

        [Output("pluginProviderVersion")]
        public Output<string> PluginProviderVersion { get; private set; } = null!;

        [Output("schedulable")]
        public Output<bool> Schedulable { get; private set; } = null!;

        /// <summary>
        /// An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableDictionary<string, string>?> Secrets { get; private set; } = null!;

        /// <summary>
        /// The type of the volume. Currently, only 'csi' is supported.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the volume, how jobs will refer to the volume.
        /// </summary>
        [Output("volumeId")]
        public Output<string> VolumeId { get; private set; } = null!;


        /// <summary>
        /// Create a Volume resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Volume(string name, VolumeArgs args, CustomResourceOptions? options = null)
            : base("nomad:index/volume:Volume", name, args ?? new VolumeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Volume(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
            : base("nomad:index/volume:Volume", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Volume resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Volume Get(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
        {
            return new Volume(name, id, state, options);
        }
    }

    public sealed class VolumeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines whether a volume should be available concurrently.
        /// </summary>
        [Input("accessMode")]
        public Input<string>? AccessMode { get; set; }

        /// <summary>
        /// The storage API that will be used by the volume.
        /// </summary>
        [Input("attachmentMode")]
        public Input<string>? AttachmentMode { get; set; }

        [Input("capabilities")]
        private InputList<Inputs.VolumeCapabilityArgs>? _capabilities;

        /// <summary>
        /// Capabilities intended to be used in a job. At least one capability must be provided.
        /// </summary>
        public InputList<Inputs.VolumeCapabilityArgs> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<Inputs.VolumeCapabilityArgs>());
            set => _capabilities = value;
        }

        [Input("context")]
        private InputMap<string>? _context;

        /// <summary>
        /// An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
        /// </summary>
        public InputMap<string> Context
        {
            get => _context ?? (_context = new InputMap<string>());
            set => _context = value;
        }

        /// <summary>
        /// If true, the volume will be deregistered on destroy.
        /// </summary>
        [Input("deregisterOnDestroy")]
        public Input<bool>? DeregisterOnDestroy { get; set; }

        /// <summary>
        /// The ID of the physical volume from the storage provider.
        /// </summary>
        [Input("externalId", required: true)]
        public Input<string> ExternalId { get; set; } = null!;

        /// <summary>
        /// Options for mounting 'block-device' volumes without a pre-formatted file system.
        /// </summary>
        [Input("mountOptions")]
        public Input<Inputs.VolumeMountOptionsArgs>? MountOptions { get; set; }

        /// <summary>
        /// The display name of the volume.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace in which to create the volume.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// The ID of the CSI plugin that manages this volume.
        /// </summary>
        [Input("pluginId", required: true)]
        public Input<string> PluginId { get; set; } = null!;

        [Input("secrets")]
        private InputMap<string>? _secrets;

        /// <summary>
        /// An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        /// </summary>
        public InputMap<string> Secrets
        {
            get => _secrets ?? (_secrets = new InputMap<string>());
            set => _secrets = value;
        }

        /// <summary>
        /// The type of the volume. Currently, only 'csi' is supported.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The unique ID of the volume, how jobs will refer to the volume.
        /// </summary>
        [Input("volumeId", required: true)]
        public Input<string> VolumeId { get; set; } = null!;

        public VolumeArgs()
        {
        }
    }

    public sealed class VolumeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines whether a volume should be available concurrently.
        /// </summary>
        [Input("accessMode")]
        public Input<string>? AccessMode { get; set; }

        /// <summary>
        /// The storage API that will be used by the volume.
        /// </summary>
        [Input("attachmentMode")]
        public Input<string>? AttachmentMode { get; set; }

        [Input("capabilities")]
        private InputList<Inputs.VolumeCapabilityGetArgs>? _capabilities;

        /// <summary>
        /// Capabilities intended to be used in a job. At least one capability must be provided.
        /// </summary>
        public InputList<Inputs.VolumeCapabilityGetArgs> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<Inputs.VolumeCapabilityGetArgs>());
            set => _capabilities = value;
        }

        [Input("context")]
        private InputMap<string>? _context;

        /// <summary>
        /// An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
        /// </summary>
        public InputMap<string> Context
        {
            get => _context ?? (_context = new InputMap<string>());
            set => _context = value;
        }

        [Input("controllerRequired")]
        public Input<bool>? ControllerRequired { get; set; }

        [Input("controllersExpected")]
        public Input<int>? ControllersExpected { get; set; }

        [Input("controllersHealthy")]
        public Input<int>? ControllersHealthy { get; set; }

        /// <summary>
        /// If true, the volume will be deregistered on destroy.
        /// </summary>
        [Input("deregisterOnDestroy")]
        public Input<bool>? DeregisterOnDestroy { get; set; }

        /// <summary>
        /// The ID of the physical volume from the storage provider.
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// Options for mounting 'block-device' volumes without a pre-formatted file system.
        /// </summary>
        [Input("mountOptions")]
        public Input<Inputs.VolumeMountOptionsGetArgs>? MountOptions { get; set; }

        /// <summary>
        /// The display name of the volume.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace in which to create the volume.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("nodesExpected")]
        public Input<int>? NodesExpected { get; set; }

        [Input("nodesHealthy")]
        public Input<int>? NodesHealthy { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// The ID of the CSI plugin that manages this volume.
        /// </summary>
        [Input("pluginId")]
        public Input<string>? PluginId { get; set; }

        [Input("pluginProvider")]
        public Input<string>? PluginProvider { get; set; }

        [Input("pluginProviderVersion")]
        public Input<string>? PluginProviderVersion { get; set; }

        [Input("schedulable")]
        public Input<bool>? Schedulable { get; set; }

        [Input("secrets")]
        private InputMap<string>? _secrets;

        /// <summary>
        /// An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        /// </summary>
        public InputMap<string> Secrets
        {
            get => _secrets ?? (_secrets = new InputMap<string>());
            set => _secrets = value;
        }

        /// <summary>
        /// The type of the volume. Currently, only 'csi' is supported.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The unique ID of the volume, how jobs will refer to the volume.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        public VolumeState()
        {
        }
    }
}
