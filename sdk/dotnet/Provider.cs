// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    /// <summary>
    /// The provider type for the nomad package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [NomadResourceType("pulumi:providers:nomad")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// URL of the root of the target Nomad agent.
        /// </summary>
        [Output("address")]
        public Output<string?> Address { get; private set; } = null!;

        /// <summary>
        /// A path to a PEM-encoded certificate authority used to verify the remote agent's certificate.
        /// </summary>
        [Output("caFile")]
        public Output<string?> CaFile { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded certificate authority used to verify the remote agent's certificate.
        /// </summary>
        [Output("caPem")]
        public Output<string?> CaPem { get; private set; } = null!;

        /// <summary>
        /// A path to a PEM-encoded certificate provided to the remote agent; requires use of KeyFile or key_pem.
        /// </summary>
        [Output("certFile")]
        public Output<string?> CertFile { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded certificate provided to the remote agent; requires use of KeyFile or key_pem.
        /// </summary>
        [Output("certPem")]
        public Output<string?> CertPem { get; private set; } = null!;

        /// <summary>
        /// HTTP basic auth configuration.
        /// </summary>
        [Output("httpAuth")]
        public Output<string?> HttpAuth { get; private set; } = null!;

        /// <summary>
        /// A path to a PEM-encoded private key, required if CertFile or CertPem is specified.
        /// </summary>
        [Output("keyFile")]
        public Output<string?> KeyFile { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded private key, required if CertFile or CertPem is specified.
        /// </summary>
        [Output("keyPem")]
        public Output<string?> KeyPem { get; private set; } = null!;

        /// <summary>
        /// Region of the target Nomad agent.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// ACL token secret for API requests.
        /// </summary>
        [Output("secretId")]
        public Output<string?> SecretId { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("nomad", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }

        /// <summary>
        /// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        /// </summary>
        public global::Pulumi.Output<ProviderTerraformConfigResult> TerraformConfig()
            => global::Pulumi.Deployment.Instance.Call<ProviderTerraformConfigResult>("pulumi:providers:nomad/terraformConfig", CallArgs.Empty, this);
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// URL of the root of the target Nomad agent.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// A path to a PEM-encoded certificate authority used to verify the remote agent's certificate.
        /// </summary>
        [Input("caFile")]
        public Input<string>? CaFile { get; set; }

        /// <summary>
        /// PEM-encoded certificate authority used to verify the remote agent's certificate.
        /// </summary>
        [Input("caPem")]
        public Input<string>? CaPem { get; set; }

        /// <summary>
        /// A path to a PEM-encoded certificate provided to the remote agent; requires use of KeyFile or key_pem.
        /// </summary>
        [Input("certFile")]
        public Input<string>? CertFile { get; set; }

        /// <summary>
        /// PEM-encoded certificate provided to the remote agent; requires use of KeyFile or key_pem.
        /// </summary>
        [Input("certPem")]
        public Input<string>? CertPem { get; set; }

        [Input("headers", json: true)]
        private InputList<Inputs.ProviderHeaderArgs>? _headers;

        /// <summary>
        /// The headers to send with each Nomad request.
        /// </summary>
        public InputList<Inputs.ProviderHeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.ProviderHeaderArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.ProviderHeaderArgs>());
                _headers = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// HTTP basic auth configuration.
        /// </summary>
        [Input("httpAuth")]
        public Input<string>? HttpAuth { get; set; }

        [Input("ignoreEnvVars", json: true)]
        private InputMap<bool>? _ignoreEnvVars;

        /// <summary>
        /// A set of environment variables that are ignored by the provider when configuring the Nomad API client.
        /// </summary>
        public InputMap<bool> IgnoreEnvVars
        {
            get => _ignoreEnvVars ?? (_ignoreEnvVars = new InputMap<bool>());
            set => _ignoreEnvVars = value;
        }

        /// <summary>
        /// A path to a PEM-encoded private key, required if CertFile or CertPem is specified.
        /// </summary>
        [Input("keyFile")]
        public Input<string>? KeyFile { get; set; }

        /// <summary>
        /// PEM-encoded private key, required if CertFile or CertPem is specified.
        /// </summary>
        [Input("keyPem")]
        public Input<string>? KeyPem { get; set; }

        /// <summary>
        /// Region of the target Nomad agent.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// ACL token secret for API requests.
        /// </summary>
        [Input("secretId")]
        public Input<string>? SecretId { get; set; }

        /// <summary>
        /// Skip TLS verification on client side.
        /// </summary>
        [Input("skipVerify", json: true)]
        public Input<bool>? SkipVerify { get; set; }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }

    /// <summary>
    /// The results of the <see cref="Provider.TerraformConfig"/> method.
    /// </summary>
    [OutputType]
    public sealed class ProviderTerraformConfigResult
    {
        public readonly ImmutableDictionary<string, object> Result;

        [OutputConstructor]
        private ProviderTerraformConfigResult(ImmutableDictionary<string, object> result)
        {
            Result = result;
        }
    }
}
