// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    public static class GetNodePool
    {
        /// <summary>
        /// Get information about a node pool in Nomad.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dev = Nomad.GetNodePool.Invoke(new()
        ///     {
        ///         Name = "dev",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodePoolResult> InvokeAsync(GetNodePoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodePoolResult>("nomad:index/getNodePool:getNodePool", args ?? new GetNodePoolArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a node pool in Nomad.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dev = Nomad.GetNodePool.Invoke(new()
        ///     {
        ///         Name = "dev",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodePoolResult> Invoke(GetNodePoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodePoolResult>("nomad:index/getNodePool:getNodePool", args ?? new GetNodePoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodePoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `(string)` - The name of the node pool to fetch.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetNodePoolArgs()
        {
        }
        public static new GetNodePoolArgs Empty => new GetNodePoolArgs();
    }

    public sealed class GetNodePoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `(string)` - The name of the node pool to fetch.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetNodePoolInvokeArgs()
        {
        }
        public static new GetNodePoolInvokeArgs Empty => new GetNodePoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodePoolResult
    {
        /// <summary>
        /// `(string)` - The description of the node pool.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// `(map[string]string)` - Arbitrary KV metadata associated with the
        /// node pool.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Meta;
        public readonly string Name;
        /// <summary>
        /// `(block)` - Scheduler configuration for the node pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodePoolSchedulerConfigResult> SchedulerConfigs;

        [OutputConstructor]
        private GetNodePoolResult(
            string description,

            string id,

            ImmutableDictionary<string, string> meta,

            string name,

            ImmutableArray<Outputs.GetNodePoolSchedulerConfigResult> schedulerConfigs)
        {
            Description = description;
            Id = id;
            Meta = meta;
            Name = name;
            SchedulerConfigs = schedulerConfigs;
        }
    }
}
