// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    public static class GetNodePools
    {
        /// <summary>
        /// Retrieve a list of node pools available in Nomad.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var prod = Nomad.GetNodePools.Invoke(new()
        ///     {
        ///         Filter = "Meta.env == \"prod\"",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodePoolsResult> InvokeAsync(GetNodePoolsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodePoolsResult>("nomad:index/getNodePools:getNodePools", args ?? new GetNodePoolsArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve a list of node pools available in Nomad.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var prod = Nomad.GetNodePools.Invoke(new()
        ///     {
        ///         Filter = "Meta.env == \"prod\"",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodePoolsResult> Invoke(GetNodePoolsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodePoolsResult>("nomad:index/getNodePools:getNodePools", args ?? new GetNodePoolsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve a list of node pools available in Nomad.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var prod = Nomad.GetNodePools.Invoke(new()
        ///     {
        ///         Filter = "Meta.env == \"prod\"",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodePoolsResult> Invoke(GetNodePoolsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodePoolsResult>("nomad:index/getNodePools:getNodePools", args ?? new GetNodePoolsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodePoolsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `(string)` - Specifies the [expression][nomad_api_filter] used to
        /// filter the results.
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// `(string)` - Specifies a string to filter node pools based on a name
        /// prefix.
        /// </summary>
        [Input("prefix")]
        public string? Prefix { get; set; }

        public GetNodePoolsArgs()
        {
        }
        public static new GetNodePoolsArgs Empty => new GetNodePoolsArgs();
    }

    public sealed class GetNodePoolsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `(string)` - Specifies the [expression][nomad_api_filter] used to
        /// filter the results.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// `(string)` - Specifies a string to filter node pools based on a name
        /// prefix.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        public GetNodePoolsInvokeArgs()
        {
        }
        public static new GetNodePoolsInvokeArgs Empty => new GetNodePoolsInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodePoolsResult
    {
        public readonly string? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// `(list of node pools)` - A list of node pools matching the
        /// search criteria.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodePoolsNodePoolResult> NodePools;
        public readonly string? Prefix;

        [OutputConstructor]
        private GetNodePoolsResult(
            string? filter,

            string id,

            ImmutableArray<Outputs.GetNodePoolsNodePoolResult> nodePools,

            string? prefix)
        {
            Filter = filter;
            Id = id;
            NodePools = nodePools;
            Prefix = prefix;
        }
    }
}
