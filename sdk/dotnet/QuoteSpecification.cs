// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    /// <summary>
    /// Manages a quota specification in a Nomad cluster.
    /// 
    /// ## Example Usage
    /// 
    /// Registering a quota specification:
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nomad = Pulumi.Nomad;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var prodApi = new Nomad.QuoteSpecification("prodApi", new()
    ///     {
    ///         Description = "Production instances of backend API servers",
    ///         Limits = new[]
    ///         {
    ///             new Nomad.Inputs.QuoteSpecificationLimitArgs
    ///             {
    ///                 Region = "global",
    ///                 RegionLimit = new Nomad.Inputs.QuoteSpecificationLimitRegionLimitArgs
    ///                 {
    ///                     Cpu = 2400,
    ///                     MemoryMb = 1200,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [NomadResourceType("nomad:index/quoteSpecification:QuoteSpecification")]
    public partial class QuoteSpecification : global::Pulumi.CustomResource
    {
        /// <summary>
        /// `(string: "")` - A description of the quota specification.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// `(block: &lt;required&gt;)` - A block of quota limits to enforce. Can
        /// be repeated. See below for the structure of this block.
        /// </summary>
        [Output("limits")]
        public Output<ImmutableArray<Outputs.QuoteSpecificationLimit>> Limits { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - A unique name for the quota specification.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a QuoteSpecification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public QuoteSpecification(string name, QuoteSpecificationArgs args, CustomResourceOptions? options = null)
            : base("nomad:index/quoteSpecification:QuoteSpecification", name, args ?? new QuoteSpecificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private QuoteSpecification(string name, Input<string> id, QuoteSpecificationState? state = null, CustomResourceOptions? options = null)
            : base("nomad:index/quoteSpecification:QuoteSpecification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing QuoteSpecification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static QuoteSpecification Get(string name, Input<string> id, QuoteSpecificationState? state = null, CustomResourceOptions? options = null)
        {
            return new QuoteSpecification(name, id, state, options);
        }
    }

    public sealed class QuoteSpecificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// `(string: "")` - A description of the quota specification.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("limits", required: true)]
        private InputList<Inputs.QuoteSpecificationLimitArgs>? _limits;

        /// <summary>
        /// `(block: &lt;required&gt;)` - A block of quota limits to enforce. Can
        /// be repeated. See below for the structure of this block.
        /// </summary>
        public InputList<Inputs.QuoteSpecificationLimitArgs> Limits
        {
            get => _limits ?? (_limits = new InputList<Inputs.QuoteSpecificationLimitArgs>());
            set => _limits = value;
        }

        /// <summary>
        /// `(string: &lt;required&gt;)` - A unique name for the quota specification.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public QuoteSpecificationArgs()
        {
        }
        public static new QuoteSpecificationArgs Empty => new QuoteSpecificationArgs();
    }

    public sealed class QuoteSpecificationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// `(string: "")` - A description of the quota specification.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("limits")]
        private InputList<Inputs.QuoteSpecificationLimitGetArgs>? _limits;

        /// <summary>
        /// `(block: &lt;required&gt;)` - A block of quota limits to enforce. Can
        /// be repeated. See below for the structure of this block.
        /// </summary>
        public InputList<Inputs.QuoteSpecificationLimitGetArgs> Limits
        {
            get => _limits ?? (_limits = new InputList<Inputs.QuoteSpecificationLimitGetArgs>());
            set => _limits = value;
        }

        /// <summary>
        /// `(string: &lt;required&gt;)` - A unique name for the quota specification.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public QuoteSpecificationState()
        {
        }
        public static new QuoteSpecificationState Empty => new QuoteSpecificationState();
    }
}
