// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    public static class GetPlugin
    {
        /// <summary>
        /// Lookup a plugin by ID. The aim of this datasource is to determine whether
        /// a particular plugin exists on the cluster, to find information on the health
        /// and availability of the plugin, and to optionally wait for the plugin
        /// before performing actions the require an available plugin controller.
        /// 
        /// If a plugin with the specified ID does not exist and the datasource is not
        /// configured to wait, it will result in an error. For simple existence checks,
        /// use the `nomad.getPlugins` listing datasource.
        /// 
        /// ## Example Usage
        /// 
        /// Check for the existence of a plugin:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ebs = Nomad.GetPlugin.Invoke(new()
        ///     {
        ///         PluginId = "aws-ebs0",
        ///         WaitForHealthy = true,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// This will check for a plugin with the ID `aws-ebs0`, waiting until the plugin
        /// is healthy before returning.
        /// </summary>
        public static Task<GetPluginResult> InvokeAsync(GetPluginArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPluginResult>("nomad:index/getPlugin:getPlugin", args ?? new GetPluginArgs(), options.WithDefaults());

        /// <summary>
        /// Lookup a plugin by ID. The aim of this datasource is to determine whether
        /// a particular plugin exists on the cluster, to find information on the health
        /// and availability of the plugin, and to optionally wait for the plugin
        /// before performing actions the require an available plugin controller.
        /// 
        /// If a plugin with the specified ID does not exist and the datasource is not
        /// configured to wait, it will result in an error. For simple existence checks,
        /// use the `nomad.getPlugins` listing datasource.
        /// 
        /// ## Example Usage
        /// 
        /// Check for the existence of a plugin:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ebs = Nomad.GetPlugin.Invoke(new()
        ///     {
        ///         PluginId = "aws-ebs0",
        ///         WaitForHealthy = true,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// This will check for a plugin with the ID `aws-ebs0`, waiting until the plugin
        /// is healthy before returning.
        /// </summary>
        public static Output<GetPluginResult> Invoke(GetPluginInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPluginResult>("nomad:index/getPlugin:getPlugin", args ?? new GetPluginInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Lookup a plugin by ID. The aim of this datasource is to determine whether
        /// a particular plugin exists on the cluster, to find information on the health
        /// and availability of the plugin, and to optionally wait for the plugin
        /// before performing actions the require an available plugin controller.
        /// 
        /// If a plugin with the specified ID does not exist and the datasource is not
        /// configured to wait, it will result in an error. For simple existence checks,
        /// use the `nomad.getPlugins` listing datasource.
        /// 
        /// ## Example Usage
        /// 
        /// Check for the existence of a plugin:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nomad = Pulumi.Nomad;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ebs = Nomad.GetPlugin.Invoke(new()
        ///     {
        ///         PluginId = "aws-ebs0",
        ///         WaitForHealthy = true,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// This will check for a plugin with the ID `aws-ebs0`, waiting until the plugin
        /// is healthy before returning.
        /// </summary>
        public static Output<GetPluginResult> Invoke(GetPluginInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPluginResult>("nomad:index/getPlugin:getPlugin", args ?? new GetPluginInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPluginArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `(string)` ID of the plugin.
        /// </summary>
        [Input("pluginId", required: true)]
        public string PluginId { get; set; } = null!;

        /// <summary>
        /// `(boolean)` retry until the plugin exists and all controllers are healthy
        /// </summary>
        [Input("waitForHealthy")]
        public bool? WaitForHealthy { get; set; }

        /// <summary>
        /// `(boolean)` if the plugin doesn't exist, retry until it does
        /// </summary>
        [Input("waitForRegistration")]
        public bool? WaitForRegistration { get; set; }

        public GetPluginArgs()
        {
        }
        public static new GetPluginArgs Empty => new GetPluginArgs();
    }

    public sealed class GetPluginInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `(string)` ID of the plugin.
        /// </summary>
        [Input("pluginId", required: true)]
        public Input<string> PluginId { get; set; } = null!;

        /// <summary>
        /// `(boolean)` retry until the plugin exists and all controllers are healthy
        /// </summary>
        [Input("waitForHealthy")]
        public Input<bool>? WaitForHealthy { get; set; }

        /// <summary>
        /// `(boolean)` if the plugin doesn't exist, retry until it does
        /// </summary>
        [Input("waitForRegistration")]
        public Input<bool>? WaitForRegistration { get; set; }

        public GetPluginInvokeArgs()
        {
        }
        public static new GetPluginInvokeArgs Empty => new GetPluginInvokeArgs();
    }


    [OutputType]
    public sealed class GetPluginResult
    {
        /// <summary>
        /// `(boolean)` Whether a controller is required.
        /// </summary>
        public readonly bool ControllerRequired;
        /// <summary>
        /// `(integer)` The number of registered controllers.
        /// </summary>
        public readonly int ControllersExpected;
        /// <summary>
        /// `(integer)` The number of healthy controllers.
        /// </summary>
        public readonly int ControllersHealthy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetPluginNodeResult> Nodes;
        /// <summary>
        /// `(integer)` The number of registered nodes.
        /// </summary>
        public readonly int NodesExpected;
        /// <summary>
        /// `(integer)` The number of healthy nodes.
        /// </summary>
        public readonly int NodesHealthy;
        /// <summary>
        /// `(string)` ID of the plugin
        /// </summary>
        public readonly string PluginId;
        /// <summary>
        /// `(string)` Plugin provider name
        /// </summary>
        public readonly string PluginProvider;
        /// <summary>
        /// `(string)` Plugin provider version
        /// </summary>
        public readonly string PluginProviderVersion;
        public readonly bool? WaitForHealthy;
        public readonly bool? WaitForRegistration;

        [OutputConstructor]
        private GetPluginResult(
            bool controllerRequired,

            int controllersExpected,

            int controllersHealthy,

            string id,

            ImmutableArray<Outputs.GetPluginNodeResult> nodes,

            int nodesExpected,

            int nodesHealthy,

            string pluginId,

            string pluginProvider,

            string pluginProviderVersion,

            bool? waitForHealthy,

            bool? waitForRegistration)
        {
            ControllerRequired = controllerRequired;
            ControllersExpected = controllersExpected;
            ControllersHealthy = controllersHealthy;
            Id = id;
            Nodes = nodes;
            NodesExpected = nodesExpected;
            NodesHealthy = nodesHealthy;
            PluginId = pluginId;
            PluginProvider = pluginProvider;
            PluginProviderVersion = pluginProviderVersion;
            WaitForHealthy = waitForHealthy;
            WaitForRegistration = waitForRegistration;
        }
    }
}
