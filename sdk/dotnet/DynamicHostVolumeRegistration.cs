// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    /// <summary>
    /// Registers a dynamic host volume in Nomad that has already been created. Note
    /// that Nomad supports two workflows for dynamic host volumes: create and
    /// register. Both resources result in the same data source with the same outputs.
    /// </summary>
    [NomadResourceType("nomad:index/dynamicHostVolumeRegistration:DynamicHostVolumeRegistration")]
    public partial class DynamicHostVolumeRegistration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// `(block: &lt;optional&gt;)` - Option for validating the capability of a
        /// volume. Each capability block has the following attributes:
        /// </summary>
        [Output("capabilities")]
        public Output<ImmutableArray<Outputs.DynamicHostVolumeRegistrationCapability>> Capabilities { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
        /// physical size of a disk or a quota, depending on the plugin. This field must
        /// be between the `CapacityMin` and `CapacityMax` values unless they are
        /// omitted. Accepts human-friendly suffixes such as `"100GiB"`.
        /// </summary>
        [Output("capacity")]
        public Output<string?> Capacity { get; private set; } = null!;

        [Output("capacityBytes")]
        public Output<int> CapacityBytes { get; private set; } = null!;

        [Output("capacityMaxBytes")]
        public Output<int> CapacityMaxBytes { get; private set; } = null!;

        [Output("capacityMinBytes")]
        public Output<int> CapacityMinBytes { get; private set; } = null!;

        /// <summary>
        /// Constraints
        /// </summary>
        [Output("constraints")]
        public Output<ImmutableArray<Outputs.DynamicHostVolumeRegistrationConstraint>> Constraints { get; private set; } = null!;

        /// <summary>
        /// `(string)` - The path on disk where the volume exists.
        /// </summary>
        [Output("hostPath")]
        public Output<string> HostPath { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - The name of the volume, which is used as the
        /// [`volume.source`][VolumeSource] field in job specifications that claim this
        /// volume. Host volume names must be unique per node. Names are visible to any
        /// user with `node:read` ACL, even across namespaces, so they should not be
        /// treated as sensitive values.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;optional&gt;)` - The namespace of the volume. This field
        /// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
        /// environment variable. Defaults to `"default"` if unset.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - A specific node where the volume is
        /// mounted.
        /// </summary>
        [Output("nodeId")]
        public Output<string> NodeId { get; private set; } = null!;

        /// <summary>
        /// Node pool
        /// </summary>
        [Output("nodePool")]
        public Output<string> NodePool { get; private set; } = null!;

        /// <summary>
        /// `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
        /// passed directly to the plugin to configure the volume. The details of these
        /// parameters are specific to the plugin.
        /// 
        /// 
        /// [`AccessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
        /// [`AttachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
        /// [VolumeSource]: /nomad/docs/job-specification/volume#source
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// Plugin ID
        /// </summary>
        [Output("pluginId")]
        public Output<string> PluginId { get; private set; } = null!;

        /// <summary>
        /// State
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a DynamicHostVolumeRegistration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DynamicHostVolumeRegistration(string name, DynamicHostVolumeRegistrationArgs args, CustomResourceOptions? options = null)
            : base("nomad:index/dynamicHostVolumeRegistration:DynamicHostVolumeRegistration", name, args ?? new DynamicHostVolumeRegistrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DynamicHostVolumeRegistration(string name, Input<string> id, DynamicHostVolumeRegistrationState? state = null, CustomResourceOptions? options = null)
            : base("nomad:index/dynamicHostVolumeRegistration:DynamicHostVolumeRegistration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DynamicHostVolumeRegistration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DynamicHostVolumeRegistration Get(string name, Input<string> id, DynamicHostVolumeRegistrationState? state = null, CustomResourceOptions? options = null)
        {
            return new DynamicHostVolumeRegistration(name, id, state, options);
        }
    }

    public sealed class DynamicHostVolumeRegistrationArgs : global::Pulumi.ResourceArgs
    {
        [Input("capabilities", required: true)]
        private InputList<Inputs.DynamicHostVolumeRegistrationCapabilityArgs>? _capabilities;

        /// <summary>
        /// `(block: &lt;optional&gt;)` - Option for validating the capability of a
        /// volume. Each capability block has the following attributes:
        /// </summary>
        public InputList<Inputs.DynamicHostVolumeRegistrationCapabilityArgs> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<Inputs.DynamicHostVolumeRegistrationCapabilityArgs>());
            set => _capabilities = value;
        }

        /// <summary>
        /// `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
        /// physical size of a disk or a quota, depending on the plugin. This field must
        /// be between the `CapacityMin` and `CapacityMax` values unless they are
        /// omitted. Accepts human-friendly suffixes such as `"100GiB"`.
        /// </summary>
        [Input("capacity")]
        public Input<string>? Capacity { get; set; }

        /// <summary>
        /// `(string)` - The path on disk where the volume exists.
        /// </summary>
        [Input("hostPath", required: true)]
        public Input<string> HostPath { get; set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - The name of the volume, which is used as the
        /// [`volume.source`][VolumeSource] field in job specifications that claim this
        /// volume. Host volume names must be unique per node. Names are visible to any
        /// user with `node:read` ACL, even across namespaces, so they should not be
        /// treated as sensitive values.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `(string: &lt;optional&gt;)` - The namespace of the volume. This field
        /// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
        /// environment variable. Defaults to `"default"` if unset.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - A specific node where the volume is
        /// mounted.
        /// </summary>
        [Input("nodeId", required: true)]
        public Input<string> NodeId { get; set; } = null!;

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
        /// passed directly to the plugin to configure the volume. The details of these
        /// parameters are specific to the plugin.
        /// 
        /// 
        /// [`AccessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
        /// [`AttachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
        /// [VolumeSource]: /nomad/docs/job-specification/volume#source
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        public DynamicHostVolumeRegistrationArgs()
        {
        }
        public static new DynamicHostVolumeRegistrationArgs Empty => new DynamicHostVolumeRegistrationArgs();
    }

    public sealed class DynamicHostVolumeRegistrationState : global::Pulumi.ResourceArgs
    {
        [Input("capabilities")]
        private InputList<Inputs.DynamicHostVolumeRegistrationCapabilityGetArgs>? _capabilities;

        /// <summary>
        /// `(block: &lt;optional&gt;)` - Option for validating the capability of a
        /// volume. Each capability block has the following attributes:
        /// </summary>
        public InputList<Inputs.DynamicHostVolumeRegistrationCapabilityGetArgs> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<Inputs.DynamicHostVolumeRegistrationCapabilityGetArgs>());
            set => _capabilities = value;
        }

        /// <summary>
        /// `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
        /// physical size of a disk or a quota, depending on the plugin. This field must
        /// be between the `CapacityMin` and `CapacityMax` values unless they are
        /// omitted. Accepts human-friendly suffixes such as `"100GiB"`.
        /// </summary>
        [Input("capacity")]
        public Input<string>? Capacity { get; set; }

        [Input("capacityBytes")]
        public Input<int>? CapacityBytes { get; set; }

        [Input("capacityMaxBytes")]
        public Input<int>? CapacityMaxBytes { get; set; }

        [Input("capacityMinBytes")]
        public Input<int>? CapacityMinBytes { get; set; }

        [Input("constraints")]
        private InputList<Inputs.DynamicHostVolumeRegistrationConstraintGetArgs>? _constraints;

        /// <summary>
        /// Constraints
        /// </summary>
        public InputList<Inputs.DynamicHostVolumeRegistrationConstraintGetArgs> Constraints
        {
            get => _constraints ?? (_constraints = new InputList<Inputs.DynamicHostVolumeRegistrationConstraintGetArgs>());
            set => _constraints = value;
        }

        /// <summary>
        /// `(string)` - The path on disk where the volume exists.
        /// </summary>
        [Input("hostPath")]
        public Input<string>? HostPath { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - The name of the volume, which is used as the
        /// [`volume.source`][VolumeSource] field in job specifications that claim this
        /// volume. Host volume names must be unique per node. Names are visible to any
        /// user with `node:read` ACL, even across namespaces, so they should not be
        /// treated as sensitive values.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `(string: &lt;optional&gt;)` - The namespace of the volume. This field
        /// overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
        /// environment variable. Defaults to `"default"` if unset.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - A specific node where the volume is
        /// mounted.
        /// </summary>
        [Input("nodeId")]
        public Input<string>? NodeId { get; set; }

        /// <summary>
        /// Node pool
        /// </summary>
        [Input("nodePool")]
        public Input<string>? NodePool { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
        /// passed directly to the plugin to configure the volume. The details of these
        /// parameters are specific to the plugin.
        /// 
        /// 
        /// [`AccessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
        /// [`AttachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
        /// [VolumeSource]: /nomad/docs/job-specification/volume#source
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// Plugin ID
        /// </summary>
        [Input("pluginId")]
        public Input<string>? PluginId { get; set; }

        /// <summary>
        /// State
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public DynamicHostVolumeRegistrationState()
        {
        }
        public static new DynamicHostVolumeRegistrationState Empty => new DynamicHostVolumeRegistrationState();
    }
}
