// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nomad
{
    [NomadResourceType("nomad:index/csiVolumeRegistration:CsiVolumeRegistration")]
    public partial class CsiVolumeRegistration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// `(``Capability``: &lt;required&gt;)` - Options for validating the capability of a volume.
        /// </summary>
        [Output("capabilities")]
        public Output<ImmutableArray<Outputs.CsiVolumeRegistrationCapability>> Capabilities { get; private set; } = null!;

        [Output("capacity")]
        public Output<int> Capacity { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;optional&gt;)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
        /// </summary>
        [Output("capacityMax")]
        public Output<string?> CapacityMax { get; private set; } = null!;

        [Output("capacityMaxBytes")]
        public Output<int> CapacityMaxBytes { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;optional&gt;)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
        /// </summary>
        [Output("capacityMin")]
        public Output<string?> CapacityMin { get; private set; } = null!;

        [Output("capacityMinBytes")]
        public Output<int> CapacityMinBytes { get; private set; } = null!;

        /// <summary>
        /// `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
        /// </summary>
        [Output("context")]
        public Output<ImmutableDictionary<string, string>?> Context { get; private set; } = null!;

        /// <summary>
        /// `(boolean)`
        /// </summary>
        [Output("controllerRequired")]
        public Output<bool> ControllerRequired { get; private set; } = null!;

        /// <summary>
        /// `(integer)`
        /// </summary>
        [Output("controllersExpected")]
        public Output<int> ControllersExpected { get; private set; } = null!;

        /// <summary>
        /// `(integer)`
        /// </summary>
        [Output("controllersHealthy")]
        public Output<int> ControllersHealthy { get; private set; } = null!;

        /// <summary>
        /// `(boolean: false)` - If true, the volume will be deregistered on destroy.
        /// </summary>
        [Output("deregisterOnDestroy")]
        public Output<bool?> DeregisterOnDestroy { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - The ID of the physical volume from the storage provider.
        /// </summary>
        [Output("externalId")]
        public Output<string> ExternalId { get; private set; } = null!;

        /// <summary>
        /// `(block: &lt;optional&gt;)` Options for mounting `block-device` volumes without a pre-formatted file system.
        /// </summary>
        [Output("mountOptions")]
        public Output<Outputs.CsiVolumeRegistrationMountOptions?> MountOptions { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - The display name for the volume.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// `(string: "default")` - The namespace in which to register the volume.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// `(integer)`
        /// </summary>
        [Output("nodesExpected")]
        public Output<int> NodesExpected { get; private set; } = null!;

        /// <summary>
        /// `(integer)`
        /// </summary>
        [Output("nodesHealthy")]
        public Output<int> NodesHealthy { get; private set; } = null!;

        /// <summary>
        /// `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - The ID of the Nomad plugin for registering this volume.
        /// </summary>
        [Output("pluginId")]
        public Output<string> PluginId { get; private set; } = null!;

        /// <summary>
        /// `(string)`
        /// </summary>
        [Output("pluginProvider")]
        public Output<string> PluginProvider { get; private set; } = null!;

        /// <summary>
        /// `(string)`
        /// </summary>
        [Output("pluginProviderVersion")]
        public Output<string> PluginProviderVersion { get; private set; } = null!;

        /// <summary>
        /// `(boolean)`
        /// </summary>
        [Output("schedulable")]
        public Output<bool> Schedulable { get; private set; } = null!;

        /// <summary>
        /// `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableDictionary<string, string>?> Secrets { get; private set; } = null!;

        /// <summary>
        /// `(List of topologies)`
        /// </summary>
        [Output("topologies")]
        public Output<ImmutableArray<Outputs.CsiVolumeRegistrationTopology>> Topologies { get; private set; } = null!;

        /// <summary>
        /// `(``TopologyRequest``: &lt;optional&gt;)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
        /// </summary>
        [Output("topologyRequest")]
        public Output<Outputs.CsiVolumeRegistrationTopologyRequest?> TopologyRequest { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - The unique ID of the volume.
        /// </summary>
        [Output("volumeId")]
        public Output<string> VolumeId { get; private set; } = null!;


        /// <summary>
        /// Create a CsiVolumeRegistration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CsiVolumeRegistration(string name, CsiVolumeRegistrationArgs args, CustomResourceOptions? options = null)
            : base("nomad:index/csiVolumeRegistration:CsiVolumeRegistration", name, args ?? new CsiVolumeRegistrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CsiVolumeRegistration(string name, Input<string> id, CsiVolumeRegistrationState? state = null, CustomResourceOptions? options = null)
            : base("nomad:index/csiVolumeRegistration:CsiVolumeRegistration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secrets",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CsiVolumeRegistration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CsiVolumeRegistration Get(string name, Input<string> id, CsiVolumeRegistrationState? state = null, CustomResourceOptions? options = null)
        {
            return new CsiVolumeRegistration(name, id, state, options);
        }
    }

    public sealed class CsiVolumeRegistrationArgs : global::Pulumi.ResourceArgs
    {
        [Input("capabilities")]
        private InputList<Inputs.CsiVolumeRegistrationCapabilityArgs>? _capabilities;

        /// <summary>
        /// `(``Capability``: &lt;required&gt;)` - Options for validating the capability of a volume.
        /// </summary>
        public InputList<Inputs.CsiVolumeRegistrationCapabilityArgs> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<Inputs.CsiVolumeRegistrationCapabilityArgs>());
            set => _capabilities = value;
        }

        /// <summary>
        /// `(string: &lt;optional&gt;)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
        /// </summary>
        [Input("capacityMax")]
        public Input<string>? CapacityMax { get; set; }

        /// <summary>
        /// `(string: &lt;optional&gt;)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
        /// </summary>
        [Input("capacityMin")]
        public Input<string>? CapacityMin { get; set; }

        [Input("context")]
        private InputMap<string>? _context;

        /// <summary>
        /// `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
        /// </summary>
        public InputMap<string> Context
        {
            get => _context ?? (_context = new InputMap<string>());
            set => _context = value;
        }

        /// <summary>
        /// `(boolean: false)` - If true, the volume will be deregistered on destroy.
        /// </summary>
        [Input("deregisterOnDestroy")]
        public Input<bool>? DeregisterOnDestroy { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - The ID of the physical volume from the storage provider.
        /// </summary>
        [Input("externalId", required: true)]
        public Input<string> ExternalId { get; set; } = null!;

        /// <summary>
        /// `(block: &lt;optional&gt;)` Options for mounting `block-device` volumes without a pre-formatted file system.
        /// </summary>
        [Input("mountOptions")]
        public Input<Inputs.CsiVolumeRegistrationMountOptionsArgs>? MountOptions { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - The display name for the volume.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `(string: "default")` - The namespace in which to register the volume.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// `(string: &lt;required&gt;)` - The ID of the Nomad plugin for registering this volume.
        /// </summary>
        [Input("pluginId", required: true)]
        public Input<string> PluginId { get; set; } = null!;

        [Input("secrets")]
        private InputMap<string>? _secrets;

        /// <summary>
        /// `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        /// </summary>
        public InputMap<string> Secrets
        {
            get => _secrets ?? (_secrets = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _secrets = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// `(``TopologyRequest``: &lt;optional&gt;)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
        /// </summary>
        [Input("topologyRequest")]
        public Input<Inputs.CsiVolumeRegistrationTopologyRequestArgs>? TopologyRequest { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - The unique ID of the volume.
        /// </summary>
        [Input("volumeId", required: true)]
        public Input<string> VolumeId { get; set; } = null!;

        public CsiVolumeRegistrationArgs()
        {
        }
        public static new CsiVolumeRegistrationArgs Empty => new CsiVolumeRegistrationArgs();
    }

    public sealed class CsiVolumeRegistrationState : global::Pulumi.ResourceArgs
    {
        [Input("capabilities")]
        private InputList<Inputs.CsiVolumeRegistrationCapabilityGetArgs>? _capabilities;

        /// <summary>
        /// `(``Capability``: &lt;required&gt;)` - Options for validating the capability of a volume.
        /// </summary>
        public InputList<Inputs.CsiVolumeRegistrationCapabilityGetArgs> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<Inputs.CsiVolumeRegistrationCapabilityGetArgs>());
            set => _capabilities = value;
        }

        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// `(string: &lt;optional&gt;)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
        /// </summary>
        [Input("capacityMax")]
        public Input<string>? CapacityMax { get; set; }

        [Input("capacityMaxBytes")]
        public Input<int>? CapacityMaxBytes { get; set; }

        /// <summary>
        /// `(string: &lt;optional&gt;)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
        /// </summary>
        [Input("capacityMin")]
        public Input<string>? CapacityMin { get; set; }

        [Input("capacityMinBytes")]
        public Input<int>? CapacityMinBytes { get; set; }

        [Input("context")]
        private InputMap<string>? _context;

        /// <summary>
        /// `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
        /// </summary>
        public InputMap<string> Context
        {
            get => _context ?? (_context = new InputMap<string>());
            set => _context = value;
        }

        /// <summary>
        /// `(boolean)`
        /// </summary>
        [Input("controllerRequired")]
        public Input<bool>? ControllerRequired { get; set; }

        /// <summary>
        /// `(integer)`
        /// </summary>
        [Input("controllersExpected")]
        public Input<int>? ControllersExpected { get; set; }

        /// <summary>
        /// `(integer)`
        /// </summary>
        [Input("controllersHealthy")]
        public Input<int>? ControllersHealthy { get; set; }

        /// <summary>
        /// `(boolean: false)` - If true, the volume will be deregistered on destroy.
        /// </summary>
        [Input("deregisterOnDestroy")]
        public Input<bool>? DeregisterOnDestroy { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - The ID of the physical volume from the storage provider.
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// `(block: &lt;optional&gt;)` Options for mounting `block-device` volumes without a pre-formatted file system.
        /// </summary>
        [Input("mountOptions")]
        public Input<Inputs.CsiVolumeRegistrationMountOptionsGetArgs>? MountOptions { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - The display name for the volume.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `(string: "default")` - The namespace in which to register the volume.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// `(integer)`
        /// </summary>
        [Input("nodesExpected")]
        public Input<int>? NodesExpected { get; set; }

        /// <summary>
        /// `(integer)`
        /// </summary>
        [Input("nodesHealthy")]
        public Input<int>? NodesHealthy { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// `(string: &lt;required&gt;)` - The ID of the Nomad plugin for registering this volume.
        /// </summary>
        [Input("pluginId")]
        public Input<string>? PluginId { get; set; }

        /// <summary>
        /// `(string)`
        /// </summary>
        [Input("pluginProvider")]
        public Input<string>? PluginProvider { get; set; }

        /// <summary>
        /// `(string)`
        /// </summary>
        [Input("pluginProviderVersion")]
        public Input<string>? PluginProviderVersion { get; set; }

        /// <summary>
        /// `(boolean)`
        /// </summary>
        [Input("schedulable")]
        public Input<bool>? Schedulable { get; set; }

        [Input("secrets")]
        private InputMap<string>? _secrets;

        /// <summary>
        /// `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
        /// </summary>
        public InputMap<string> Secrets
        {
            get => _secrets ?? (_secrets = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _secrets = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("topologies")]
        private InputList<Inputs.CsiVolumeRegistrationTopologyGetArgs>? _topologies;

        /// <summary>
        /// `(List of topologies)`
        /// </summary>
        public InputList<Inputs.CsiVolumeRegistrationTopologyGetArgs> Topologies
        {
            get => _topologies ?? (_topologies = new InputList<Inputs.CsiVolumeRegistrationTopologyGetArgs>());
            set => _topologies = value;
        }

        /// <summary>
        /// `(``TopologyRequest``: &lt;optional&gt;)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
        /// </summary>
        [Input("topologyRequest")]
        public Input<Inputs.CsiVolumeRegistrationTopologyRequestGetArgs>? TopologyRequest { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - The unique ID of the volume.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        public CsiVolumeRegistrationState()
        {
        }
        public static new CsiVolumeRegistrationState Empty => new CsiVolumeRegistrationState();
    }
}
