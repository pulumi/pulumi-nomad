// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages an ACL policy registered in Nomad.
 *
 * ## Example Usage
 *
 * Registering a policy from a HCL file:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 * import * from "fs";
 *
 * const dev = new nomad.AclPolicy("dev", {
 *     description: "Submit jobs to the dev environment.",
 *     rulesHcl: fs.readFileSync(`${path.module}/dev.hcl`),
 * });
 * ```
 *
 * Registering a policy from inline HCL:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * const dev = new nomad.AclPolicy("dev", {
 *     description: "Submit jobs to the dev environment.",
 *     rulesHcl: `namespace "dev" {
 *   policy = "write"
 * }
 * `,
 * });
 * ```
 */
export class AclPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AclPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclPolicyState, opts?: pulumi.CustomResourceOptions): AclPolicy {
        return new AclPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nomad:index/aclPolicy:AclPolicy';

    /**
     * Returns true if the given object is an instance of AclPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclPolicy.__pulumiType;
    }

    /**
     * `(string: "")` - A description of the policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * `(string: <required>)` - A unique name for the policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * `(string: <required>)` - The contents of the policy to register,
     * as HCL or JSON.
     */
    public readonly rulesHcl!: pulumi.Output<string>;

    /**
     * Create a AclPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclPolicyArgs | AclPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclPolicyState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["rulesHcl"] = state ? state.rulesHcl : undefined;
        } else {
            const args = argsOrState as AclPolicyArgs | undefined;
            if ((!args || args.rulesHcl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rulesHcl'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["rulesHcl"] = args ? args.rulesHcl : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AclPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclPolicy resources.
 */
export interface AclPolicyState {
    /**
     * `(string: "")` - A description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - A unique name for the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - The contents of the policy to register,
     * as HCL or JSON.
     */
    rulesHcl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AclPolicy resource.
 */
export interface AclPolicyArgs {
    /**
     * `(string: "")` - A description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - A unique name for the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - The contents of the policy to register,
     * as HCL or JSON.
     */
    rulesHcl: pulumi.Input<string>;
}
