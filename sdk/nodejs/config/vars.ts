// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("nomad");

/**
 * URL of the root of the target Nomad agent.
 */
export declare const address: string | undefined;
Object.defineProperty(exports, "address", {
    get() {
        return __config.get("address");
    },
    enumerable: true,
});

/**
 * A path to a PEM-encoded certificate authority used to verify the remote agent's certificate.
 */
export declare const caFile: string | undefined;
Object.defineProperty(exports, "caFile", {
    get() {
        return __config.get("caFile");
    },
    enumerable: true,
});

/**
 * PEM-encoded certificate authority used to verify the remote agent's certificate.
 */
export declare const caPem: string | undefined;
Object.defineProperty(exports, "caPem", {
    get() {
        return __config.get("caPem");
    },
    enumerable: true,
});

/**
 * A path to a PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
 */
export declare const certFile: string | undefined;
Object.defineProperty(exports, "certFile", {
    get() {
        return __config.get("certFile");
    },
    enumerable: true,
});

/**
 * PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
 */
export declare const certPem: string | undefined;
Object.defineProperty(exports, "certPem", {
    get() {
        return __config.get("certPem");
    },
    enumerable: true,
});

/**
 * Consul token to validate Consul Connect Service Identity policies specified in the job file.
 */
export declare const consulToken: string | undefined;
Object.defineProperty(exports, "consulToken", {
    get() {
        return __config.get("consulToken");
    },
    enumerable: true,
});

/**
 * The headers to send with each Nomad request.
 */
export declare const headers: outputs.config.Headers[] | undefined;
Object.defineProperty(exports, "headers", {
    get() {
        return __config.getObject<outputs.config.Headers[]>("headers");
    },
    enumerable: true,
});

/**
 * HTTP basic auth configuration.
 */
export declare const httpAuth: string | undefined;
Object.defineProperty(exports, "httpAuth", {
    get() {
        return __config.get("httpAuth");
    },
    enumerable: true,
});

/**
 * A set of environment variables that are ignored by the provider when configuring the Nomad API client.
 */
export declare const ignoreEnvVars: {[key: string]: boolean} | undefined;
Object.defineProperty(exports, "ignoreEnvVars", {
    get() {
        return __config.getObject<{[key: string]: boolean}>("ignoreEnvVars");
    },
    enumerable: true,
});

/**
 * A path to a PEM-encoded private key, required if certFile or certPem is specified.
 */
export declare const keyFile: string | undefined;
Object.defineProperty(exports, "keyFile", {
    get() {
        return __config.get("keyFile");
    },
    enumerable: true,
});

/**
 * PEM-encoded private key, required if certFile or certPem is specified.
 */
export declare const keyPem: string | undefined;
Object.defineProperty(exports, "keyPem", {
    get() {
        return __config.get("keyPem");
    },
    enumerable: true,
});

/**
 * Region of the target Nomad agent.
 */
export declare const region: string | undefined;
Object.defineProperty(exports, "region", {
    get() {
        return __config.get("region");
    },
    enumerable: true,
});

/**
 * ACL token secret for API requests.
 */
export declare const secretId: string | undefined;
Object.defineProperty(exports, "secretId", {
    get() {
        return __config.get("secretId");
    },
    enumerable: true,
});

/**
 * Skip TLS verification on client side.
 */
export declare const skipVerify: boolean | undefined;
Object.defineProperty(exports, "skipVerify", {
    get() {
        return __config.getObject<boolean>("skipVerify");
    },
    enumerable: true,
});

/**
 * Vault token if policies are specified in the job file.
 */
export declare const vaultToken: string | undefined;
Object.defineProperty(exports, "vaultToken", {
    get() {
        return __config.get("vaultToken");
    },
    enumerable: true,
});

