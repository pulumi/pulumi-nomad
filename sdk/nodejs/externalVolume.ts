// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class ExternalVolume extends pulumi.CustomResource {
    /**
     * Get an existing ExternalVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalVolumeState, opts?: pulumi.CustomResourceOptions): ExternalVolume {
        return new ExternalVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nomad:index/externalVolume:ExternalVolume';

    /**
     * Returns true if the given object is an instance of ExternalVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalVolume.__pulumiType;
    }

    /**
     * Capabilities intended to be used in a job. At least one capability must be provided.
     */
    public readonly capabilities!: pulumi.Output<outputs.ExternalVolumeCapability[]>;
    /**
     * Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
     */
    public readonly capacityMax!: pulumi.Output<string | undefined>;
    /**
     * Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
     */
    public readonly capacityMin!: pulumi.Output<string | undefined>;
    /**
     * The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
     */
    public readonly cloneId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly controllerRequired!: pulumi.Output<boolean>;
    public /*out*/ readonly controllersExpected!: pulumi.Output<number>;
    public /*out*/ readonly controllersHealthy!: pulumi.Output<number>;
    /**
     * Options for mounting 'block-device' volumes without a pre-formatted file system.
     */
    public readonly mountOptions!: pulumi.Output<outputs.ExternalVolumeMountOptions | undefined>;
    /**
     * The display name of the volume.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace in which to create the volume.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    public /*out*/ readonly nodesExpected!: pulumi.Output<number>;
    public /*out*/ readonly nodesHealthy!: pulumi.Output<number>;
    /**
     * An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the CSI plugin that manages this volume.
     */
    public readonly pluginId!: pulumi.Output<string>;
    public /*out*/ readonly pluginProvider!: pulumi.Output<string>;
    public /*out*/ readonly pluginProviderVersion!: pulumi.Output<string>;
    public /*out*/ readonly schedulable!: pulumi.Output<boolean>;
    /**
     * An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     */
    public readonly secrets!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
     * 'clone_id'.
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * The type of the volume. Currently, only 'csi' is supported.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The unique ID of the volume, how jobs will refer to the volume.
     */
    public readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a ExternalVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalVolumeArgs | ExternalVolumeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalVolumeState | undefined;
            inputs["capabilities"] = state ? state.capabilities : undefined;
            inputs["capacityMax"] = state ? state.capacityMax : undefined;
            inputs["capacityMin"] = state ? state.capacityMin : undefined;
            inputs["cloneId"] = state ? state.cloneId : undefined;
            inputs["controllerRequired"] = state ? state.controllerRequired : undefined;
            inputs["controllersExpected"] = state ? state.controllersExpected : undefined;
            inputs["controllersHealthy"] = state ? state.controllersHealthy : undefined;
            inputs["mountOptions"] = state ? state.mountOptions : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespace"] = state ? state.namespace : undefined;
            inputs["nodesExpected"] = state ? state.nodesExpected : undefined;
            inputs["nodesHealthy"] = state ? state.nodesHealthy : undefined;
            inputs["parameters"] = state ? state.parameters : undefined;
            inputs["pluginId"] = state ? state.pluginId : undefined;
            inputs["pluginProvider"] = state ? state.pluginProvider : undefined;
            inputs["pluginProviderVersion"] = state ? state.pluginProviderVersion : undefined;
            inputs["schedulable"] = state ? state.schedulable : undefined;
            inputs["secrets"] = state ? state.secrets : undefined;
            inputs["snapshotId"] = state ? state.snapshotId : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as ExternalVolumeArgs | undefined;
            if ((!args || args.capabilities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capabilities'");
            }
            if ((!args || args.pluginId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluginId'");
            }
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            inputs["capabilities"] = args ? args.capabilities : undefined;
            inputs["capacityMax"] = args ? args.capacityMax : undefined;
            inputs["capacityMin"] = args ? args.capacityMin : undefined;
            inputs["cloneId"] = args ? args.cloneId : undefined;
            inputs["mountOptions"] = args ? args.mountOptions : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespace"] = args ? args.namespace : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["pluginId"] = args ? args.pluginId : undefined;
            inputs["secrets"] = args ? args.secrets : undefined;
            inputs["snapshotId"] = args ? args.snapshotId : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["volumeId"] = args ? args.volumeId : undefined;
            inputs["controllerRequired"] = undefined /*out*/;
            inputs["controllersExpected"] = undefined /*out*/;
            inputs["controllersHealthy"] = undefined /*out*/;
            inputs["nodesExpected"] = undefined /*out*/;
            inputs["nodesHealthy"] = undefined /*out*/;
            inputs["pluginProvider"] = undefined /*out*/;
            inputs["pluginProviderVersion"] = undefined /*out*/;
            inputs["schedulable"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ExternalVolume.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalVolume resources.
 */
export interface ExternalVolumeState {
    /**
     * Capabilities intended to be used in a job. At least one capability must be provided.
     */
    capabilities?: pulumi.Input<pulumi.Input<inputs.ExternalVolumeCapability>[]>;
    /**
     * Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
     */
    capacityMax?: pulumi.Input<string>;
    /**
     * Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
     */
    capacityMin?: pulumi.Input<string>;
    /**
     * The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
     */
    cloneId?: pulumi.Input<string>;
    controllerRequired?: pulumi.Input<boolean>;
    controllersExpected?: pulumi.Input<number>;
    controllersHealthy?: pulumi.Input<number>;
    /**
     * Options for mounting 'block-device' volumes without a pre-formatted file system.
     */
    mountOptions?: pulumi.Input<inputs.ExternalVolumeMountOptions>;
    /**
     * The display name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace in which to create the volume.
     */
    namespace?: pulumi.Input<string>;
    nodesExpected?: pulumi.Input<number>;
    nodesHealthy?: pulumi.Input<number>;
    /**
     * An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the CSI plugin that manages this volume.
     */
    pluginId?: pulumi.Input<string>;
    pluginProvider?: pulumi.Input<string>;
    pluginProviderVersion?: pulumi.Input<string>;
    schedulable?: pulumi.Input<boolean>;
    /**
     * An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     */
    secrets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
     * 'clone_id'.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The type of the volume. Currently, only 'csi' is supported.
     */
    type?: pulumi.Input<string>;
    /**
     * The unique ID of the volume, how jobs will refer to the volume.
     */
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalVolume resource.
 */
export interface ExternalVolumeArgs {
    /**
     * Capabilities intended to be used in a job. At least one capability must be provided.
     */
    capabilities: pulumi.Input<pulumi.Input<inputs.ExternalVolumeCapability>[]>;
    /**
     * Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
     */
    capacityMax?: pulumi.Input<string>;
    /**
     * Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
     */
    capacityMin?: pulumi.Input<string>;
    /**
     * The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
     */
    cloneId?: pulumi.Input<string>;
    /**
     * Options for mounting 'block-device' volumes without a pre-formatted file system.
     */
    mountOptions?: pulumi.Input<inputs.ExternalVolumeMountOptions>;
    /**
     * The display name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace in which to create the volume.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the CSI plugin that manages this volume.
     */
    pluginId: pulumi.Input<string>;
    /**
     * An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     */
    secrets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
     * 'clone_id'.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The type of the volume. Currently, only 'csi' is supported.
     */
    type?: pulumi.Input<string>;
    /**
     * The unique ID of the volume, how jobs will refer to the volume.
     */
    volumeId: pulumi.Input<string>;
}
