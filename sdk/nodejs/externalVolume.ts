// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * Creating a volume:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * const ebs = nomad.getPlugin({
 *     pluginId: "aws-ebs0",
 *     waitForHealthy: true,
 * });
 * const mysqlVolume = new nomad.ExternalVolume("mysqlVolume", {
 *     type: "csi",
 *     pluginId: "aws-ebs0",
 *     volumeId: "mysql_volume",
 *     capacityMin: "10GiB",
 *     capacityMax: "20GiB",
 *     capabilities: [{
 *         accessMode: "single-node-writer",
 *         attachmentMode: "file-system",
 *     }],
 *     mountOptions: {
 *         fsType: "ext4",
 *     },
 *     topologyRequest: {
 *         required: {
 *             topologies: [
 *                 {
 *                     segments: {
 *                         rack: "R1",
 *                         zone: "us-east-1a",
 *                     },
 *                 },
 *                 {
 *                     segments: {
 *                         rack: "R2",
 *                     },
 *                 },
 *             ],
 *         },
 *     },
 * }, {
 *     dependsOn: [ebs],
 * });
 * ```
 */
export class ExternalVolume extends pulumi.CustomResource {
    /**
     * Get an existing ExternalVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalVolumeState, opts?: pulumi.CustomResourceOptions): ExternalVolume {
        return new ExternalVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nomad:index/externalVolume:ExternalVolume';

    /**
     * Returns true if the given object is an instance of ExternalVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalVolume.__pulumiType;
    }

    /**
     * Capabilities intended to be used in a job. At least one capability must be provided.
     */
    public readonly capabilities!: pulumi.Output<outputs.ExternalVolumeCapability[]>;
    /**
     * Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
     */
    public readonly capacityMax!: pulumi.Output<string | undefined>;
    /**
     * Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
     */
    public readonly capacityMin!: pulumi.Output<string | undefined>;
    /**
     * The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
     */
    public readonly cloneId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly controllerRequired!: pulumi.Output<boolean>;
    public /*out*/ readonly controllersExpected!: pulumi.Output<number>;
    public /*out*/ readonly controllersHealthy!: pulumi.Output<number>;
    /**
     * Options for mounting 'block-device' volumes without a pre-formatted file system.
     */
    public readonly mountOptions!: pulumi.Output<outputs.ExternalVolumeMountOptions | undefined>;
    /**
     * The display name of the volume.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace in which to create the volume.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    public /*out*/ readonly nodesExpected!: pulumi.Output<number>;
    public /*out*/ readonly nodesHealthy!: pulumi.Output<number>;
    /**
     * An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the CSI plugin that manages this volume.
     */
    public readonly pluginId!: pulumi.Output<string>;
    public /*out*/ readonly pluginProvider!: pulumi.Output<string>;
    public /*out*/ readonly pluginProviderVersion!: pulumi.Output<string>;
    public /*out*/ readonly schedulable!: pulumi.Output<boolean>;
    /**
     * An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     */
    public readonly secrets!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
     * 'clone_id'.
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly topologies!: pulumi.Output<outputs.ExternalVolumeTopology[]>;
    /**
     * Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
     */
    public readonly topologyRequest!: pulumi.Output<outputs.ExternalVolumeTopologyRequest | undefined>;
    /**
     * The type of the volume. Currently, only 'csi' is supported.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The unique ID of the volume, how jobs will refer to the volume.
     */
    public readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a ExternalVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalVolumeArgs | ExternalVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalVolumeState | undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["capacityMax"] = state ? state.capacityMax : undefined;
            resourceInputs["capacityMin"] = state ? state.capacityMin : undefined;
            resourceInputs["cloneId"] = state ? state.cloneId : undefined;
            resourceInputs["controllerRequired"] = state ? state.controllerRequired : undefined;
            resourceInputs["controllersExpected"] = state ? state.controllersExpected : undefined;
            resourceInputs["controllersHealthy"] = state ? state.controllersHealthy : undefined;
            resourceInputs["mountOptions"] = state ? state.mountOptions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["nodesExpected"] = state ? state.nodesExpected : undefined;
            resourceInputs["nodesHealthy"] = state ? state.nodesHealthy : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["pluginId"] = state ? state.pluginId : undefined;
            resourceInputs["pluginProvider"] = state ? state.pluginProvider : undefined;
            resourceInputs["pluginProviderVersion"] = state ? state.pluginProviderVersion : undefined;
            resourceInputs["schedulable"] = state ? state.schedulable : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["topologies"] = state ? state.topologies : undefined;
            resourceInputs["topologyRequest"] = state ? state.topologyRequest : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as ExternalVolumeArgs | undefined;
            if ((!args || args.capabilities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capabilities'");
            }
            if ((!args || args.pluginId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluginId'");
            }
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["capacityMax"] = args ? args.capacityMax : undefined;
            resourceInputs["capacityMin"] = args ? args.capacityMin : undefined;
            resourceInputs["cloneId"] = args ? args.cloneId : undefined;
            resourceInputs["mountOptions"] = args ? args.mountOptions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["pluginId"] = args ? args.pluginId : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["topologyRequest"] = args ? args.topologyRequest : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["controllerRequired"] = undefined /*out*/;
            resourceInputs["controllersExpected"] = undefined /*out*/;
            resourceInputs["controllersHealthy"] = undefined /*out*/;
            resourceInputs["nodesExpected"] = undefined /*out*/;
            resourceInputs["nodesHealthy"] = undefined /*out*/;
            resourceInputs["pluginProvider"] = undefined /*out*/;
            resourceInputs["pluginProviderVersion"] = undefined /*out*/;
            resourceInputs["schedulable"] = undefined /*out*/;
            resourceInputs["topologies"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalVolume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalVolume resources.
 */
export interface ExternalVolumeState {
    /**
     * Capabilities intended to be used in a job. At least one capability must be provided.
     */
    capabilities?: pulumi.Input<pulumi.Input<inputs.ExternalVolumeCapability>[]>;
    /**
     * Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
     */
    capacityMax?: pulumi.Input<string>;
    /**
     * Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
     */
    capacityMin?: pulumi.Input<string>;
    /**
     * The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
     */
    cloneId?: pulumi.Input<string>;
    controllerRequired?: pulumi.Input<boolean>;
    controllersExpected?: pulumi.Input<number>;
    controllersHealthy?: pulumi.Input<number>;
    /**
     * Options for mounting 'block-device' volumes without a pre-formatted file system.
     */
    mountOptions?: pulumi.Input<inputs.ExternalVolumeMountOptions>;
    /**
     * The display name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace in which to create the volume.
     */
    namespace?: pulumi.Input<string>;
    nodesExpected?: pulumi.Input<number>;
    nodesHealthy?: pulumi.Input<number>;
    /**
     * An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the CSI plugin that manages this volume.
     */
    pluginId?: pulumi.Input<string>;
    pluginProvider?: pulumi.Input<string>;
    pluginProviderVersion?: pulumi.Input<string>;
    schedulable?: pulumi.Input<boolean>;
    /**
     * An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     */
    secrets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
     * 'clone_id'.
     */
    snapshotId?: pulumi.Input<string>;
    topologies?: pulumi.Input<pulumi.Input<inputs.ExternalVolumeTopology>[]>;
    /**
     * Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
     */
    topologyRequest?: pulumi.Input<inputs.ExternalVolumeTopologyRequest>;
    /**
     * The type of the volume. Currently, only 'csi' is supported.
     */
    type?: pulumi.Input<string>;
    /**
     * The unique ID of the volume, how jobs will refer to the volume.
     */
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalVolume resource.
 */
export interface ExternalVolumeArgs {
    /**
     * Capabilities intended to be used in a job. At least one capability must be provided.
     */
    capabilities: pulumi.Input<pulumi.Input<inputs.ExternalVolumeCapability>[]>;
    /**
     * Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
     */
    capacityMax?: pulumi.Input<string>;
    /**
     * Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
     */
    capacityMin?: pulumi.Input<string>;
    /**
     * The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with 'snapshot_id'.
     */
    cloneId?: pulumi.Input<string>;
    /**
     * Options for mounting 'block-device' volumes without a pre-formatted file system.
     */
    mountOptions?: pulumi.Input<inputs.ExternalVolumeMountOptions>;
    /**
     * The display name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace in which to create the volume.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the CSI plugin that manages this volume.
     */
    pluginId: pulumi.Input<string>;
    /**
     * An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     */
    secrets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
     * 'clone_id'.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
     */
    topologyRequest?: pulumi.Input<inputs.ExternalVolumeTopologyRequest>;
    /**
     * The type of the volume. Currently, only 'csi' is supported.
     */
    type?: pulumi.Input<string>;
    /**
     * The unique ID of the volume, how jobs will refer to the volume.
     */
    volumeId: pulumi.Input<string>;
}
