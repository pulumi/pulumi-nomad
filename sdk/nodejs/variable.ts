// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * Creating a variable in the default namespace:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * const example = new nomad.Variable("example", {
 *     path: "some/path/of/your/choosing",
 *     items: {
 *         example_key: "example_value",
 *     },
 * });
 * ```
 *
 * Creating a variable in a custom namespace:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * const example = new nomad.Namespace("example", {
 *     name: "example",
 *     description: "Example namespace.",
 * });
 * const exampleVariable = new nomad.Variable("example", {
 *     path: "some/path/of/your/choosing",
 *     namespace: example.name,
 *     items: {
 *         example_key: "example_value",
 *     },
 * });
 * ```
 */
export class Variable extends pulumi.CustomResource {
    /**
     * Get an existing Variable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VariableState, opts?: pulumi.CustomResourceOptions): Variable {
        return new Variable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nomad:index/variable:Variable';

    /**
     * Returns true if the given object is an instance of Variable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Variable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Variable.__pulumiType;
    }

    /**
     * `(map[string]string: <required>)` - An arbitrary map of items to create in the variable.
     */
    declare public readonly items: pulumi.Output<{[key: string]: string}>;
    /**
     * `(string: "default")` - The namepsace to create the variable in.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * `(string: <required>)` - A unique path to create the variable at.
     */
    declare public readonly path: pulumi.Output<string>;

    /**
     * Create a Variable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VariableArgs | VariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VariableState | undefined;
            resourceInputs["items"] = state?.items;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["path"] = state?.path;
        } else {
            const args = argsOrState as VariableArgs | undefined;
            if (args?.items === undefined && !opts.urn) {
                throw new Error("Missing required property 'items'");
            }
            if (args?.path === undefined && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["items"] = args?.items ? pulumi.secret(args.items) : undefined;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["path"] = args?.path;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["items"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Variable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Variable resources.
 */
export interface VariableState {
    /**
     * `(map[string]string: <required>)` - An arbitrary map of items to create in the variable.
     */
    items?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * `(string: "default")` - The namepsace to create the variable in.
     */
    namespace?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - A unique path to create the variable at.
     */
    path?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Variable resource.
 */
export interface VariableArgs {
    /**
     * `(map[string]string: <required>)` - An arbitrary map of items to create in the variable.
     */
    items: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * `(string: "default")` - The namepsace to create the variable in.
     */
    namespace?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - A unique path to create the variable at.
     */
    path: pulumi.Input<string>;
}
