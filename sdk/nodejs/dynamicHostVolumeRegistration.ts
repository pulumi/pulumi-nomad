// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Registers a dynamic host volume in Nomad that has already been created. Note
 * that Nomad supports two workflows for dynamic host volumes: create and
 * register. Both resources result in the same data source with the same outputs.
 */
export class DynamicHostVolumeRegistration extends pulumi.CustomResource {
    /**
     * Get an existing DynamicHostVolumeRegistration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DynamicHostVolumeRegistrationState, opts?: pulumi.CustomResourceOptions): DynamicHostVolumeRegistration {
        return new DynamicHostVolumeRegistration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nomad:index/dynamicHostVolumeRegistration:DynamicHostVolumeRegistration';

    /**
     * Returns true if the given object is an instance of DynamicHostVolumeRegistration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DynamicHostVolumeRegistration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DynamicHostVolumeRegistration.__pulumiType;
    }

    /**
     * `(block: <optional>)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     */
    public readonly capabilities!: pulumi.Output<outputs.DynamicHostVolumeRegistrationCapability[]>;
    /**
     * `(string: <optional>)` - The size of a volume in bytes. Either the
     * physical size of a disk or a quota, depending on the plugin. This field must
     * be between the `capacityMin` and `capacityMax` values unless they are
     * omitted. Accepts human-friendly suffixes such as `"100GiB"`.
     */
    public readonly capacity!: pulumi.Output<string | undefined>;
    public /*out*/ readonly capacityBytes!: pulumi.Output<number>;
    public /*out*/ readonly capacityMaxBytes!: pulumi.Output<number>;
    public /*out*/ readonly capacityMinBytes!: pulumi.Output<number>;
    /**
     * Constraints
     */
    public /*out*/ readonly constraints!: pulumi.Output<outputs.DynamicHostVolumeRegistrationConstraint[]>;
    /**
     * `(string)` - The path on disk where the volume exists.
     */
    public readonly hostPath!: pulumi.Output<string>;
    /**
     * `(string: <required>)` - The name of the volume, which is used as the
     * [`volume.source`][volumeSource] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * `(string: <optional>)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `"default"` if unset.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * `(string: <required>)` - A specific node where the volume is
     * mounted.
     */
    public readonly nodeId!: pulumi.Output<string>;
    /**
     * Node pool
     */
    public /*out*/ readonly nodePool!: pulumi.Output<string>;
    /**
     * `(map<string|string>: <optional>)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     *
     *
     * [`accessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
     * [`attachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
     * [volumeSource]: /nomad/docs/job-specification/volume#source
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Plugin ID
     */
    public /*out*/ readonly pluginId!: pulumi.Output<string>;
    /**
     * State
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a DynamicHostVolumeRegistration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DynamicHostVolumeRegistrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DynamicHostVolumeRegistrationArgs | DynamicHostVolumeRegistrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DynamicHostVolumeRegistrationState | undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["capacityBytes"] = state ? state.capacityBytes : undefined;
            resourceInputs["capacityMaxBytes"] = state ? state.capacityMaxBytes : undefined;
            resourceInputs["capacityMinBytes"] = state ? state.capacityMinBytes : undefined;
            resourceInputs["constraints"] = state ? state.constraints : undefined;
            resourceInputs["hostPath"] = state ? state.hostPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["nodePool"] = state ? state.nodePool : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["pluginId"] = state ? state.pluginId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as DynamicHostVolumeRegistrationArgs | undefined;
            if ((!args || args.capabilities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capabilities'");
            }
            if ((!args || args.hostPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostPath'");
            }
            if ((!args || args.nodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeId'");
            }
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["hostPath"] = args ? args.hostPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["capacityBytes"] = undefined /*out*/;
            resourceInputs["capacityMaxBytes"] = undefined /*out*/;
            resourceInputs["capacityMinBytes"] = undefined /*out*/;
            resourceInputs["constraints"] = undefined /*out*/;
            resourceInputs["nodePool"] = undefined /*out*/;
            resourceInputs["pluginId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DynamicHostVolumeRegistration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DynamicHostVolumeRegistration resources.
 */
export interface DynamicHostVolumeRegistrationState {
    /**
     * `(block: <optional>)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     */
    capabilities?: pulumi.Input<pulumi.Input<inputs.DynamicHostVolumeRegistrationCapability>[]>;
    /**
     * `(string: <optional>)` - The size of a volume in bytes. Either the
     * physical size of a disk or a quota, depending on the plugin. This field must
     * be between the `capacityMin` and `capacityMax` values unless they are
     * omitted. Accepts human-friendly suffixes such as `"100GiB"`.
     */
    capacity?: pulumi.Input<string>;
    capacityBytes?: pulumi.Input<number>;
    capacityMaxBytes?: pulumi.Input<number>;
    capacityMinBytes?: pulumi.Input<number>;
    /**
     * Constraints
     */
    constraints?: pulumi.Input<pulumi.Input<inputs.DynamicHostVolumeRegistrationConstraint>[]>;
    /**
     * `(string)` - The path on disk where the volume exists.
     */
    hostPath?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - The name of the volume, which is used as the
     * [`volume.source`][volumeSource] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     */
    name?: pulumi.Input<string>;
    /**
     * `(string: <optional>)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `"default"` if unset.
     */
    namespace?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - A specific node where the volume is
     * mounted.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * Node pool
     */
    nodePool?: pulumi.Input<string>;
    /**
     * `(map<string|string>: <optional>)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     *
     *
     * [`accessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
     * [`attachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
     * [volumeSource]: /nomad/docs/job-specification/volume#source
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Plugin ID
     */
    pluginId?: pulumi.Input<string>;
    /**
     * State
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DynamicHostVolumeRegistration resource.
 */
export interface DynamicHostVolumeRegistrationArgs {
    /**
     * `(block: <optional>)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     */
    capabilities: pulumi.Input<pulumi.Input<inputs.DynamicHostVolumeRegistrationCapability>[]>;
    /**
     * `(string: <optional>)` - The size of a volume in bytes. Either the
     * physical size of a disk or a quota, depending on the plugin. This field must
     * be between the `capacityMin` and `capacityMax` values unless they are
     * omitted. Accepts human-friendly suffixes such as `"100GiB"`.
     */
    capacity?: pulumi.Input<string>;
    /**
     * `(string)` - The path on disk where the volume exists.
     */
    hostPath: pulumi.Input<string>;
    /**
     * `(string: <required>)` - The name of the volume, which is used as the
     * [`volume.source`][volumeSource] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     */
    name?: pulumi.Input<string>;
    /**
     * `(string: <optional>)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `"default"` if unset.
     */
    namespace?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - A specific node where the volume is
     * mounted.
     */
    nodeId: pulumi.Input<string>;
    /**
     * `(map<string|string>: <optional>)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     *
     *
     * [`accessMode`]: /nomad/docs/other-specifications/volume/capability#access_mode
     * [`attachmentMode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
     * [volumeSource]: /nomad/docs/job-specification/volume#source
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
