// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieve a list of node pools available in Nomad.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * const prod = nomad.getNodePools({
 *     filter: "Meta.env == \"prod\"",
 * });
 * ```
 */
export function getNodePools(args?: GetNodePoolsArgs, opts?: pulumi.InvokeOptions): Promise<GetNodePoolsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nomad:index/getNodePools:getNodePools", {
        "filter": args.filter,
        "prefix": args.prefix,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodePools.
 */
export interface GetNodePoolsArgs {
    filter?: string;
    /**
     * `(string)` - Specifies a string to filter node pools based on a name
     * prefix.
     */
    prefix?: string;
}

/**
 * A collection of values returned by getNodePools.
 */
export interface GetNodePoolsResult {
    readonly filter?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * `(list of node pools)` - A list of node pools matching the
     * search criteria.
     */
    readonly nodePools: outputs.GetNodePoolsNodePool[];
    readonly prefix?: string;
}
/**
 * Retrieve a list of node pools available in Nomad.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * const prod = nomad.getNodePools({
 *     filter: "Meta.env == \"prod\"",
 * });
 * ```
 */
export function getNodePoolsOutput(args?: GetNodePoolsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodePoolsResult> {
    return pulumi.output(args).apply((a: any) => getNodePools(a, opts))
}

/**
 * A collection of arguments for invoking getNodePools.
 */
export interface GetNodePoolsOutputArgs {
    filter?: pulumi.Input<string>;
    /**
     * `(string)` - Specifies a string to filter node pools based on a name
     * prefix.
     */
    prefix?: pulumi.Input<string>;
}
