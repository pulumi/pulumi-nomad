// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ExternalVolumeCapability {
    accessMode: string;
    attachmentMode: string;
}

export interface ExternalVolumeMountOptions {
    fsType?: string;
    mountFlags?: string[];
}

export interface GetAclPoliciesPolicy {
    description: string;
    name: string;
}

export interface GetAclTokensAclToken {
    accessorId: string;
    createTime: string;
    global: boolean;
    name: string;
    policies: string[];
    type: string;
}

export interface GetJobConstraint {
    ltarget: string;
    operand: string;
    rtarget: string;
}

export interface GetJobPeriodicConfig {
    enabled: boolean;
    prohibitOverlap: boolean;
    spec: string;
    specType: string;
    timezone: string;
}

export interface GetJobTaskGroup {
    count: number;
    meta: {[key: string]: any};
    name: string;
    tasks: outputs.GetJobTaskGroupTask[];
    volumes: outputs.GetJobTaskGroupVolume[];
}

export interface GetJobTaskGroupTask {
    driver: string;
    meta: {[key: string]: any};
    name: string;
    volumeMounts: outputs.GetJobTaskGroupTaskVolumeMount[];
}

export interface GetJobTaskGroupTaskVolumeMount {
    destination: string;
    readOnly: boolean;
    volume: string;
}

export interface GetJobTaskGroupVolume {
    name: string;
    readOnly: boolean;
    source: string;
    type: string;
}

export interface GetPluginNode {
    healthy: boolean;
    healthyDescription: string;
    name: string;
}

export interface GetScalingPoliciesPolicy {
    enabled: boolean;
    id: string;
    target: {[key: string]: any};
    /**
     * `(string)` - An optional string to filter scaling policies based on policy type. If not provided, policies of all types are returned.
     */
    type: string;
}

export interface JobHcl2 {
    /**
     * `(boolean: false)` - Set this to `true` to be able to use
     * HCL2 filesystem functions
     */
    allowFs?: boolean;
    /**
     * `(boolean: false)` - Set this to `true` if your jobspec uses the HCL2
     * format instead of the default HCL.
     */
    enabled?: boolean;
    vars?: {[key: string]: any};
}

export interface JobTaskGroup {
    count: number;
    meta: {[key: string]: any};
    name: string;
    tasks: outputs.JobTaskGroupTask[];
    volumes: outputs.JobTaskGroupVolume[];
}

export interface JobTaskGroupTask {
    driver: string;
    meta: {[key: string]: any};
    name: string;
    volumeMounts: outputs.JobTaskGroupTaskVolumeMount[];
}

export interface JobTaskGroupTaskVolumeMount {
    destination: string;
    readOnly: boolean;
    volume: string;
}

export interface JobTaskGroupVolume {
    name: string;
    readOnly: boolean;
    source: string;
    type: string;
}

export interface ProviderHeader {
    name?: string;
    value?: string;
}

export interface QuoteSpecificationLimit {
    /**
     * `(string: <required>)` - The region these limits should apply to.
     */
    region: string;
    /**
     * `(block: <required>)` - The limits to enforce. This block
     * may only be specified once in the `limits` block. Its structure is
     * documented below.
     */
    regionLimit: outputs.QuoteSpecificationLimitRegionLimit;
}

export interface QuoteSpecificationLimitRegionLimit {
    /**
     * `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
     * is treated as unlimited, and a negative value is treated as fully disallowed.
     */
    cpu?: number;
    /**
     * `(int: 0)` - The amount of memory (in megabytes) to limit
     * allocations to. A value of zero is treated as unlimited, and a negative value
     * is treated as fully disallowed.
     */
    memoryMb?: number;
}

export interface VolumeCapability {
    accessMode: string;
    attachmentMode: string;
}

export interface VolumeMountOptions {
    fsType?: string;
    mountFlags?: string[];
}
export namespace config {
    export interface Headers {
        name: string;
        value: string;
    }
}
