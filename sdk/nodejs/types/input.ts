// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AclAuthMethodConfig {
    allowedRedirectUris: pulumi.Input<pulumi.Input<string>[]>;
    boundAudiences?: pulumi.Input<pulumi.Input<string>[]>;
    claimMappings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    discoveryCaPems?: pulumi.Input<pulumi.Input<string>[]>;
    listClaimMappings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oidcClientId: pulumi.Input<string>;
    oidcClientSecret: pulumi.Input<string>;
    oidcDiscoveryUrl: pulumi.Input<string>;
    oidcScopes?: pulumi.Input<pulumi.Input<string>[]>;
    signingAlgs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AclRolePolicy {
    /**
     * `(string: <required>)` - A human-friendly name for this ACL Role.
     */
    name: pulumi.Input<string>;
}

export interface AclTokenRole {
    id: pulumi.Input<string>;
    /**
     * `(string: "")` - A human-friendly name for this token.
     */
    name?: pulumi.Input<string>;
}

export interface ExternalVolumeCapability {
    /**
     * `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
     * - `single-node-reader-only`
     * - `single-node-writer`
     * - `multi-node-reader-only`
     * - `multi-node-single-writer`
     * - `multi-node-multi-writer`
     */
    accessMode: pulumi.Input<string>;
    /**
     * `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
     * - `block-device`
     * - `file-system`
     */
    attachmentMode: pulumi.Input<string>;
}

export interface ExternalVolumeMountOptions {
    /**
     * `(string: optional)` - The file system type.
     */
    fsType?: pulumi.Input<string>;
    /**
     * `[]string: optional` - The flags passed to `mount`.
     */
    mountFlags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExternalVolumeTopology {
    /**
     * `(map[string]string)` - Define the attributes for the topology request.
     */
    segments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ExternalVolumeTopologyRequest {
    /**
     * `(``Topology``: <optional>)` - Preferred topologies indicate that the volume should be created in a location accessible from some of the listed topologies.
     */
    preferred?: pulumi.Input<inputs.ExternalVolumeTopologyRequestPreferred>;
    /**
     * `(``Topology``: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
     */
    required?: pulumi.Input<inputs.ExternalVolumeTopologyRequestRequired>;
}

export interface ExternalVolumeTopologyRequestPreferred {
    topologies: pulumi.Input<pulumi.Input<inputs.ExternalVolumeTopologyRequestPreferredTopology>[]>;
}

export interface ExternalVolumeTopologyRequestPreferredTopology {
    /**
     * `(map[string]string)` - Define the attributes for the topology request.
     */
    segments: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ExternalVolumeTopologyRequestRequired {
    topologies: pulumi.Input<pulumi.Input<inputs.ExternalVolumeTopologyRequestRequiredTopology>[]>;
}

export interface ExternalVolumeTopologyRequestRequiredTopology {
    /**
     * `(map[string]string)` - Define the attributes for the topology request.
     */
    segments: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface JobHcl2 {
    /**
     * `(boolean: false)` - Set this to `true` to be able to use
     * HCL2 filesystem functions
     */
    allowFs?: pulumi.Input<boolean>;
    /**
     * `(boolean: false)` - Set this to `true` if your jobspec uses the HCL2
     * format instead of the default HCL.
     */
    enabled?: pulumi.Input<boolean>;
    vars?: pulumi.Input<{[key: string]: any}>;
}

export interface JobTaskGroup {
    count?: pulumi.Input<number>;
    meta?: pulumi.Input<{[key: string]: any}>;
    name?: pulumi.Input<string>;
    tasks?: pulumi.Input<pulumi.Input<inputs.JobTaskGroupTask>[]>;
    volumes?: pulumi.Input<pulumi.Input<inputs.JobTaskGroupVolume>[]>;
}

export interface JobTaskGroupTask {
    driver?: pulumi.Input<string>;
    meta?: pulumi.Input<{[key: string]: any}>;
    name?: pulumi.Input<string>;
    volumeMounts?: pulumi.Input<pulumi.Input<inputs.JobTaskGroupTaskVolumeMount>[]>;
}

export interface JobTaskGroupTaskVolumeMount {
    destination?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    volume?: pulumi.Input<string>;
}

export interface JobTaskGroupVolume {
    name?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    source?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NamespaceCapabilities {
    /**
     * `([]string: <optional>)` - Task drivers disabled for the namespace.
     */
    disabledTaskDrivers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `([]string: <optional>)` - Task drivers enabled for the namespace.
     */
    enabledTaskDrivers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProviderHeader {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface QuoteSpecificationLimit {
    /**
     * `(string: <required>)` - The region these limits should apply to.
     */
    region: pulumi.Input<string>;
    /**
     * `(block: <required>)` - The limits to enforce. This block
     * may only be specified once in the `limits` block. Its structure is
     * documented below.
     */
    regionLimit: pulumi.Input<inputs.QuoteSpecificationLimitRegionLimit>;
}

export interface QuoteSpecificationLimitRegionLimit {
    /**
     * `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
     * is treated as unlimited, and a negative value is treated as fully disallowed.
     */
    cpu?: pulumi.Input<number>;
    /**
     * `(int: 0)` - The amount of memory (in megabytes) to limit
     * allocations to. A value of zero is treated as unlimited, and a negative value
     * is treated as fully disallowed.
     */
    memoryMb?: pulumi.Input<number>;
}

export interface VolumeCapability {
    /**
     * `(string: <required>)` - Defines whether a volume should be available concurrently. Possible values are:
     * - `single-node-reader-only`
     * - `single-node-writer`
     * - `multi-node-reader-only`
     * - `multi-node-single-writer`
     * - `multi-node-multi-writer`
     */
    accessMode: pulumi.Input<string>;
    /**
     * `(string: <required>)` - The storage API that will be used by the volume. Possible values are:
     * - `block-device`
     * - `file-system`
     */
    attachmentMode: pulumi.Input<string>;
}

export interface VolumeMountOptions {
    /**
     * `(string: <optional>)` - The file system type.
     */
    fsType?: pulumi.Input<string>;
    /**
     * `([]string: <optional>)` - The flags passed to `mount`.
     */
    mountFlags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VolumeTopology {
    /**
     * `(map[string]string)` - Define the attributes for the topology request.
     */
    segments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VolumeTopologyRequest {
    /**
     * `(``Topology``: <optional>)` - Required topologies indicate that the volume must be created in a location accessible from all the listed topologies.
     */
    required?: pulumi.Input<inputs.VolumeTopologyRequestRequired>;
}

export interface VolumeTopologyRequestRequired {
    topologies: pulumi.Input<pulumi.Input<inputs.VolumeTopologyRequestRequiredTopology>[]>;
}

export interface VolumeTopologyRequestRequiredTopology {
    /**
     * `(map[string]string)` - Define the attributes for the topology request.
     */
    segments: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
export namespace config {
}
