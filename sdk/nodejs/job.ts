// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobState, opts?: pulumi.CustomResourceOptions): Job {
        return new Job(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nomad:index/job:Job';

    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Job {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }

    /**
     * The IDs for allocations associated with this job.
     */
    public /*out*/ readonly allocationIds!: pulumi.Output<string[]>;
    /**
     * `(string: <optional>)` - Consul token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     */
    public readonly consulToken!: pulumi.Output<string | undefined>;
    /**
     * The target datacenters for the job, as derived from the jobspec.
     */
    public /*out*/ readonly datacenters!: pulumi.Output<string[]>;
    /**
     * If detach = false, the ID for the deployment associated with the last job create/update, if one exists.
     */
    public /*out*/ readonly deploymentId!: pulumi.Output<string>;
    /**
     * If detach = false, the status for the deployment associated with the last job create/update, if one exists.
     */
    public /*out*/ readonly deploymentStatus!: pulumi.Output<string>;
    /**
     * If true, the job will be deregistered on destroy.
     */
    public readonly deregisterOnDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * `(boolean: true)` - Determines if the job will be
     * deregistered if the ID of the job in the jobspec changes.
     */
    public readonly deregisterOnIdChange!: pulumi.Output<boolean | undefined>;
    /**
     * `(boolean: true)` - If true, the provider will return immediately
     * after creating or updating, instead of monitoring.
     */
    public readonly detach!: pulumi.Output<boolean | undefined>;
    /**
     * `(block: optional)` - Options for the HCL2 jobspec parser.
     */
    public readonly hcl2!: pulumi.Output<outputs.JobHcl2 | undefined>;
    /**
     * `(string: <required>)` - The contents of the jobspec to register.
     */
    public readonly jobspec!: pulumi.Output<string>;
    /**
     * `(boolean: false)` - Set this to `true` if your jobspec is structured with
     * JSON instead of the default HCL.
     */
    public readonly json!: pulumi.Output<boolean | undefined>;
    /**
     * Integer that increments for each change. Used to detect any changes between plan and apply.
     */
    public /*out*/ readonly modifyIndex!: pulumi.Output<string>;
    /**
     * The name of the job, as derived from the jobspec.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The namespace of the job, as derived from the jobspec.
     */
    public /*out*/ readonly namespace!: pulumi.Output<string>;
    /**
     * `(boolean: false)` - Determines if the job will override any
     * soft-mandatory Sentinel policies and register even if they fail.
     */
    public readonly policyOverride!: pulumi.Output<boolean | undefined>;
    /**
     * `(boolean: false)` - Set this to true if you want the job to
     * be purged when the resource is destroyed.
     */
    public readonly purgeOnDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * The target region for the job, as derived from the jobspec.
     */
    public /*out*/ readonly region!: pulumi.Output<string>;
    public /*out*/ readonly taskGroups!: pulumi.Output<outputs.JobTaskGroup[]>;
    /**
     * The type of the job, as derived from the jobspec.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * `(string: <optional>)` - Vault token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     */
    public readonly vaultToken!: pulumi.Output<string | undefined>;

    /**
     * Create a Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobArgs | JobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobState | undefined;
            resourceInputs["allocationIds"] = state ? state.allocationIds : undefined;
            resourceInputs["consulToken"] = state ? state.consulToken : undefined;
            resourceInputs["datacenters"] = state ? state.datacenters : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["deploymentStatus"] = state ? state.deploymentStatus : undefined;
            resourceInputs["deregisterOnDestroy"] = state ? state.deregisterOnDestroy : undefined;
            resourceInputs["deregisterOnIdChange"] = state ? state.deregisterOnIdChange : undefined;
            resourceInputs["detach"] = state ? state.detach : undefined;
            resourceInputs["hcl2"] = state ? state.hcl2 : undefined;
            resourceInputs["jobspec"] = state ? state.jobspec : undefined;
            resourceInputs["json"] = state ? state.json : undefined;
            resourceInputs["modifyIndex"] = state ? state.modifyIndex : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["policyOverride"] = state ? state.policyOverride : undefined;
            resourceInputs["purgeOnDestroy"] = state ? state.purgeOnDestroy : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["taskGroups"] = state ? state.taskGroups : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vaultToken"] = state ? state.vaultToken : undefined;
        } else {
            const args = argsOrState as JobArgs | undefined;
            if ((!args || args.jobspec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobspec'");
            }
            resourceInputs["consulToken"] = args?.consulToken ? pulumi.secret(args.consulToken) : undefined;
            resourceInputs["deregisterOnDestroy"] = args ? args.deregisterOnDestroy : undefined;
            resourceInputs["deregisterOnIdChange"] = args ? args.deregisterOnIdChange : undefined;
            resourceInputs["detach"] = args ? args.detach : undefined;
            resourceInputs["hcl2"] = args ? args.hcl2 : undefined;
            resourceInputs["jobspec"] = args ? args.jobspec : undefined;
            resourceInputs["json"] = args ? args.json : undefined;
            resourceInputs["policyOverride"] = args ? args.policyOverride : undefined;
            resourceInputs["purgeOnDestroy"] = args ? args.purgeOnDestroy : undefined;
            resourceInputs["vaultToken"] = args?.vaultToken ? pulumi.secret(args.vaultToken) : undefined;
            resourceInputs["allocationIds"] = undefined /*out*/;
            resourceInputs["datacenters"] = undefined /*out*/;
            resourceInputs["deploymentId"] = undefined /*out*/;
            resourceInputs["deploymentStatus"] = undefined /*out*/;
            resourceInputs["modifyIndex"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["namespace"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["taskGroups"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["consulToken", "vaultToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Job.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Job resources.
 */
export interface JobState {
    /**
     * The IDs for allocations associated with this job.
     */
    allocationIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `(string: <optional>)` - Consul token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     */
    consulToken?: pulumi.Input<string>;
    /**
     * The target datacenters for the job, as derived from the jobspec.
     */
    datacenters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If detach = false, the ID for the deployment associated with the last job create/update, if one exists.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * If detach = false, the status for the deployment associated with the last job create/update, if one exists.
     */
    deploymentStatus?: pulumi.Input<string>;
    /**
     * If true, the job will be deregistered on destroy.
     */
    deregisterOnDestroy?: pulumi.Input<boolean>;
    /**
     * `(boolean: true)` - Determines if the job will be
     * deregistered if the ID of the job in the jobspec changes.
     */
    deregisterOnIdChange?: pulumi.Input<boolean>;
    /**
     * `(boolean: true)` - If true, the provider will return immediately
     * after creating or updating, instead of monitoring.
     */
    detach?: pulumi.Input<boolean>;
    /**
     * `(block: optional)` - Options for the HCL2 jobspec parser.
     */
    hcl2?: pulumi.Input<inputs.JobHcl2>;
    /**
     * `(string: <required>)` - The contents of the jobspec to register.
     */
    jobspec?: pulumi.Input<string>;
    /**
     * `(boolean: false)` - Set this to `true` if your jobspec is structured with
     * JSON instead of the default HCL.
     */
    json?: pulumi.Input<boolean>;
    /**
     * Integer that increments for each change. Used to detect any changes between plan and apply.
     */
    modifyIndex?: pulumi.Input<string>;
    /**
     * The name of the job, as derived from the jobspec.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the job, as derived from the jobspec.
     */
    namespace?: pulumi.Input<string>;
    /**
     * `(boolean: false)` - Determines if the job will override any
     * soft-mandatory Sentinel policies and register even if they fail.
     */
    policyOverride?: pulumi.Input<boolean>;
    /**
     * `(boolean: false)` - Set this to true if you want the job to
     * be purged when the resource is destroyed.
     */
    purgeOnDestroy?: pulumi.Input<boolean>;
    /**
     * The target region for the job, as derived from the jobspec.
     */
    region?: pulumi.Input<string>;
    taskGroups?: pulumi.Input<pulumi.Input<inputs.JobTaskGroup>[]>;
    /**
     * The type of the job, as derived from the jobspec.
     */
    type?: pulumi.Input<string>;
    /**
     * `(string: <optional>)` - Vault token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     */
    vaultToken?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Job resource.
 */
export interface JobArgs {
    /**
     * `(string: <optional>)` - Consul token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     */
    consulToken?: pulumi.Input<string>;
    /**
     * If true, the job will be deregistered on destroy.
     */
    deregisterOnDestroy?: pulumi.Input<boolean>;
    /**
     * `(boolean: true)` - Determines if the job will be
     * deregistered if the ID of the job in the jobspec changes.
     */
    deregisterOnIdChange?: pulumi.Input<boolean>;
    /**
     * `(boolean: true)` - If true, the provider will return immediately
     * after creating or updating, instead of monitoring.
     */
    detach?: pulumi.Input<boolean>;
    /**
     * `(block: optional)` - Options for the HCL2 jobspec parser.
     */
    hcl2?: pulumi.Input<inputs.JobHcl2>;
    /**
     * `(string: <required>)` - The contents of the jobspec to register.
     */
    jobspec: pulumi.Input<string>;
    /**
     * `(boolean: false)` - Set this to `true` if your jobspec is structured with
     * JSON instead of the default HCL.
     */
    json?: pulumi.Input<boolean>;
    /**
     * `(boolean: false)` - Determines if the job will override any
     * soft-mandatory Sentinel policies and register even if they fail.
     */
    policyOverride?: pulumi.Input<boolean>;
    /**
     * `(boolean: false)` - Set this to true if you want the job to
     * be purged when the resource is destroyed.
     */
    purgeOnDestroy?: pulumi.Input<boolean>;
    /**
     * `(string: <optional>)` - Vault token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     */
    vaultToken?: pulumi.Input<string>;
}
