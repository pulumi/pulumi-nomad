// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AclBindingRule extends pulumi.CustomResource {
    /**
     * Get an existing AclBindingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclBindingRuleState, opts?: pulumi.CustomResourceOptions): AclBindingRule {
        return new AclBindingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nomad:index/aclBindingRule:AclBindingRule';

    /**
     * Returns true if the given object is an instance of AclBindingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclBindingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclBindingRule.__pulumiType;
    }

    /**
     * `(string: <required>)` - Name of the auth method for which this
     * rule applies to.
     */
    declare public readonly authMethod: pulumi.Output<string>;
    /**
     * `(string: <optional>)` - Target of the binding. If `bindType` is
     * `role` or `policy` then `bindName` is required. If `bindType` is
     * `management` than `bindName` must not be defined.
     */
    declare public readonly bindName: pulumi.Output<string | undefined>;
    /**
     * `(string: <required>)` - Adjusts how this binding rule is applied
     * at login time. Valid values are `role`, `policy`, and `management`.
     */
    declare public readonly bindType: pulumi.Output<string>;
    /**
     * `(string: "")` - Description for this ACL binding rule.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * `(string: "")` - A boolean expression that matches against verified
     * identity attributes returned from the auth method during login.
     */
    declare public readonly selector: pulumi.Output<string | undefined>;

    /**
     * Create a AclBindingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclBindingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclBindingRuleArgs | AclBindingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclBindingRuleState | undefined;
            resourceInputs["authMethod"] = state?.authMethod;
            resourceInputs["bindName"] = state?.bindName;
            resourceInputs["bindType"] = state?.bindType;
            resourceInputs["description"] = state?.description;
            resourceInputs["selector"] = state?.selector;
        } else {
            const args = argsOrState as AclBindingRuleArgs | undefined;
            if (args?.authMethod === undefined && !opts.urn) {
                throw new Error("Missing required property 'authMethod'");
            }
            if (args?.bindType === undefined && !opts.urn) {
                throw new Error("Missing required property 'bindType'");
            }
            resourceInputs["authMethod"] = args?.authMethod;
            resourceInputs["bindName"] = args?.bindName;
            resourceInputs["bindType"] = args?.bindType;
            resourceInputs["description"] = args?.description;
            resourceInputs["selector"] = args?.selector;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AclBindingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclBindingRule resources.
 */
export interface AclBindingRuleState {
    /**
     * `(string: <required>)` - Name of the auth method for which this
     * rule applies to.
     */
    authMethod?: pulumi.Input<string>;
    /**
     * `(string: <optional>)` - Target of the binding. If `bindType` is
     * `role` or `policy` then `bindName` is required. If `bindType` is
     * `management` than `bindName` must not be defined.
     */
    bindName?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - Adjusts how this binding rule is applied
     * at login time. Valid values are `role`, `policy`, and `management`.
     */
    bindType?: pulumi.Input<string>;
    /**
     * `(string: "")` - Description for this ACL binding rule.
     */
    description?: pulumi.Input<string>;
    /**
     * `(string: "")` - A boolean expression that matches against verified
     * identity attributes returned from the auth method during login.
     */
    selector?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AclBindingRule resource.
 */
export interface AclBindingRuleArgs {
    /**
     * `(string: <required>)` - Name of the auth method for which this
     * rule applies to.
     */
    authMethod: pulumi.Input<string>;
    /**
     * `(string: <optional>)` - Target of the binding. If `bindType` is
     * `role` or `policy` then `bindName` is required. If `bindType` is
     * `management` than `bindName` must not be defined.
     */
    bindName?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - Adjusts how this binding rule is applied
     * at login time. Valid values are `role`, `policy`, and `management`.
     */
    bindType: pulumi.Input<string>;
    /**
     * `(string: "")` - Description for this ACL binding rule.
     */
    description?: pulumi.Input<string>;
    /**
     * `(string: "")` - A boolean expression that matches against verified
     * identity attributes returned from the auth method during login.
     */
    selector?: pulumi.Input<string>;
}
