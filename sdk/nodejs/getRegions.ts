// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Retrieve a list of regions available in Nomad.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * function notImplemented(message: string) {
 *     throw new Error(message);
 * }
 *
 * export = async () => {
 *     const myRegions = await nomad.getRegions({});
 *     const jobs = notImplemented("The template_file data resource is not yet supported.");
 *     const app: nomad.Job[] = [];
 *     for (const range = {value: 0}; range.value < myRegions.regions.length; range.value++) {
 *         app.push(new nomad.Job(`app-${range.value}`, {jobspec: jobs[range.value].rendered}));
 *     }
 * }
 * ```
 */
export function getRegions(opts?: pulumi.InvokeOptions): Promise<GetRegionsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nomad:index/getRegions:getRegions", {
    }, opts);
}

/**
 * A collection of values returned by getRegions.
 */
export interface GetRegionsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * `(list of strings)` - a list of regions available in the cluster.
     */
    readonly regions: string[];
}
/**
 * Retrieve a list of regions available in Nomad.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * function notImplemented(message: string) {
 *     throw new Error(message);
 * }
 *
 * export = async () => {
 *     const myRegions = await nomad.getRegions({});
 *     const jobs = notImplemented("The template_file data resource is not yet supported.");
 *     const app: nomad.Job[] = [];
 *     for (const range = {value: 0}; range.value < myRegions.regions.length; range.value++) {
 *         app.push(new nomad.Job(`app-${range.value}`, {jobspec: jobs[range.value].rendered}));
 *     }
 * }
 * ```
 */
export function getRegionsOutput(opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRegionsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("nomad:index/getRegions:getRegions", {
    }, opts);
}
