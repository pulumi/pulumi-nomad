// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provisions a node pool within a Nomad cluster.
 *
 * ## Example Usage
 *
 * Registering a node pool:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * const dev = new nomad.NodePool("dev", {
 *     name: "dev",
 *     description: "Nodes for the development environment.",
 *     meta: {
 *         department: "Engineering",
 *         env: "dev",
 *     },
 * });
 * ```
 */
export class NodePool extends pulumi.CustomResource {
    /**
     * Get an existing NodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodePoolState, opts?: pulumi.CustomResourceOptions): NodePool {
        return new NodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nomad:index/nodePool:NodePool';

    /**
     * Returns true if the given object is an instance of NodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodePool.__pulumiType;
    }

    /**
     * `(string)` - The description of the node pool.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * `(map[string]string)` - Arbitrary KV metadata associated with the
     * node pool.
     */
    declare public readonly meta: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * `(string)` - The name of the node pool.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * `(block)` - Scheduler configuration for the node pool.
     */
    declare public readonly schedulerConfig: pulumi.Output<outputs.NodePoolSchedulerConfig | undefined>;

    /**
     * Create a NodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodePoolArgs | NodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodePoolState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["meta"] = state?.meta;
            resourceInputs["name"] = state?.name;
            resourceInputs["schedulerConfig"] = state?.schedulerConfig;
        } else {
            const args = argsOrState as NodePoolArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["meta"] = args?.meta;
            resourceInputs["name"] = args?.name;
            resourceInputs["schedulerConfig"] = args?.schedulerConfig;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodePool resources.
 */
export interface NodePoolState {
    /**
     * `(string)` - The description of the node pool.
     */
    description?: pulumi.Input<string>;
    /**
     * `(map[string]string)` - Arbitrary KV metadata associated with the
     * node pool.
     */
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * `(string)` - The name of the node pool.
     */
    name?: pulumi.Input<string>;
    /**
     * `(block)` - Scheduler configuration for the node pool.
     */
    schedulerConfig?: pulumi.Input<inputs.NodePoolSchedulerConfig>;
}

/**
 * The set of arguments for constructing a NodePool resource.
 */
export interface NodePoolArgs {
    /**
     * `(string)` - The description of the node pool.
     */
    description?: pulumi.Input<string>;
    /**
     * `(map[string]string)` - Arbitrary KV metadata associated with the
     * node pool.
     */
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * `(string)` - The name of the node pool.
     */
    name?: pulumi.Input<string>;
    /**
     * `(block)` - Scheduler configuration for the node pool.
     */
    schedulerConfig?: pulumi.Input<inputs.NodePoolSchedulerConfig>;
}
