// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a node pool in Nomad.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * const dev = nomad.getNodePool({
 *     name: "dev",
 * });
 * ```
 */
export function getNodePool(args: GetNodePoolArgs, opts?: pulumi.InvokeOptions): Promise<GetNodePoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nomad:index/getNodePool:getNodePool", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodePool.
 */
export interface GetNodePoolArgs {
    /**
     * `(string)` - The name of the node pool to fetch.
     */
    name: string;
}

/**
 * A collection of values returned by getNodePool.
 */
export interface GetNodePoolResult {
    /**
     * `(string)` - The description of the node pool.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * `(map[string]string)` - Arbitrary KV metadata associated with the
     * node pool.
     */
    readonly meta: {[key: string]: string};
    readonly name: string;
    /**
     * `(block)` - Scheduler configuration for the node pool.
     */
    readonly schedulerConfigs: outputs.GetNodePoolSchedulerConfig[];
}
/**
 * Get information about a node pool in Nomad.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * const dev = nomad.getNodePool({
 *     name: "dev",
 * });
 * ```
 */
export function getNodePoolOutput(args: GetNodePoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodePoolResult> {
    return pulumi.output(args).apply((a: any) => getNodePool(a, opts))
}

/**
 * A collection of arguments for invoking getNodePool.
 */
export interface GetNodePoolOutputArgs {
    /**
     * `(string)` - The name of the node pool to fetch.
     */
    name: pulumi.Input<string>;
}
