// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Lookup a plugin by ID. The aim of this datasource is to determine whether
 * a particular plugin exists on the cluster, to find information on the health
 * and availability of the plugin, and to optionally wait for the plugin
 * before performing actions the require an available plugin controller.
 *
 * If a plugin with the specified ID does not exist and the datasource is not
 * configured to wait, it will result in an error. For simple existence checks,
 * use the `nomad.getPlugins` listing datasource.
 *
 * ## Example Usage
 *
 * Check for the existence of a plugin:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nomad from "@pulumi/nomad";
 *
 * const ebs = pulumi.output(nomad.getPlugin({
 *     pluginId: "aws-ebs0",
 *     waitForHealthy: true,
 * }));
 * ```
 *
 * This will check for a plugin with the ID `aws-ebs0`, waiting until the plugin
 * is healthy before returning.
 */
export function getPlugin(args: GetPluginArgs, opts?: pulumi.InvokeOptions): Promise<GetPluginResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("nomad:index/getPlugin:getPlugin", {
        "pluginId": args.pluginId,
        "waitForHealthy": args.waitForHealthy,
        "waitForRegistration": args.waitForRegistration,
    }, opts);
}

/**
 * A collection of arguments for invoking getPlugin.
 */
export interface GetPluginArgs {
    pluginId: string;
    waitForHealthy?: boolean;
    waitForRegistration?: boolean;
}

/**
 * A collection of values returned by getPlugin.
 */
export interface GetPluginResult {
    readonly controllerRequired: boolean;
    readonly controllersExpected: number;
    readonly controllersHealthy: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly nodes: outputs.GetPluginNode[];
    readonly nodesExpected: number;
    readonly nodesHealthy: number;
    readonly pluginId: string;
    readonly pluginProvider: string;
    readonly pluginProviderVersion: string;
    readonly waitForHealthy?: boolean;
    readonly waitForRegistration?: boolean;
}
