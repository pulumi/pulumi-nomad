// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodePoolSchedulerConfig {
    /**
     * @return `(string)` - Whether or not memory
     * oversubscription is enabled in the node pool. Possible values are
     * `&#34;enabled&#34;` or `&#34;disabled&#34;`. If not defined the global cluster
     * configuration is used.
     * 
     * &gt; This option differs from Nomad, where it&#39;s represented as a boolean, to
     * allow distinguishing between memory oversubscription being disabled in the
     * node pool and this property not being set.
     * 
     */
    private @Nullable String memoryOversubscription;
    /**
     * @return `(string)` - The scheduler algorithm used in the node
     * pool. Possible values are `binpack` or `spread`. If not defined the global
     * cluster configuration is used.
     * 
     */
    private @Nullable String schedulerAlgorithm;

    private NodePoolSchedulerConfig() {}
    /**
     * @return `(string)` - Whether or not memory
     * oversubscription is enabled in the node pool. Possible values are
     * `&#34;enabled&#34;` or `&#34;disabled&#34;`. If not defined the global cluster
     * configuration is used.
     * 
     * &gt; This option differs from Nomad, where it&#39;s represented as a boolean, to
     * allow distinguishing between memory oversubscription being disabled in the
     * node pool and this property not being set.
     * 
     */
    public Optional<String> memoryOversubscription() {
        return Optional.ofNullable(this.memoryOversubscription);
    }
    /**
     * @return `(string)` - The scheduler algorithm used in the node
     * pool. Possible values are `binpack` or `spread`. If not defined the global
     * cluster configuration is used.
     * 
     */
    public Optional<String> schedulerAlgorithm() {
        return Optional.ofNullable(this.schedulerAlgorithm);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolSchedulerConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String memoryOversubscription;
        private @Nullable String schedulerAlgorithm;
        public Builder() {}
        public Builder(NodePoolSchedulerConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.memoryOversubscription = defaults.memoryOversubscription;
    	      this.schedulerAlgorithm = defaults.schedulerAlgorithm;
        }

        @CustomType.Setter
        public Builder memoryOversubscription(@Nullable String memoryOversubscription) {

            this.memoryOversubscription = memoryOversubscription;
            return this;
        }
        @CustomType.Setter
        public Builder schedulerAlgorithm(@Nullable String schedulerAlgorithm) {

            this.schedulerAlgorithm = schedulerAlgorithm;
            return this;
        }
        public NodePoolSchedulerConfig build() {
            final var _resultValue = new NodePoolSchedulerConfig();
            _resultValue.memoryOversubscription = memoryOversubscription;
            _resultValue.schedulerAlgorithm = schedulerAlgorithm;
            return _resultValue;
        }
    }
}
