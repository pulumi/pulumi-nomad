// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclTokenArgs Empty = new AclTokenArgs();

    /**
     * `(bool: false)` - Whether the token should be replicated to all
     * regions, or if it will only be used in the region it was created in.
     * 
     */
    @Import(name="global")
    private @Nullable Output<Boolean> global;

    /**
     * @return `(bool: false)` - Whether the token should be replicated to all
     * regions, or if it will only be used in the region it was created in.
     * 
     */
    public Optional<Output<Boolean>> global() {
        return Optional.ofNullable(this.global);
    }

    /**
     * `(string: &#34;&#34;)` - A human-friendly name for this token.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return `(string: &#34;&#34;)` - A human-friendly name for this token.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `(set: [])` - A set of policy names to associate with this
     * token. Must be set on `client`-type tokens, must not be set on
     * `management`-type tokens. Policies do not need to exist before being
     * used here.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<String>> policies;

    /**
     * @return `(set: [])` - A set of policy names to associate with this
     * token. Must be set on `client`-type tokens, must not be set on
     * `management`-type tokens. Policies do not need to exist before being
     * used here.
     * 
     */
    public Optional<Output<List<String>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * `(string: &lt;required&gt;)` - The type of token this is. Use `client`
     * for tokens that will have policies associated with them. Use `management`
     * for tokens that can perform any action.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return `(string: &lt;required&gt;)` - The type of token this is. Use `client`
     * for tokens that will have policies associated with them. Use `management`
     * for tokens that can perform any action.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private AclTokenArgs() {}

    private AclTokenArgs(AclTokenArgs $) {
        this.global = $.global;
        this.name = $.name;
        this.policies = $.policies;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclTokenArgs $;

        public Builder() {
            $ = new AclTokenArgs();
        }

        public Builder(AclTokenArgs defaults) {
            $ = new AclTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param global `(bool: false)` - Whether the token should be replicated to all
         * regions, or if it will only be used in the region it was created in.
         * 
         * @return builder
         * 
         */
        public Builder global(@Nullable Output<Boolean> global) {
            $.global = global;
            return this;
        }

        /**
         * @param global `(bool: false)` - Whether the token should be replicated to all
         * regions, or if it will only be used in the region it was created in.
         * 
         * @return builder
         * 
         */
        public Builder global(Boolean global) {
            return global(Output.of(global));
        }

        /**
         * @param name `(string: &#34;&#34;)` - A human-friendly name for this token.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name `(string: &#34;&#34;)` - A human-friendly name for this token.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policies `(set: [])` - A set of policy names to associate with this
         * token. Must be set on `client`-type tokens, must not be set on
         * `management`-type tokens. Policies do not need to exist before being
         * used here.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<String>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies `(set: [])` - A set of policy names to associate with this
         * token. Must be set on `client`-type tokens, must not be set on
         * `management`-type tokens. Policies do not need to exist before being
         * used here.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<String> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies `(set: [])` - A set of policy names to associate with this
         * token. Must be set on `client`-type tokens, must not be set on
         * `management`-type tokens. Policies do not need to exist before being
         * used here.
         * 
         * @return builder
         * 
         */
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param type `(string: &lt;required&gt;)` - The type of token this is. Use `client`
         * for tokens that will have policies associated with them. Use `management`
         * for tokens that can perform any action.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type `(string: &lt;required&gt;)` - The type of token this is. Use `client`
         * for tokens that will have policies associated with them. Use `management`
         * for tokens that can perform any action.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AclTokenArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
