// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.nomad.inputs.NamespaceCapabilitiesArgs;
import com.pulumi.nomad.inputs.NamespaceNodePoolConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceArgs Empty = new NamespaceArgs();

    /**
     * `(block: &lt;optional&gt;)` - A block of capabilities for the namespace. Can&#39;t
     * be repeated. See below for the structure of this block.
     * 
     */
    @Import(name="capabilities")
    private @Nullable Output<NamespaceCapabilitiesArgs> capabilities;

    /**
     * @return `(block: &lt;optional&gt;)` - A block of capabilities for the namespace. Can&#39;t
     * be repeated. See below for the structure of this block.
     * 
     */
    public Optional<Output<NamespaceCapabilitiesArgs>> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    /**
     * `(string: &#34;&#34;)` - A description of the namespace.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return `(string: &#34;&#34;)` - A description of the namespace.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * `(map[string]string: &lt;optional&gt;)` -  Specifies arbitrary KV metadata to associate with the namespace.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<Map<String,String>> meta;

    /**
     * @return `(map[string]string: &lt;optional&gt;)` -  Specifies arbitrary KV metadata to associate with the namespace.
     * 
     */
    public Optional<Output<Map<String,String>>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * `(string: &lt;required&gt;)` - A unique name for the namespace.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return `(string: &lt;required&gt;)` - A unique name for the namespace.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `(block: &lt;optional&gt;)` - A block with node pool configuration for the namespace (Nomad Enterprise only).
     * 
     */
    @Import(name="nodePoolConfig")
    private @Nullable Output<NamespaceNodePoolConfigArgs> nodePoolConfig;

    /**
     * @return `(block: &lt;optional&gt;)` - A block with node pool configuration for the namespace (Nomad Enterprise only).
     * 
     */
    public Optional<Output<NamespaceNodePoolConfigArgs>> nodePoolConfig() {
        return Optional.ofNullable(this.nodePoolConfig);
    }

    /**
     * `(string: &#34;&#34;)` - A resource quota to attach to the namespace.
     * 
     */
    @Import(name="quota")
    private @Nullable Output<String> quota;

    /**
     * @return `(string: &#34;&#34;)` - A resource quota to attach to the namespace.
     * 
     */
    public Optional<Output<String>> quota() {
        return Optional.ofNullable(this.quota);
    }

    private NamespaceArgs() {}

    private NamespaceArgs(NamespaceArgs $) {
        this.capabilities = $.capabilities;
        this.description = $.description;
        this.meta = $.meta;
        this.name = $.name;
        this.nodePoolConfig = $.nodePoolConfig;
        this.quota = $.quota;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceArgs $;

        public Builder() {
            $ = new NamespaceArgs();
        }

        public Builder(NamespaceArgs defaults) {
            $ = new NamespaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - A block of capabilities for the namespace. Can&#39;t
         * be repeated. See below for the structure of this block.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(@Nullable Output<NamespaceCapabilitiesArgs> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - A block of capabilities for the namespace. Can&#39;t
         * be repeated. See below for the structure of this block.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(NamespaceCapabilitiesArgs capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param description `(string: &#34;&#34;)` - A description of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description `(string: &#34;&#34;)` - A description of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param meta `(map[string]string: &lt;optional&gt;)` -  Specifies arbitrary KV metadata to associate with the namespace.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<Map<String,String>> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta `(map[string]string: &lt;optional&gt;)` -  Specifies arbitrary KV metadata to associate with the namespace.
         * 
         * @return builder
         * 
         */
        public Builder meta(Map<String,String> meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param name `(string: &lt;required&gt;)` - A unique name for the namespace.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name `(string: &lt;required&gt;)` - A unique name for the namespace.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodePoolConfig `(block: &lt;optional&gt;)` - A block with node pool configuration for the namespace (Nomad Enterprise only).
         * 
         * @return builder
         * 
         */
        public Builder nodePoolConfig(@Nullable Output<NamespaceNodePoolConfigArgs> nodePoolConfig) {
            $.nodePoolConfig = nodePoolConfig;
            return this;
        }

        /**
         * @param nodePoolConfig `(block: &lt;optional&gt;)` - A block with node pool configuration for the namespace (Nomad Enterprise only).
         * 
         * @return builder
         * 
         */
        public Builder nodePoolConfig(NamespaceNodePoolConfigArgs nodePoolConfig) {
            return nodePoolConfig(Output.of(nodePoolConfig));
        }

        /**
         * @param quota `(string: &#34;&#34;)` - A resource quota to attach to the namespace.
         * 
         * @return builder
         * 
         */
        public Builder quota(@Nullable Output<String> quota) {
            $.quota = quota;
            return this;
        }

        /**
         * @param quota `(string: &#34;&#34;)` - A resource quota to attach to the namespace.
         * 
         * @return builder
         * 
         */
        public Builder quota(String quota) {
            return quota(Output.of(quota));
        }

        public NamespaceArgs build() {
            return $;
        }
    }

}
