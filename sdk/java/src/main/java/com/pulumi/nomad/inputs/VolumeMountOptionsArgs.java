// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeMountOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeMountOptionsArgs Empty = new VolumeMountOptionsArgs();

    /**
     * `(string: &lt;optional&gt;)` - The file system type.
     * 
     */
    @Import(name="fsType")
    private @Nullable Output<String> fsType;

    /**
     * @return `(string: &lt;optional&gt;)` - The file system type.
     * 
     */
    public Optional<Output<String>> fsType() {
        return Optional.ofNullable(this.fsType);
    }

    /**
     * `([]string: &lt;optional&gt;)` - The flags passed to `mount`.
     * 
     */
    @Import(name="mountFlags")
    private @Nullable Output<List<String>> mountFlags;

    /**
     * @return `([]string: &lt;optional&gt;)` - The flags passed to `mount`.
     * 
     */
    public Optional<Output<List<String>>> mountFlags() {
        return Optional.ofNullable(this.mountFlags);
    }

    private VolumeMountOptionsArgs() {}

    private VolumeMountOptionsArgs(VolumeMountOptionsArgs $) {
        this.fsType = $.fsType;
        this.mountFlags = $.mountFlags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeMountOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeMountOptionsArgs $;

        public Builder() {
            $ = new VolumeMountOptionsArgs();
        }

        public Builder(VolumeMountOptionsArgs defaults) {
            $ = new VolumeMountOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fsType `(string: &lt;optional&gt;)` - The file system type.
         * 
         * @return builder
         * 
         */
        public Builder fsType(@Nullable Output<String> fsType) {
            $.fsType = fsType;
            return this;
        }

        /**
         * @param fsType `(string: &lt;optional&gt;)` - The file system type.
         * 
         * @return builder
         * 
         */
        public Builder fsType(String fsType) {
            return fsType(Output.of(fsType));
        }

        /**
         * @param mountFlags `([]string: &lt;optional&gt;)` - The flags passed to `mount`.
         * 
         * @return builder
         * 
         */
        public Builder mountFlags(@Nullable Output<List<String>> mountFlags) {
            $.mountFlags = mountFlags;
            return this;
        }

        /**
         * @param mountFlags `([]string: &lt;optional&gt;)` - The flags passed to `mount`.
         * 
         * @return builder
         * 
         */
        public Builder mountFlags(List<String> mountFlags) {
            return mountFlags(Output.of(mountFlags));
        }

        /**
         * @param mountFlags `([]string: &lt;optional&gt;)` - The flags passed to `mount`.
         * 
         * @return builder
         * 
         */
        public Builder mountFlags(String... mountFlags) {
            return mountFlags(List.of(mountFlags));
        }

        public VolumeMountOptionsArgs build() {
            return $;
        }
    }

}
