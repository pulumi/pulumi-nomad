// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DynamicHostVolumeRegistrationCapability {
    /**
     * @return `(string)` - How the volume can be mounted by
     * allocations. Refer to the [`access_mode`][] documentation for details.
     * 
     */
    private String accessMode;
    /**
     * @return `(string)` - The storage API that will be used by the
     * volume. Refer to the [`attachment_mode`][] documentation.
     * 
     */
    private String attachmentMode;

    private DynamicHostVolumeRegistrationCapability() {}
    /**
     * @return `(string)` - How the volume can be mounted by
     * allocations. Refer to the [`access_mode`][] documentation for details.
     * 
     */
    public String accessMode() {
        return this.accessMode;
    }
    /**
     * @return `(string)` - The storage API that will be used by the
     * volume. Refer to the [`attachment_mode`][] documentation.
     * 
     */
    public String attachmentMode() {
        return this.attachmentMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DynamicHostVolumeRegistrationCapability defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessMode;
        private String attachmentMode;
        public Builder() {}
        public Builder(DynamicHostVolumeRegistrationCapability defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessMode = defaults.accessMode;
    	      this.attachmentMode = defaults.attachmentMode;
        }

        @CustomType.Setter
        public Builder accessMode(String accessMode) {
            if (accessMode == null) {
              throw new MissingRequiredPropertyException("DynamicHostVolumeRegistrationCapability", "accessMode");
            }
            this.accessMode = accessMode;
            return this;
        }
        @CustomType.Setter
        public Builder attachmentMode(String attachmentMode) {
            if (attachmentMode == null) {
              throw new MissingRequiredPropertyException("DynamicHostVolumeRegistrationCapability", "attachmentMode");
            }
            this.attachmentMode = attachmentMode;
            return this;
        }
        public DynamicHostVolumeRegistrationCapability build() {
            final var _resultValue = new DynamicHostVolumeRegistrationCapability();
            _resultValue.accessMode = accessMode;
            _resultValue.attachmentMode = attachmentMode;
            return _resultValue;
        }
    }
}
