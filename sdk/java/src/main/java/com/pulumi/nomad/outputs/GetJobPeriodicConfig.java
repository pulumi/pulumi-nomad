// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetJobPeriodicConfig {
    /**
     * @return `(boolean)` If periodic scheduling is enabled for the specified job.
     * 
     */
    private Boolean enabled;
    /**
     * @return `(boolean)`  If the specified job should wait until previous instances of the job have completed.
     * 
     */
    private Boolean prohibitOverlap;
    /**
     * @return `(string)`
     * 
     */
    private String spec;
    /**
     * @return `(string)`
     * 
     */
    private String specType;
    /**
     * @return `(string)` Time zone to evaluate the next launch interval against.
     * 
     */
    private String timezone;

    private GetJobPeriodicConfig() {}
    /**
     * @return `(boolean)` If periodic scheduling is enabled for the specified job.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return `(boolean)`  If the specified job should wait until previous instances of the job have completed.
     * 
     */
    public Boolean prohibitOverlap() {
        return this.prohibitOverlap;
    }
    /**
     * @return `(string)`
     * 
     */
    public String spec() {
        return this.spec;
    }
    /**
     * @return `(string)`
     * 
     */
    public String specType() {
        return this.specType;
    }
    /**
     * @return `(string)` Time zone to evaluate the next launch interval against.
     * 
     */
    public String timezone() {
        return this.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobPeriodicConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enabled;
        private Boolean prohibitOverlap;
        private String spec;
        private String specType;
        private String timezone;
        public Builder() {}
        public Builder(GetJobPeriodicConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.prohibitOverlap = defaults.prohibitOverlap;
    	      this.spec = defaults.spec;
    	      this.specType = defaults.specType;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder prohibitOverlap(Boolean prohibitOverlap) {
            this.prohibitOverlap = Objects.requireNonNull(prohibitOverlap);
            return this;
        }
        @CustomType.Setter
        public Builder spec(String spec) {
            this.spec = Objects.requireNonNull(spec);
            return this;
        }
        @CustomType.Setter
        public Builder specType(String specType) {
            this.specType = Objects.requireNonNull(specType);
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            this.timezone = Objects.requireNonNull(timezone);
            return this;
        }
        public GetJobPeriodicConfig build() {
            final var o = new GetJobPeriodicConfig();
            o.enabled = enabled;
            o.prohibitOverlap = prohibitOverlap;
            o.spec = spec;
            o.specType = specType;
            o.timezone = timezone;
            return o;
        }
    }
}
