// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QuoteSpecificationLimitRegionLimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final QuoteSpecificationLimitRegionLimitArgs Empty = new QuoteSpecificationLimitRegionLimitArgs();

    /**
     * `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
     * is treated as unlimited, and a negative value is treated as fully disallowed.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Integer> cpu;

    /**
     * @return `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
     * is treated as unlimited, and a negative value is treated as fully disallowed.
     * 
     */
    public Optional<Output<Integer>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * `(int: 0)` - The amount of memory (in megabytes) to limit
     * allocations to. A value of zero is treated as unlimited, and a negative value
     * is treated as fully disallowed.
     * 
     */
    @Import(name="memoryMb")
    private @Nullable Output<Integer> memoryMb;

    /**
     * @return `(int: 0)` - The amount of memory (in megabytes) to limit
     * allocations to. A value of zero is treated as unlimited, and a negative value
     * is treated as fully disallowed.
     * 
     */
    public Optional<Output<Integer>> memoryMb() {
        return Optional.ofNullable(this.memoryMb);
    }

    private QuoteSpecificationLimitRegionLimitArgs() {}

    private QuoteSpecificationLimitRegionLimitArgs(QuoteSpecificationLimitRegionLimitArgs $) {
        this.cpu = $.cpu;
        this.memoryMb = $.memoryMb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuoteSpecificationLimitRegionLimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuoteSpecificationLimitRegionLimitArgs $;

        public Builder() {
            $ = new QuoteSpecificationLimitRegionLimitArgs();
        }

        public Builder(QuoteSpecificationLimitRegionLimitArgs defaults) {
            $ = new QuoteSpecificationLimitRegionLimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpu `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
         * is treated as unlimited, and a negative value is treated as fully disallowed.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Integer> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu `(int: 0)` - The amount of CPU to limit allocations to. A value of zero
         * is treated as unlimited, and a negative value is treated as fully disallowed.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Integer cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param memoryMb `(int: 0)` - The amount of memory (in megabytes) to limit
         * allocations to. A value of zero is treated as unlimited, and a negative value
         * is treated as fully disallowed.
         * 
         * @return builder
         * 
         */
        public Builder memoryMb(@Nullable Output<Integer> memoryMb) {
            $.memoryMb = memoryMb;
            return this;
        }

        /**
         * @param memoryMb `(int: 0)` - The amount of memory (in megabytes) to limit
         * allocations to. A value of zero is treated as unlimited, and a negative value
         * is treated as fully disallowed.
         * 
         * @return builder
         * 
         */
        public Builder memoryMb(Integer memoryMb) {
            return memoryMb(Output.of(memoryMb));
        }

        public QuoteSpecificationLimitRegionLimitArgs build() {
            return $;
        }
    }

}
