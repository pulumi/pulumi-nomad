// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.nomad.inputs.CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs;
import java.util.List;
import java.util.Objects;


public final class CsiVolumeRegistrationTopologyRequestRequiredArgs extends com.pulumi.resources.ResourceArgs {

    public static final CsiVolumeRegistrationTopologyRequestRequiredArgs Empty = new CsiVolumeRegistrationTopologyRequestRequiredArgs();

    /**
     * Defines the location for the volume.
     * 
     */
    @Import(name="topologies", required=true)
    private Output<List<CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs>> topologies;

    /**
     * @return Defines the location for the volume.
     * 
     */
    public Output<List<CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs>> topologies() {
        return this.topologies;
    }

    private CsiVolumeRegistrationTopologyRequestRequiredArgs() {}

    private CsiVolumeRegistrationTopologyRequestRequiredArgs(CsiVolumeRegistrationTopologyRequestRequiredArgs $) {
        this.topologies = $.topologies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CsiVolumeRegistrationTopologyRequestRequiredArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CsiVolumeRegistrationTopologyRequestRequiredArgs $;

        public Builder() {
            $ = new CsiVolumeRegistrationTopologyRequestRequiredArgs();
        }

        public Builder(CsiVolumeRegistrationTopologyRequestRequiredArgs defaults) {
            $ = new CsiVolumeRegistrationTopologyRequestRequiredArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param topologies Defines the location for the volume.
         * 
         * @return builder
         * 
         */
        public Builder topologies(Output<List<CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs>> topologies) {
            $.topologies = topologies;
            return this;
        }

        /**
         * @param topologies Defines the location for the volume.
         * 
         * @return builder
         * 
         */
        public Builder topologies(List<CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs> topologies) {
            return topologies(Output.of(topologies));
        }

        /**
         * @param topologies Defines the location for the volume.
         * 
         * @return builder
         * 
         */
        public Builder topologies(CsiVolumeRegistrationTopologyRequestRequiredTopologyArgs... topologies) {
            return topologies(List.of(topologies));
        }

        public CsiVolumeRegistrationTopologyRequestRequiredArgs build() {
            if ($.topologies == null) {
                throw new MissingRequiredPropertyException("CsiVolumeRegistrationTopologyRequestRequiredArgs", "topologies");
            }
            return $;
        }
    }

}
