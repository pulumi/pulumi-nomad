// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.nomad.DynamicHostVolumeArgs;
import com.pulumi.nomad.Utilities;
import com.pulumi.nomad.inputs.DynamicHostVolumeState;
import com.pulumi.nomad.outputs.DynamicHostVolumeCapability;
import com.pulumi.nomad.outputs.DynamicHostVolumeConstraint;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * layout: &#34;nomad&#34;
 * page_title: &#34;Nomad: nomad.DynamicHostVolume&#34;
 * sidebar_current: &#34;docs-nomad-resource-dynamic-host-volume&#34;
 * description: |-
 *   Manages the lifecycle of creating and deleting dynamic host volumes.
 * ---
 * 
 * Creates and registers a dynamic host volume in Nomad. Note that Nomad supports
 * two workflows for dynamic host volumes: create and register. Both resources
 * result in the same data source with the same outputs.
 * 
 * &gt; **Warning:** Destroying this resource **will result in data loss**. Use the
 *   [`prevent_destroy`][tf_docs_prevent_destroy] directive to avoid accidental
 *   deletions.
 * 
 * ## Example Usage
 * 
 * Creating a dynamic host volume:
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.nomad.DynamicHostVolume;
 * import com.pulumi.nomad.DynamicHostVolumeArgs;
 * import com.pulumi.nomad.inputs.DynamicHostVolumeCapabilityArgs;
 * import com.pulumi.nomad.inputs.DynamicHostVolumeConstraintArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new DynamicHostVolume("example", DynamicHostVolumeArgs.builder()
 *             .name("example")
 *             .namespace("prod")
 *             .pluginId("mkdir")
 *             .capacityMax("12 GiB")
 *             .capacityMin("1.0 GiB")
 *             .capabilities(DynamicHostVolumeCapabilityArgs.builder()
 *                 .accessMode("single-node-writer")
 *                 .attachmentMode("file-system")
 *                 .build())
 *             .constraints(DynamicHostVolumeConstraintArgs.builder()
 *                 .attribute("${attr.kernel.name}")
 *                 .value("linux")
 *                 .build())
 *             .parameters(Map.of("some_key", "some_value"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="nomad:index/dynamicHostVolume:DynamicHostVolume")
public class DynamicHostVolume extends com.pulumi.resources.CustomResource {
    /**
     * `(block: &lt;optional&gt;)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    @Export(name="capabilities", refs={List.class,DynamicHostVolumeCapability.class}, tree="[0,1]")
    private Output<List<DynamicHostVolumeCapability>> capabilities;

    /**
     * @return `(block: &lt;optional&gt;)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    public Output<List<DynamicHostVolumeCapability>> capabilities() {
        return this.capabilities;
    }
    /**
     * Provisioned capacity
     * 
     */
    @Export(name="capacity", refs={String.class}, tree="[0]")
    private Output<String> capacity;

    /**
     * @return Provisioned capacity
     * 
     */
    public Output<String> capacity() {
        return this.capacity;
    }
    @Export(name="capacityBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> capacityBytes;

    public Output<Integer> capacityBytes() {
        return this.capacityBytes;
    }
    /**
     * `(string: &lt;optional&gt;)` - Option for requesting a maximum
     * capacity, in bytes. The capacity of a volume may be the physical size of a
     * disk, or a quota, depending on the plugin. The specific size of the resulting
     * volume is somewhere between `capacity_min` and `capacity_max`; the exact
     * behavior is up to the plugin. If you want to specify an exact size, set
     * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
     * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
     * may ignore this field.
     * 
     */
    @Export(name="capacityMax", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> capacityMax;

    /**
     * @return `(string: &lt;optional&gt;)` - Option for requesting a maximum
     * capacity, in bytes. The capacity of a volume may be the physical size of a
     * disk, or a quota, depending on the plugin. The specific size of the resulting
     * volume is somewhere between `capacity_min` and `capacity_max`; the exact
     * behavior is up to the plugin. If you want to specify an exact size, set
     * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
     * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
     * may ignore this field.
     * 
     */
    public Output<Optional<String>> capacityMax() {
        return Codegen.optional(this.capacityMax);
    }
    @Export(name="capacityMaxBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> capacityMaxBytes;

    public Output<Integer> capacityMaxBytes() {
        return this.capacityMaxBytes;
    }
    /**
     * `(string: &lt;optional&gt;)` - Option for requesting a minimum
     * capacity, in bytes. The capacity of a volume may be the physical size of a
     * disk, or a quota, depending on the plugin. The specific size of the resulting
     * volume is somewhere between `capacity_min` and `capacity_max`; the exact
     * behavior is up to the plugin. If you want to specify an exact size, set
     * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
     * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
     * may ignore this field.
     * 
     */
    @Export(name="capacityMin", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> capacityMin;

    /**
     * @return `(string: &lt;optional&gt;)` - Option for requesting a minimum
     * capacity, in bytes. The capacity of a volume may be the physical size of a
     * disk, or a quota, depending on the plugin. The specific size of the resulting
     * volume is somewhere between `capacity_min` and `capacity_max`; the exact
     * behavior is up to the plugin. If you want to specify an exact size, set
     * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
     * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
     * may ignore this field.
     * 
     */
    public Output<Optional<String>> capacityMin() {
        return Codegen.optional(this.capacityMin);
    }
    @Export(name="capacityMinBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> capacityMinBytes;

    public Output<Integer> capacityMinBytes() {
        return this.capacityMinBytes;
    }
    /**
     * `(block: &lt;optional&gt;)` - A restriction on the eligible nodes where
     * a volume can be created, similar to the [`constraint`][] block on a Nomad job
     * specification.. You can provide multiple `constraint` blocks to add more
     * constraints. Each constraint block has the following attributes.
     * 
     */
    @Export(name="constraints", refs={List.class,DynamicHostVolumeConstraint.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DynamicHostVolumeConstraint>> constraints;

    /**
     * @return `(block: &lt;optional&gt;)` - A restriction on the eligible nodes where
     * a volume can be created, similar to the [`constraint`][] block on a Nomad job
     * specification.. You can provide multiple `constraint` blocks to add more
     * constraints. Each constraint block has the following attributes.
     * 
     */
    public Output<Optional<List<DynamicHostVolumeConstraint>>> constraints() {
        return Codegen.optional(this.constraints);
    }
    /**
     * Host path
     * 
     */
    @Export(name="hostPath", refs={String.class}, tree="[0]")
    private Output<String> hostPath;

    /**
     * @return Host path
     * 
     */
    public Output<String> hostPath() {
        return this.hostPath;
    }
    /**
     * `(string: &lt;required&gt;)` - The name of the volume, which is used as the
     * [`volume.source`][volume_source] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return `(string: &lt;required&gt;)` - The name of the volume, which is used as the
     * [`volume.source`][volume_source] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * `(string: &lt;optional&gt;)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `&#34;default&#34;` if unset.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return `(string: &lt;optional&gt;)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `&#34;default&#34;` if unset.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * `(string: &lt;optional&gt;)` - A specific node where you would like the
     * volume to be created.
     * 
     */
    @Export(name="nodeId", refs={String.class}, tree="[0]")
    private Output<String> nodeId;

    /**
     * @return `(string: &lt;optional&gt;)` - A specific node where you would like the
     * volume to be created.
     * 
     */
    public Output<String> nodeId() {
        return this.nodeId;
    }
    /**
     * `(string: &lt;optional&gt;)` - A specific node pool where you would like
     * the volume to be created. If you also provide `node_id`, the node must be in the
     * provided `node_pool`.
     * 
     */
    @Export(name="nodePool", refs={String.class}, tree="[0]")
    private Output<String> nodePool;

    /**
     * @return `(string: &lt;optional&gt;)` - A specific node pool where you would like
     * the volume to be created. If you also provide `node_id`, the node must be in the
     * provided `node_pool`.
     * 
     */
    public Output<String> nodePool() {
        return this.nodePool;
    }
    /**
     * `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     */
    @Export(name="parameters", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> parameters;

    /**
     * @return `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     */
    public Output<Optional<Map<String,String>>> parameters() {
        return Codegen.optional(this.parameters);
    }
    /**
     * Plugin ID
     * 
     */
    @Export(name="pluginId", refs={String.class}, tree="[0]")
    private Output<String> pluginId;

    /**
     * @return Plugin ID
     * 
     */
    public Output<String> pluginId() {
        return this.pluginId;
    }
    /**
     * State
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return State
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DynamicHostVolume(java.lang.String name) {
        this(name, DynamicHostVolumeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DynamicHostVolume(java.lang.String name, DynamicHostVolumeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DynamicHostVolume(java.lang.String name, DynamicHostVolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("nomad:index/dynamicHostVolume:DynamicHostVolume", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DynamicHostVolume(java.lang.String name, Output<java.lang.String> id, @Nullable DynamicHostVolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("nomad:index/dynamicHostVolume:DynamicHostVolume", name, state, makeResourceOptions(options, id), false);
    }

    private static DynamicHostVolumeArgs makeArgs(DynamicHostVolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DynamicHostVolumeArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DynamicHostVolume get(java.lang.String name, Output<java.lang.String> id, @Nullable DynamicHostVolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DynamicHostVolume(name, id, state, options);
    }
}
