// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.nomad.Utilities;
import com.pulumi.nomad.inputs.GetAclPoliciesArgs;
import com.pulumi.nomad.inputs.GetAclPoliciesPlainArgs;
import com.pulumi.nomad.inputs.GetAclPolicyArgs;
import com.pulumi.nomad.inputs.GetAclPolicyPlainArgs;
import com.pulumi.nomad.inputs.GetAclRoleArgs;
import com.pulumi.nomad.inputs.GetAclRolePlainArgs;
import com.pulumi.nomad.inputs.GetAclRolesArgs;
import com.pulumi.nomad.inputs.GetAclRolesPlainArgs;
import com.pulumi.nomad.inputs.GetAclTokenArgs;
import com.pulumi.nomad.inputs.GetAclTokenPlainArgs;
import com.pulumi.nomad.inputs.GetAclTokensArgs;
import com.pulumi.nomad.inputs.GetAclTokensPlainArgs;
import com.pulumi.nomad.inputs.GetAllocationsArgs;
import com.pulumi.nomad.inputs.GetAllocationsPlainArgs;
import com.pulumi.nomad.inputs.GetDatacentersArgs;
import com.pulumi.nomad.inputs.GetDatacentersPlainArgs;
import com.pulumi.nomad.inputs.GetJobArgs;
import com.pulumi.nomad.inputs.GetJobParserArgs;
import com.pulumi.nomad.inputs.GetJobParserPlainArgs;
import com.pulumi.nomad.inputs.GetJobPlainArgs;
import com.pulumi.nomad.inputs.GetNamespaceArgs;
import com.pulumi.nomad.inputs.GetNamespacePlainArgs;
import com.pulumi.nomad.inputs.GetNodePoolArgs;
import com.pulumi.nomad.inputs.GetNodePoolPlainArgs;
import com.pulumi.nomad.inputs.GetNodePoolsArgs;
import com.pulumi.nomad.inputs.GetNodePoolsPlainArgs;
import com.pulumi.nomad.inputs.GetPluginArgs;
import com.pulumi.nomad.inputs.GetPluginPlainArgs;
import com.pulumi.nomad.inputs.GetPluginsArgs;
import com.pulumi.nomad.inputs.GetPluginsPlainArgs;
import com.pulumi.nomad.inputs.GetScalingPoliciesArgs;
import com.pulumi.nomad.inputs.GetScalingPoliciesPlainArgs;
import com.pulumi.nomad.inputs.GetScalingPolicyArgs;
import com.pulumi.nomad.inputs.GetScalingPolicyPlainArgs;
import com.pulumi.nomad.inputs.GetVariableArgs;
import com.pulumi.nomad.inputs.GetVariablePlainArgs;
import com.pulumi.nomad.inputs.GetVolumesArgs;
import com.pulumi.nomad.inputs.GetVolumesPlainArgs;
import com.pulumi.nomad.outputs.GetAclPoliciesResult;
import com.pulumi.nomad.outputs.GetAclPolicyResult;
import com.pulumi.nomad.outputs.GetAclRoleResult;
import com.pulumi.nomad.outputs.GetAclRolesResult;
import com.pulumi.nomad.outputs.GetAclTokenResult;
import com.pulumi.nomad.outputs.GetAclTokensResult;
import com.pulumi.nomad.outputs.GetAllocationsResult;
import com.pulumi.nomad.outputs.GetDatacentersResult;
import com.pulumi.nomad.outputs.GetDeploymentsResult;
import com.pulumi.nomad.outputs.GetJobParserResult;
import com.pulumi.nomad.outputs.GetJobResult;
import com.pulumi.nomad.outputs.GetJwksResult;
import com.pulumi.nomad.outputs.GetNamespaceResult;
import com.pulumi.nomad.outputs.GetNamespacesResult;
import com.pulumi.nomad.outputs.GetNodePoolResult;
import com.pulumi.nomad.outputs.GetNodePoolsResult;
import com.pulumi.nomad.outputs.GetPluginResult;
import com.pulumi.nomad.outputs.GetPluginsResult;
import com.pulumi.nomad.outputs.GetRegionsResult;
import com.pulumi.nomad.outputs.GetScalingPoliciesResult;
import com.pulumi.nomad.outputs.GetScalingPolicyResult;
import com.pulumi.nomad.outputs.GetSchedulerPolicyResult;
import com.pulumi.nomad.outputs.GetVariableResult;
import com.pulumi.nomad.outputs.GetVolumesResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class NomadFunctions {
    /**
     * Retrieve a list of ACL Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclPolicies(GetAclPoliciesArgs.builder()
     *             .prefix("prod")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclPoliciesResult> getAclPolicies() {
        return getAclPolicies(GetAclPoliciesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of ACL Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclPolicies(GetAclPoliciesArgs.builder()
     *             .prefix("prod")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclPoliciesResult> getAclPoliciesPlain() {
        return getAclPoliciesPlain(GetAclPoliciesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of ACL Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclPolicies(GetAclPoliciesArgs.builder()
     *             .prefix("prod")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclPoliciesResult> getAclPolicies(GetAclPoliciesArgs args) {
        return getAclPolicies(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of ACL Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclPolicies(GetAclPoliciesArgs.builder()
     *             .prefix("prod")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclPoliciesResult> getAclPoliciesPlain(GetAclPoliciesPlainArgs args) {
        return getAclPoliciesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of ACL Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclPolicies(GetAclPoliciesArgs.builder()
     *             .prefix("prod")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclPoliciesResult> getAclPolicies(GetAclPoliciesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclPolicies:getAclPolicies", TypeShape.of(GetAclPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of ACL Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclPolicies(GetAclPoliciesArgs.builder()
     *             .prefix("prod")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclPoliciesResult> getAclPolicies(GetAclPoliciesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclPolicies:getAclPolicies", TypeShape.of(GetAclPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of ACL Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclPolicies(GetAclPoliciesArgs.builder()
     *             .prefix("prod")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclPoliciesResult> getAclPoliciesPlain(GetAclPoliciesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getAclPolicies:getAclPolicies", TypeShape.of(GetAclPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information on an ACL Policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myPolicy = NomadFunctions.getAclPolicy(GetAclPolicyArgs.builder()
     *             .name("my-policy")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclPolicyResult> getAclPolicy(GetAclPolicyArgs args) {
        return getAclPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve information on an ACL Policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myPolicy = NomadFunctions.getAclPolicy(GetAclPolicyArgs.builder()
     *             .name("my-policy")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclPolicyResult> getAclPolicyPlain(GetAclPolicyPlainArgs args) {
        return getAclPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve information on an ACL Policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myPolicy = NomadFunctions.getAclPolicy(GetAclPolicyArgs.builder()
     *             .name("my-policy")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclPolicyResult> getAclPolicy(GetAclPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclPolicy:getAclPolicy", TypeShape.of(GetAclPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information on an ACL Policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myPolicy = NomadFunctions.getAclPolicy(GetAclPolicyArgs.builder()
     *             .name("my-policy")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclPolicyResult> getAclPolicy(GetAclPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclPolicy:getAclPolicy", TypeShape.of(GetAclPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information on an ACL Policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myPolicy = NomadFunctions.getAclPolicy(GetAclPolicyArgs.builder()
     *             .name("my-policy")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclPolicyResult> getAclPolicyPlain(GetAclPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getAclPolicy:getAclPolicy", TypeShape.of(GetAclPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on an ACL Role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRole(GetAclRoleArgs.builder()
     *             .id("aa534e09-6a07-0a45-2295-a7f77063d429")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclRoleResult> getAclRole(GetAclRoleArgs args) {
        return getAclRole(args, InvokeOptions.Empty);
    }
    /**
     * Get information on an ACL Role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRole(GetAclRoleArgs.builder()
     *             .id("aa534e09-6a07-0a45-2295-a7f77063d429")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclRoleResult> getAclRolePlain(GetAclRolePlainArgs args) {
        return getAclRolePlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on an ACL Role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRole(GetAclRoleArgs.builder()
     *             .id("aa534e09-6a07-0a45-2295-a7f77063d429")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclRoleResult> getAclRole(GetAclRoleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclRole:getAclRole", TypeShape.of(GetAclRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on an ACL Role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRole(GetAclRoleArgs.builder()
     *             .id("aa534e09-6a07-0a45-2295-a7f77063d429")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclRoleResult> getAclRole(GetAclRoleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclRole:getAclRole", TypeShape.of(GetAclRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on an ACL Role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRole(GetAclRoleArgs.builder()
     *             .id("aa534e09-6a07-0a45-2295-a7f77063d429")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclRoleResult> getAclRolePlain(GetAclRolePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getAclRole:getAclRole", TypeShape.of(GetAclRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of ACL Roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRoles(GetAclRolesArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclRolesResult> getAclRoles() {
        return getAclRoles(GetAclRolesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of ACL Roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRoles(GetAclRolesArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclRolesResult> getAclRolesPlain() {
        return getAclRolesPlain(GetAclRolesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of ACL Roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRoles(GetAclRolesArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclRolesResult> getAclRoles(GetAclRolesArgs args) {
        return getAclRoles(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of ACL Roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRoles(GetAclRolesArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclRolesResult> getAclRolesPlain(GetAclRolesPlainArgs args) {
        return getAclRolesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of ACL Roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRoles(GetAclRolesArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclRolesResult> getAclRoles(GetAclRolesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclRoles:getAclRoles", TypeShape.of(GetAclRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of ACL Roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRoles(GetAclRolesArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclRolesResult> getAclRoles(GetAclRolesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclRoles:getAclRoles", TypeShape.of(GetAclRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of ACL Roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAclRoles(GetAclRolesArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclRolesResult> getAclRolesPlain(GetAclRolesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getAclRoles:getAclRoles", TypeShape.of(GetAclRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myToken = NomadFunctions.getAclToken(GetAclTokenArgs.builder()
     *             .accessorId("aa534e09-6a07-0a45-2295-a7f77063d429")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclTokenResult> getAclToken(GetAclTokenArgs args) {
        return getAclToken(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myToken = NomadFunctions.getAclToken(GetAclTokenArgs.builder()
     *             .accessorId("aa534e09-6a07-0a45-2295-a7f77063d429")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclTokenResult> getAclTokenPlain(GetAclTokenPlainArgs args) {
        return getAclTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myToken = NomadFunctions.getAclToken(GetAclTokenArgs.builder()
     *             .accessorId("aa534e09-6a07-0a45-2295-a7f77063d429")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclTokenResult> getAclToken(GetAclTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclToken:getAclToken", TypeShape.of(GetAclTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myToken = NomadFunctions.getAclToken(GetAclTokenArgs.builder()
     *             .accessorId("aa534e09-6a07-0a45-2295-a7f77063d429")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclTokenResult> getAclToken(GetAclTokenArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclToken:getAclToken", TypeShape.of(GetAclTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myToken = NomadFunctions.getAclToken(GetAclTokenArgs.builder()
     *             .accessorId("aa534e09-6a07-0a45-2295-a7f77063d429")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclTokenResult> getAclTokenPlain(GetAclTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getAclToken:getAclToken", TypeShape.of(GetAclTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get a list of ACL tokens.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tokens = NomadFunctions.getAclTokens(GetAclTokensArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclTokensResult> getAclTokens() {
        return getAclTokens(GetAclTokensArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get a list of ACL tokens.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tokens = NomadFunctions.getAclTokens(GetAclTokensArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclTokensResult> getAclTokensPlain() {
        return getAclTokensPlain(GetAclTokensPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get a list of ACL tokens.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tokens = NomadFunctions.getAclTokens(GetAclTokensArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclTokensResult> getAclTokens(GetAclTokensArgs args) {
        return getAclTokens(args, InvokeOptions.Empty);
    }
    /**
     * Get a list of ACL tokens.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tokens = NomadFunctions.getAclTokens(GetAclTokensArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclTokensResult> getAclTokensPlain(GetAclTokensPlainArgs args) {
        return getAclTokensPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get a list of ACL tokens.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tokens = NomadFunctions.getAclTokens(GetAclTokensArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclTokensResult> getAclTokens(GetAclTokensArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclTokens:getAclTokens", TypeShape.of(GetAclTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get a list of ACL tokens.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tokens = NomadFunctions.getAclTokens(GetAclTokensArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAclTokensResult> getAclTokens(GetAclTokensArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAclTokens:getAclTokens", TypeShape.of(GetAclTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get a list of ACL tokens.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAclTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tokens = NomadFunctions.getAclTokens(GetAclTokensArgs.builder()
     *             .prefix("a242")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAclTokensResult> getAclTokensPlain(GetAclTokensPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getAclTokens:getAclTokens", TypeShape.of(GetAclTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of allocations from Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAllocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAllocations(GetAllocationsArgs.builder()
     *             .filter("JobID == \"example\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAllocationsResult> getAllocations() {
        return getAllocations(GetAllocationsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of allocations from Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAllocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAllocations(GetAllocationsArgs.builder()
     *             .filter("JobID == \"example\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAllocationsResult> getAllocationsPlain() {
        return getAllocationsPlain(GetAllocationsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of allocations from Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAllocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAllocations(GetAllocationsArgs.builder()
     *             .filter("JobID == \"example\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAllocationsResult> getAllocations(GetAllocationsArgs args) {
        return getAllocations(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of allocations from Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAllocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAllocations(GetAllocationsArgs.builder()
     *             .filter("JobID == \"example\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAllocationsResult> getAllocationsPlain(GetAllocationsPlainArgs args) {
        return getAllocationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of allocations from Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAllocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAllocations(GetAllocationsArgs.builder()
     *             .filter("JobID == \"example\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAllocationsResult> getAllocations(GetAllocationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAllocations:getAllocations", TypeShape.of(GetAllocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of allocations from Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAllocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAllocations(GetAllocationsArgs.builder()
     *             .filter("JobID == \"example\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAllocationsResult> getAllocations(GetAllocationsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getAllocations:getAllocations", TypeShape.of(GetAllocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of allocations from Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetAllocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getAllocations(GetAllocationsArgs.builder()
     *             .filter("JobID == \"example\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAllocationsResult> getAllocationsPlain(GetAllocationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getAllocations:getAllocations", TypeShape.of(GetAllocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of datacenters.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetDatacentersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var datacenters = NomadFunctions.getDatacenters(GetDatacentersArgs.builder()
     *             .prefix("prod")
     *             .ignoreDownNodes(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatacentersResult> getDatacenters() {
        return getDatacenters(GetDatacentersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of datacenters.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetDatacentersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var datacenters = NomadFunctions.getDatacenters(GetDatacentersArgs.builder()
     *             .prefix("prod")
     *             .ignoreDownNodes(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDatacentersResult> getDatacentersPlain() {
        return getDatacentersPlain(GetDatacentersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of datacenters.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetDatacentersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var datacenters = NomadFunctions.getDatacenters(GetDatacentersArgs.builder()
     *             .prefix("prod")
     *             .ignoreDownNodes(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatacentersResult> getDatacenters(GetDatacentersArgs args) {
        return getDatacenters(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of datacenters.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetDatacentersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var datacenters = NomadFunctions.getDatacenters(GetDatacentersArgs.builder()
     *             .prefix("prod")
     *             .ignoreDownNodes(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDatacentersResult> getDatacentersPlain(GetDatacentersPlainArgs args) {
        return getDatacentersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of datacenters.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetDatacentersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var datacenters = NomadFunctions.getDatacenters(GetDatacentersArgs.builder()
     *             .prefix("prod")
     *             .ignoreDownNodes(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatacentersResult> getDatacenters(GetDatacentersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getDatacenters:getDatacenters", TypeShape.of(GetDatacentersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of datacenters.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetDatacentersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var datacenters = NomadFunctions.getDatacenters(GetDatacentersArgs.builder()
     *             .prefix("prod")
     *             .ignoreDownNodes(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatacentersResult> getDatacenters(GetDatacentersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getDatacenters:getDatacenters", TypeShape.of(GetDatacentersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of datacenters.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetDatacentersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var datacenters = NomadFunctions.getDatacenters(GetDatacentersArgs.builder()
     *             .prefix("prod")
     *             .ignoreDownNodes(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDatacentersResult> getDatacentersPlain(GetDatacentersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getDatacenters:getDatacenters", TypeShape.of(GetDatacentersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of deployments in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getDeployments(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDeploymentsResult> getDeployments() {
        return getDeployments(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of deployments in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getDeployments(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDeploymentsResult> getDeploymentsPlain() {
        return getDeploymentsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of deployments in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getDeployments(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDeploymentsResult> getDeployments(InvokeArgs args) {
        return getDeployments(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of deployments in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getDeployments(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDeploymentsResult> getDeploymentsPlain(InvokeArgs args) {
        return getDeploymentsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of deployments in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getDeployments(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDeploymentsResult> getDeployments(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getDeployments:getDeployments", TypeShape.of(GetDeploymentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of deployments in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getDeployments(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDeploymentsResult> getDeployments(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getDeployments:getDeployments", TypeShape.of(GetDeploymentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of deployments in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getDeployments(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDeploymentsResult> getDeploymentsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getDeployments:getDeployments", TypeShape.of(GetDeploymentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a job ID. The aim of this datasource is to enable
     * you to act on various settings and states of a particular job.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetJobArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJob(GetJobArgs.builder()
     *             .jobId("example")
     *             .namespace("dev")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJobResult> getJob(GetJobArgs args) {
        return getJob(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a job ID. The aim of this datasource is to enable
     * you to act on various settings and states of a particular job.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetJobArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJob(GetJobArgs.builder()
     *             .jobId("example")
     *             .namespace("dev")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJobResult> getJobPlain(GetJobPlainArgs args) {
        return getJobPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a job ID. The aim of this datasource is to enable
     * you to act on various settings and states of a particular job.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetJobArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJob(GetJobArgs.builder()
     *             .jobId("example")
     *             .namespace("dev")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJobResult> getJob(GetJobArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getJob:getJob", TypeShape.of(GetJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a job ID. The aim of this datasource is to enable
     * you to act on various settings and states of a particular job.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetJobArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJob(GetJobArgs.builder()
     *             .jobId("example")
     *             .namespace("dev")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJobResult> getJob(GetJobArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getJob:getJob", TypeShape.of(GetJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a job ID. The aim of this datasource is to enable
     * you to act on various settings and states of a particular job.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetJobArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJob(GetJobArgs.builder()
     *             .jobId("example")
     *             .namespace("dev")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJobResult> getJobPlain(GetJobPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getJob:getJob", TypeShape.of(GetJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Parse a HCL jobspec and produce the equivalent JSON encoded job.
     * 
     */
    public static Output<GetJobParserResult> getJobParser(GetJobParserArgs args) {
        return getJobParser(args, InvokeOptions.Empty);
    }
    /**
     * Parse a HCL jobspec and produce the equivalent JSON encoded job.
     * 
     */
    public static CompletableFuture<GetJobParserResult> getJobParserPlain(GetJobParserPlainArgs args) {
        return getJobParserPlain(args, InvokeOptions.Empty);
    }
    /**
     * Parse a HCL jobspec and produce the equivalent JSON encoded job.
     * 
     */
    public static Output<GetJobParserResult> getJobParser(GetJobParserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getJobParser:getJobParser", TypeShape.of(GetJobParserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Parse a HCL jobspec and produce the equivalent JSON encoded job.
     * 
     */
    public static Output<GetJobParserResult> getJobParser(GetJobParserArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getJobParser:getJobParser", TypeShape.of(GetJobParserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Parse a HCL jobspec and produce the equivalent JSON encoded job.
     * 
     */
    public static CompletableFuture<GetJobParserResult> getJobParserPlain(GetJobParserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getJobParser:getJobParser", TypeShape.of(GetJobParserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve the cluster JWKS public keys.
     * 
     * The keys are returned both as a list of maps (`keys`), and as a list of PEM-encoded strings
     * (`pem_keys`), which may be more convenient for use.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJwks(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJwksResult> getJwks() {
        return getJwks(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve the cluster JWKS public keys.
     * 
     * The keys are returned both as a list of maps (`keys`), and as a list of PEM-encoded strings
     * (`pem_keys`), which may be more convenient for use.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJwks(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJwksResult> getJwksPlain() {
        return getJwksPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve the cluster JWKS public keys.
     * 
     * The keys are returned both as a list of maps (`keys`), and as a list of PEM-encoded strings
     * (`pem_keys`), which may be more convenient for use.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJwks(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJwksResult> getJwks(InvokeArgs args) {
        return getJwks(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve the cluster JWKS public keys.
     * 
     * The keys are returned both as a list of maps (`keys`), and as a list of PEM-encoded strings
     * (`pem_keys`), which may be more convenient for use.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJwks(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJwksResult> getJwksPlain(InvokeArgs args) {
        return getJwksPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve the cluster JWKS public keys.
     * 
     * The keys are returned both as a list of maps (`keys`), and as a list of PEM-encoded strings
     * (`pem_keys`), which may be more convenient for use.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJwks(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJwksResult> getJwks(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getJwks:getJwks", TypeShape.of(GetJwksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve the cluster JWKS public keys.
     * 
     * The keys are returned both as a list of maps (`keys`), and as a list of PEM-encoded strings
     * (`pem_keys`), which may be more convenient for use.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJwks(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJwksResult> getJwks(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getJwks:getJwks", TypeShape.of(GetJwksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve the cluster JWKS public keys.
     * 
     * The keys are returned both as a list of maps (`keys`), and as a list of PEM-encoded strings
     * (`pem_keys`), which may be more convenient for use.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getJwks(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJwksResult> getJwksPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getJwks:getJwks", TypeShape.of(GetJwksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a namespace in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .name("default")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNamespaceResult> getNamespace(GetNamespaceArgs args) {
        return getNamespace(args, InvokeOptions.Empty);
    }
    /**
     * Get information about a namespace in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .name("default")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNamespaceResult> getNamespacePlain(GetNamespacePlainArgs args) {
        return getNamespacePlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information about a namespace in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .name("default")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNamespaceResult> getNamespace(GetNamespaceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getNamespace:getNamespace", TypeShape.of(GetNamespaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a namespace in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .name("default")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNamespaceResult> getNamespace(GetNamespaceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getNamespace:getNamespace", TypeShape.of(GetNamespaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a namespace in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .name("default")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNamespaceResult> getNamespacePlain(GetNamespacePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getNamespace:getNamespace", TypeShape.of(GetNamespaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of namespaces available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.AclPolicy;
     * import com.pulumi.nomad.AclPolicyArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespaces(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         for (var i = 0; i < namespaces.namespaces().length(); i++) {
     *             new AclPolicy("namespace-" + i, AclPolicyArgs.builder()
     *                 .name(String.format("namespace-%s", namespaces[range.value()]))
     *                 .description(String.format("Write to the namespace %s", namespaces[range.value()]))
     *                 .rulesHcl("""
     * namespace "%s" {
     *   policy = "write"
     * }
     * ", namespaces[range.value()]))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNamespacesResult> getNamespaces() {
        return getNamespaces(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of namespaces available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.AclPolicy;
     * import com.pulumi.nomad.AclPolicyArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespaces(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         for (var i = 0; i < namespaces.namespaces().length(); i++) {
     *             new AclPolicy("namespace-" + i, AclPolicyArgs.builder()
     *                 .name(String.format("namespace-%s", namespaces[range.value()]))
     *                 .description(String.format("Write to the namespace %s", namespaces[range.value()]))
     *                 .rulesHcl("""
     * namespace "%s" {
     *   policy = "write"
     * }
     * ", namespaces[range.value()]))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNamespacesResult> getNamespacesPlain() {
        return getNamespacesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of namespaces available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.AclPolicy;
     * import com.pulumi.nomad.AclPolicyArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespaces(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         for (var i = 0; i < namespaces.namespaces().length(); i++) {
     *             new AclPolicy("namespace-" + i, AclPolicyArgs.builder()
     *                 .name(String.format("namespace-%s", namespaces[range.value()]))
     *                 .description(String.format("Write to the namespace %s", namespaces[range.value()]))
     *                 .rulesHcl("""
     * namespace "%s" {
     *   policy = "write"
     * }
     * ", namespaces[range.value()]))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNamespacesResult> getNamespaces(InvokeArgs args) {
        return getNamespaces(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of namespaces available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.AclPolicy;
     * import com.pulumi.nomad.AclPolicyArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespaces(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         for (var i = 0; i < namespaces.namespaces().length(); i++) {
     *             new AclPolicy("namespace-" + i, AclPolicyArgs.builder()
     *                 .name(String.format("namespace-%s", namespaces[range.value()]))
     *                 .description(String.format("Write to the namespace %s", namespaces[range.value()]))
     *                 .rulesHcl("""
     * namespace "%s" {
     *   policy = "write"
     * }
     * ", namespaces[range.value()]))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNamespacesResult> getNamespacesPlain(InvokeArgs args) {
        return getNamespacesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of namespaces available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.AclPolicy;
     * import com.pulumi.nomad.AclPolicyArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespaces(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         for (var i = 0; i < namespaces.namespaces().length(); i++) {
     *             new AclPolicy("namespace-" + i, AclPolicyArgs.builder()
     *                 .name(String.format("namespace-%s", namespaces[range.value()]))
     *                 .description(String.format("Write to the namespace %s", namespaces[range.value()]))
     *                 .rulesHcl("""
     * namespace "%s" {
     *   policy = "write"
     * }
     * ", namespaces[range.value()]))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNamespacesResult> getNamespaces(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getNamespaces:getNamespaces", TypeShape.of(GetNamespacesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of namespaces available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.AclPolicy;
     * import com.pulumi.nomad.AclPolicyArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespaces(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         for (var i = 0; i < namespaces.namespaces().length(); i++) {
     *             new AclPolicy("namespace-" + i, AclPolicyArgs.builder()
     *                 .name(String.format("namespace-%s", namespaces[range.value()]))
     *                 .description(String.format("Write to the namespace %s", namespaces[range.value()]))
     *                 .rulesHcl("""
     * namespace "%s" {
     *   policy = "write"
     * }
     * ", namespaces[range.value()]))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNamespacesResult> getNamespaces(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getNamespaces:getNamespaces", TypeShape.of(GetNamespacesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of namespaces available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.AclPolicy;
     * import com.pulumi.nomad.AclPolicyArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var namespaces = NomadFunctions.getNamespaces(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         for (var i = 0; i < namespaces.namespaces().length(); i++) {
     *             new AclPolicy("namespace-" + i, AclPolicyArgs.builder()
     *                 .name(String.format("namespace-%s", namespaces[range.value()]))
     *                 .description(String.format("Write to the namespace %s", namespaces[range.value()]))
     *                 .rulesHcl("""
     * namespace "%s" {
     *   policy = "write"
     * }
     * ", namespaces[range.value()]))
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNamespacesResult> getNamespacesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getNamespaces:getNamespaces", TypeShape.of(GetNamespacesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a node pool in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dev = NomadFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .name("dev")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolResult> getNodePool(GetNodePoolArgs args) {
        return getNodePool(args, InvokeOptions.Empty);
    }
    /**
     * Get information about a node pool in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dev = NomadFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .name("dev")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodePoolResult> getNodePoolPlain(GetNodePoolPlainArgs args) {
        return getNodePoolPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information about a node pool in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dev = NomadFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .name("dev")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolResult> getNodePool(GetNodePoolArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getNodePool:getNodePool", TypeShape.of(GetNodePoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a node pool in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dev = NomadFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .name("dev")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolResult> getNodePool(GetNodePoolArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getNodePool:getNodePool", TypeShape.of(GetNodePoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a node pool in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dev = NomadFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .name("dev")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodePoolResult> getNodePoolPlain(GetNodePoolPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getNodePool:getNodePool", TypeShape.of(GetNodePoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of node pools available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prod = NomadFunctions.getNodePools(GetNodePoolsArgs.builder()
     *             .filter("Meta.env == \"prod\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolsResult> getNodePools() {
        return getNodePools(GetNodePoolsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of node pools available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prod = NomadFunctions.getNodePools(GetNodePoolsArgs.builder()
     *             .filter("Meta.env == \"prod\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodePoolsResult> getNodePoolsPlain() {
        return getNodePoolsPlain(GetNodePoolsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of node pools available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prod = NomadFunctions.getNodePools(GetNodePoolsArgs.builder()
     *             .filter("Meta.env == \"prod\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolsResult> getNodePools(GetNodePoolsArgs args) {
        return getNodePools(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of node pools available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prod = NomadFunctions.getNodePools(GetNodePoolsArgs.builder()
     *             .filter("Meta.env == \"prod\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodePoolsResult> getNodePoolsPlain(GetNodePoolsPlainArgs args) {
        return getNodePoolsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of node pools available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prod = NomadFunctions.getNodePools(GetNodePoolsArgs.builder()
     *             .filter("Meta.env == \"prod\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolsResult> getNodePools(GetNodePoolsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getNodePools:getNodePools", TypeShape.of(GetNodePoolsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of node pools available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prod = NomadFunctions.getNodePools(GetNodePoolsArgs.builder()
     *             .filter("Meta.env == \"prod\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolsResult> getNodePools(GetNodePoolsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getNodePools:getNodePools", TypeShape.of(GetNodePoolsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of node pools available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetNodePoolsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var prod = NomadFunctions.getNodePools(GetNodePoolsArgs.builder()
     *             .filter("Meta.env == \"prod\"")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodePoolsResult> getNodePoolsPlain(GetNodePoolsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getNodePools:getNodePools", TypeShape.of(GetNodePoolsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Lookup a plugin by ID. The aim of this datasource is to determine whether
     * a particular plugin exists on the cluster, to find information on the health
     * and availability of the plugin, and to optionally wait for the plugin
     * before performing actions the require an available plugin controller.
     * 
     * If a plugin with the specified ID does not exist and the datasource is not
     * configured to wait, it will result in an error. For simple existence checks,
     * use the `nomad.getPlugins` listing datasource.
     * 
     * ## Example Usage
     * 
     * Check for the existence of a plugin:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ebs = NomadFunctions.getPlugin(GetPluginArgs.builder()
     *             .pluginId("aws-ebs0")
     *             .waitForHealthy(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will check for a plugin with the ID `aws-ebs0`, waiting until the plugin
     * is healthy before returning.
     * 
     */
    public static Output<GetPluginResult> getPlugin(GetPluginArgs args) {
        return getPlugin(args, InvokeOptions.Empty);
    }
    /**
     * Lookup a plugin by ID. The aim of this datasource is to determine whether
     * a particular plugin exists on the cluster, to find information on the health
     * and availability of the plugin, and to optionally wait for the plugin
     * before performing actions the require an available plugin controller.
     * 
     * If a plugin with the specified ID does not exist and the datasource is not
     * configured to wait, it will result in an error. For simple existence checks,
     * use the `nomad.getPlugins` listing datasource.
     * 
     * ## Example Usage
     * 
     * Check for the existence of a plugin:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ebs = NomadFunctions.getPlugin(GetPluginArgs.builder()
     *             .pluginId("aws-ebs0")
     *             .waitForHealthy(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will check for a plugin with the ID `aws-ebs0`, waiting until the plugin
     * is healthy before returning.
     * 
     */
    public static CompletableFuture<GetPluginResult> getPluginPlain(GetPluginPlainArgs args) {
        return getPluginPlain(args, InvokeOptions.Empty);
    }
    /**
     * Lookup a plugin by ID. The aim of this datasource is to determine whether
     * a particular plugin exists on the cluster, to find information on the health
     * and availability of the plugin, and to optionally wait for the plugin
     * before performing actions the require an available plugin controller.
     * 
     * If a plugin with the specified ID does not exist and the datasource is not
     * configured to wait, it will result in an error. For simple existence checks,
     * use the `nomad.getPlugins` listing datasource.
     * 
     * ## Example Usage
     * 
     * Check for the existence of a plugin:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ebs = NomadFunctions.getPlugin(GetPluginArgs.builder()
     *             .pluginId("aws-ebs0")
     *             .waitForHealthy(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will check for a plugin with the ID `aws-ebs0`, waiting until the plugin
     * is healthy before returning.
     * 
     */
    public static Output<GetPluginResult> getPlugin(GetPluginArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getPlugin:getPlugin", TypeShape.of(GetPluginResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Lookup a plugin by ID. The aim of this datasource is to determine whether
     * a particular plugin exists on the cluster, to find information on the health
     * and availability of the plugin, and to optionally wait for the plugin
     * before performing actions the require an available plugin controller.
     * 
     * If a plugin with the specified ID does not exist and the datasource is not
     * configured to wait, it will result in an error. For simple existence checks,
     * use the `nomad.getPlugins` listing datasource.
     * 
     * ## Example Usage
     * 
     * Check for the existence of a plugin:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ebs = NomadFunctions.getPlugin(GetPluginArgs.builder()
     *             .pluginId("aws-ebs0")
     *             .waitForHealthy(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will check for a plugin with the ID `aws-ebs0`, waiting until the plugin
     * is healthy before returning.
     * 
     */
    public static Output<GetPluginResult> getPlugin(GetPluginArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getPlugin:getPlugin", TypeShape.of(GetPluginResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Lookup a plugin by ID. The aim of this datasource is to determine whether
     * a particular plugin exists on the cluster, to find information on the health
     * and availability of the plugin, and to optionally wait for the plugin
     * before performing actions the require an available plugin controller.
     * 
     * If a plugin with the specified ID does not exist and the datasource is not
     * configured to wait, it will result in an error. For simple existence checks,
     * use the `nomad.getPlugins` listing datasource.
     * 
     * ## Example Usage
     * 
     * Check for the existence of a plugin:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ebs = NomadFunctions.getPlugin(GetPluginArgs.builder()
     *             .pluginId("aws-ebs0")
     *             .waitForHealthy(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will check for a plugin with the ID `aws-ebs0`, waiting until the plugin
     * is healthy before returning.
     * 
     */
    public static CompletableFuture<GetPluginResult> getPluginPlain(GetPluginPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getPlugin:getPlugin", TypeShape.of(GetPluginResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of dynamic plugins in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getPlugins(GetPluginsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPluginsResult> getPlugins() {
        return getPlugins(GetPluginsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of dynamic plugins in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getPlugins(GetPluginsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPluginsResult> getPluginsPlain() {
        return getPluginsPlain(GetPluginsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of dynamic plugins in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getPlugins(GetPluginsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPluginsResult> getPlugins(GetPluginsArgs args) {
        return getPlugins(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of dynamic plugins in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getPlugins(GetPluginsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPluginsResult> getPluginsPlain(GetPluginsPlainArgs args) {
        return getPluginsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of dynamic plugins in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getPlugins(GetPluginsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPluginsResult> getPlugins(GetPluginsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getPlugins:getPlugins", TypeShape.of(GetPluginsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of dynamic plugins in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getPlugins(GetPluginsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPluginsResult> getPlugins(GetPluginsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getPlugins:getPlugins", TypeShape.of(GetPluginsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of dynamic plugins in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetPluginsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getPlugins(GetPluginsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPluginsResult> getPluginsPlain(GetPluginsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getPlugins:getPlugins", TypeShape.of(GetPluginsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of regions available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRegionsResult> getRegions() {
        return getRegions(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of regions available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRegionsResult> getRegionsPlain() {
        return getRegionsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of regions available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRegionsResult> getRegions(InvokeArgs args) {
        return getRegions(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of regions available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRegionsResult> getRegionsPlain(InvokeArgs args) {
        return getRegionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of regions available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRegionsResult> getRegions(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getRegions:getRegions", TypeShape.of(GetRegionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of regions available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRegionsResult> getRegions(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getRegions:getRegions", TypeShape.of(GetRegionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of regions available in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRegionsResult> getRegionsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getRegions:getRegions", TypeShape.of(GetRegionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of Scaling Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicies(GetScalingPoliciesArgs.builder()
     *             .jobId("webapp")
     *             .type("horizontal")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetScalingPoliciesResult> getScalingPolicies() {
        return getScalingPolicies(GetScalingPoliciesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of Scaling Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicies(GetScalingPoliciesArgs.builder()
     *             .jobId("webapp")
     *             .type("horizontal")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetScalingPoliciesResult> getScalingPoliciesPlain() {
        return getScalingPoliciesPlain(GetScalingPoliciesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of Scaling Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicies(GetScalingPoliciesArgs.builder()
     *             .jobId("webapp")
     *             .type("horizontal")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetScalingPoliciesResult> getScalingPolicies(GetScalingPoliciesArgs args) {
        return getScalingPolicies(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of Scaling Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicies(GetScalingPoliciesArgs.builder()
     *             .jobId("webapp")
     *             .type("horizontal")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetScalingPoliciesResult> getScalingPoliciesPlain(GetScalingPoliciesPlainArgs args) {
        return getScalingPoliciesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of Scaling Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicies(GetScalingPoliciesArgs.builder()
     *             .jobId("webapp")
     *             .type("horizontal")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetScalingPoliciesResult> getScalingPolicies(GetScalingPoliciesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getScalingPolicies:getScalingPolicies", TypeShape.of(GetScalingPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of Scaling Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicies(GetScalingPoliciesArgs.builder()
     *             .jobId("webapp")
     *             .type("horizontal")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetScalingPoliciesResult> getScalingPolicies(GetScalingPoliciesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getScalingPolicies:getScalingPolicies", TypeShape.of(GetScalingPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of Scaling Policies.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicies(GetScalingPoliciesArgs.builder()
     *             .jobId("webapp")
     *             .type("horizontal")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetScalingPoliciesResult> getScalingPoliciesPlain(GetScalingPoliciesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getScalingPolicies:getScalingPolicies", TypeShape.of(GetScalingPoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a Scaling Policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicy(GetScalingPolicyArgs.builder()
     *             .id("ad19848d-1921-179c-affa-244a3543be88")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetScalingPolicyResult> getScalingPolicy(GetScalingPolicyArgs args) {
        return getScalingPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a Scaling Policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicy(GetScalingPolicyArgs.builder()
     *             .id("ad19848d-1921-179c-affa-244a3543be88")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetScalingPolicyResult> getScalingPolicyPlain(GetScalingPolicyPlainArgs args) {
        return getScalingPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a Scaling Policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicy(GetScalingPolicyArgs.builder()
     *             .id("ad19848d-1921-179c-affa-244a3543be88")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetScalingPolicyResult> getScalingPolicy(GetScalingPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getScalingPolicy:getScalingPolicy", TypeShape.of(GetScalingPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a Scaling Policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicy(GetScalingPolicyArgs.builder()
     *             .id("ad19848d-1921-179c-affa-244a3543be88")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetScalingPolicyResult> getScalingPolicy(GetScalingPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getScalingPolicy:getScalingPolicy", TypeShape.of(GetScalingPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a Scaling Policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetScalingPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getScalingPolicy(GetScalingPolicyArgs.builder()
     *             .id("ad19848d-1921-179c-affa-244a3543be88")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetScalingPolicyResult> getScalingPolicyPlain(GetScalingPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getScalingPolicy:getScalingPolicy", TypeShape.of(GetScalingPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve the cluster&#39;s [scheduler configuration](https://www.nomadproject.io/api-docs/operator#sample-response-3).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var global = NomadFunctions.getSchedulerPolicy(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSchedulerPolicyResult> getSchedulerPolicy() {
        return getSchedulerPolicy(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve the cluster&#39;s [scheduler configuration](https://www.nomadproject.io/api-docs/operator#sample-response-3).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var global = NomadFunctions.getSchedulerPolicy(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSchedulerPolicyResult> getSchedulerPolicyPlain() {
        return getSchedulerPolicyPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve the cluster&#39;s [scheduler configuration](https://www.nomadproject.io/api-docs/operator#sample-response-3).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var global = NomadFunctions.getSchedulerPolicy(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSchedulerPolicyResult> getSchedulerPolicy(InvokeArgs args) {
        return getSchedulerPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve the cluster&#39;s [scheduler configuration](https://www.nomadproject.io/api-docs/operator#sample-response-3).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var global = NomadFunctions.getSchedulerPolicy(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSchedulerPolicyResult> getSchedulerPolicyPlain(InvokeArgs args) {
        return getSchedulerPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve the cluster&#39;s [scheduler configuration](https://www.nomadproject.io/api-docs/operator#sample-response-3).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var global = NomadFunctions.getSchedulerPolicy(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSchedulerPolicyResult> getSchedulerPolicy(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getSchedulerPolicy:getSchedulerPolicy", TypeShape.of(GetSchedulerPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve the cluster&#39;s [scheduler configuration](https://www.nomadproject.io/api-docs/operator#sample-response-3).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var global = NomadFunctions.getSchedulerPolicy(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSchedulerPolicyResult> getSchedulerPolicy(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getSchedulerPolicy:getSchedulerPolicy", TypeShape.of(GetSchedulerPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve the cluster&#39;s [scheduler configuration](https://www.nomadproject.io/api-docs/operator#sample-response-3).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var global = NomadFunctions.getSchedulerPolicy(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSchedulerPolicyResult> getSchedulerPolicyPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getSchedulerPolicy:getSchedulerPolicy", TypeShape.of(GetSchedulerPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.Variable;
     * import com.pulumi.nomad.VariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Variable("example", VariableArgs.builder()
     *             .path("path/of/existing/variable")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVariableResult> getVariable(GetVariableArgs args) {
        return getVariable(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.Variable;
     * import com.pulumi.nomad.VariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Variable("example", VariableArgs.builder()
     *             .path("path/of/existing/variable")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVariableResult> getVariablePlain(GetVariablePlainArgs args) {
        return getVariablePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.Variable;
     * import com.pulumi.nomad.VariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Variable("example", VariableArgs.builder()
     *             .path("path/of/existing/variable")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVariableResult> getVariable(GetVariableArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getVariable:getVariable", TypeShape.of(GetVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.Variable;
     * import com.pulumi.nomad.VariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Variable("example", VariableArgs.builder()
     *             .path("path/of/existing/variable")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVariableResult> getVariable(GetVariableArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getVariable:getVariable", TypeShape.of(GetVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.Variable;
     * import com.pulumi.nomad.VariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Variable("example", VariableArgs.builder()
     *             .path("path/of/existing/variable")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVariableResult> getVariablePlain(GetVariablePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getVariable:getVariable", TypeShape.of(GetVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of volumes in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getVolumes(GetVolumesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumesResult> getVolumes() {
        return getVolumes(GetVolumesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of volumes in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getVolumes(GetVolumesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumesResult> getVolumesPlain() {
        return getVolumesPlain(GetVolumesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of volumes in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getVolumes(GetVolumesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumesResult> getVolumes(GetVolumesArgs args) {
        return getVolumes(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of volumes in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getVolumes(GetVolumesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumesResult> getVolumesPlain(GetVolumesPlainArgs args) {
        return getVolumesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve a list of volumes in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getVolumes(GetVolumesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumesResult> getVolumes(GetVolumesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getVolumes:getVolumes", TypeShape.of(GetVolumesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of volumes in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getVolumes(GetVolumesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumesResult> getVolumes(GetVolumesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("nomad:index/getVolumes:getVolumes", TypeShape.of(GetVolumesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve a list of volumes in Nomad.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.nomad.NomadFunctions;
     * import com.pulumi.nomad.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NomadFunctions.getVolumes(GetVolumesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumesResult> getVolumesPlain(GetVolumesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("nomad:index/getVolumes:getVolumes", TypeShape.of(GetVolumesResult.class), args, Utilities.withVersion(options));
    }
}
