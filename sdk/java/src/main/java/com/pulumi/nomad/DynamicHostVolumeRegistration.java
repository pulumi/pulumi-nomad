// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.nomad.DynamicHostVolumeRegistrationArgs;
import com.pulumi.nomad.Utilities;
import com.pulumi.nomad.inputs.DynamicHostVolumeRegistrationState;
import com.pulumi.nomad.outputs.DynamicHostVolumeRegistrationCapability;
import com.pulumi.nomad.outputs.DynamicHostVolumeRegistrationConstraint;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Registers a dynamic host volume in Nomad that has already been created. Note
 * that Nomad supports two workflows for dynamic host volumes: create and
 * register. Both resources result in the same data source with the same outputs.
 * 
 */
@ResourceType(type="nomad:index/dynamicHostVolumeRegistration:DynamicHostVolumeRegistration")
public class DynamicHostVolumeRegistration extends com.pulumi.resources.CustomResource {
    /**
     * `(block: &lt;optional&gt;)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    @Export(name="capabilities", refs={List.class,DynamicHostVolumeRegistrationCapability.class}, tree="[0,1]")
    private Output<List<DynamicHostVolumeRegistrationCapability>> capabilities;

    /**
     * @return `(block: &lt;optional&gt;)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    public Output<List<DynamicHostVolumeRegistrationCapability>> capabilities() {
        return this.capabilities;
    }
    /**
     * `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
     * physical size of a disk or a quota, depending on the plugin. This field must
     * be between the `capacity_min` and `capacity_max` values unless they are
     * omitted. Accepts human-friendly suffixes such as `&#34;100GiB&#34;`.
     * 
     */
    @Export(name="capacity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> capacity;

    /**
     * @return `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
     * physical size of a disk or a quota, depending on the plugin. This field must
     * be between the `capacity_min` and `capacity_max` values unless they are
     * omitted. Accepts human-friendly suffixes such as `&#34;100GiB&#34;`.
     * 
     */
    public Output<Optional<String>> capacity() {
        return Codegen.optional(this.capacity);
    }
    @Export(name="capacityBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> capacityBytes;

    public Output<Integer> capacityBytes() {
        return this.capacityBytes;
    }
    @Export(name="capacityMaxBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> capacityMaxBytes;

    public Output<Integer> capacityMaxBytes() {
        return this.capacityMaxBytes;
    }
    @Export(name="capacityMinBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> capacityMinBytes;

    public Output<Integer> capacityMinBytes() {
        return this.capacityMinBytes;
    }
    /**
     * Constraints
     * 
     */
    @Export(name="constraints", refs={List.class,DynamicHostVolumeRegistrationConstraint.class}, tree="[0,1]")
    private Output<List<DynamicHostVolumeRegistrationConstraint>> constraints;

    /**
     * @return Constraints
     * 
     */
    public Output<List<DynamicHostVolumeRegistrationConstraint>> constraints() {
        return this.constraints;
    }
    /**
     * `(string)` - The path on disk where the volume exists.
     * 
     */
    @Export(name="hostPath", refs={String.class}, tree="[0]")
    private Output<String> hostPath;

    /**
     * @return `(string)` - The path on disk where the volume exists.
     * 
     */
    public Output<String> hostPath() {
        return this.hostPath;
    }
    /**
     * `(string: &lt;required&gt;)` - The name of the volume, which is used as the
     * [`volume.source`][volume_source] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return `(string: &lt;required&gt;)` - The name of the volume, which is used as the
     * [`volume.source`][volume_source] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * `(string: &lt;optional&gt;)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `&#34;default&#34;` if unset.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return `(string: &lt;optional&gt;)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `&#34;default&#34;` if unset.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * `(string: &lt;required&gt;)` - A specific node where the volume is
     * mounted.
     * 
     */
    @Export(name="nodeId", refs={String.class}, tree="[0]")
    private Output<String> nodeId;

    /**
     * @return `(string: &lt;required&gt;)` - A specific node where the volume is
     * mounted.
     * 
     */
    public Output<String> nodeId() {
        return this.nodeId;
    }
    /**
     * Node pool
     * 
     */
    @Export(name="nodePool", refs={String.class}, tree="[0]")
    private Output<String> nodePool;

    /**
     * @return Node pool
     * 
     */
    public Output<String> nodePool() {
        return this.nodePool;
    }
    /**
     * `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     * [`access_mode`]: /nomad/docs/other-specifications/volume/capability#access_mode
     * [`attachment_mode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
     * [volume_source]: /nomad/docs/job-specification/volume#source
     * 
     */
    @Export(name="parameters", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> parameters;

    /**
     * @return `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     * [`access_mode`]: /nomad/docs/other-specifications/volume/capability#access_mode
     * [`attachment_mode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
     * [volume_source]: /nomad/docs/job-specification/volume#source
     * 
     */
    public Output<Optional<Map<String,String>>> parameters() {
        return Codegen.optional(this.parameters);
    }
    /**
     * Plugin ID
     * 
     */
    @Export(name="pluginId", refs={String.class}, tree="[0]")
    private Output<String> pluginId;

    /**
     * @return Plugin ID
     * 
     */
    public Output<String> pluginId() {
        return this.pluginId;
    }
    /**
     * State
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return State
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DynamicHostVolumeRegistration(java.lang.String name) {
        this(name, DynamicHostVolumeRegistrationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DynamicHostVolumeRegistration(java.lang.String name, DynamicHostVolumeRegistrationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DynamicHostVolumeRegistration(java.lang.String name, DynamicHostVolumeRegistrationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("nomad:index/dynamicHostVolumeRegistration:DynamicHostVolumeRegistration", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DynamicHostVolumeRegistration(java.lang.String name, Output<java.lang.String> id, @Nullable DynamicHostVolumeRegistrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("nomad:index/dynamicHostVolumeRegistration:DynamicHostVolumeRegistration", name, state, makeResourceOptions(options, id), false);
    }

    private static DynamicHostVolumeRegistrationArgs makeArgs(DynamicHostVolumeRegistrationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DynamicHostVolumeRegistrationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DynamicHostVolumeRegistration get(java.lang.String name, Output<java.lang.String> id, @Nullable DynamicHostVolumeRegistrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DynamicHostVolumeRegistration(name, id, state, options);
    }
}
