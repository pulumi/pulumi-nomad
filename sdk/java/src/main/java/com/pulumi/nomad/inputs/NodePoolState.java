// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.nomad.inputs.NodePoolSchedulerConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolState extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolState Empty = new NodePoolState();

    /**
     * `(string)` - The description of the node pool.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return `(string)` - The description of the node pool.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * `(map[string]string)` - Arbitrary KV metadata associated with the
     * node pool.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<Map<String,String>> meta;

    /**
     * @return `(map[string]string)` - Arbitrary KV metadata associated with the
     * node pool.
     * 
     */
    public Optional<Output<Map<String,String>>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * `(string)` - The name of the node pool.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return `(string)` - The name of the node pool.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `(block)` - Scheduler configuration for the node pool.
     * 
     */
    @Import(name="schedulerConfig")
    private @Nullable Output<NodePoolSchedulerConfigArgs> schedulerConfig;

    /**
     * @return `(block)` - Scheduler configuration for the node pool.
     * 
     */
    public Optional<Output<NodePoolSchedulerConfigArgs>> schedulerConfig() {
        return Optional.ofNullable(this.schedulerConfig);
    }

    private NodePoolState() {}

    private NodePoolState(NodePoolState $) {
        this.description = $.description;
        this.meta = $.meta;
        this.name = $.name;
        this.schedulerConfig = $.schedulerConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolState $;

        public Builder() {
            $ = new NodePoolState();
        }

        public Builder(NodePoolState defaults) {
            $ = new NodePoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description `(string)` - The description of the node pool.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description `(string)` - The description of the node pool.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param meta `(map[string]string)` - Arbitrary KV metadata associated with the
         * node pool.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<Map<String,String>> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta `(map[string]string)` - Arbitrary KV metadata associated with the
         * node pool.
         * 
         * @return builder
         * 
         */
        public Builder meta(Map<String,String> meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param name `(string)` - The name of the node pool.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name `(string)` - The name of the node pool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schedulerConfig `(block)` - Scheduler configuration for the node pool.
         * 
         * @return builder
         * 
         */
        public Builder schedulerConfig(@Nullable Output<NodePoolSchedulerConfigArgs> schedulerConfig) {
            $.schedulerConfig = schedulerConfig;
            return this;
        }

        /**
         * @param schedulerConfig `(block)` - Scheduler configuration for the node pool.
         * 
         * @return builder
         * 
         */
        public Builder schedulerConfig(NodePoolSchedulerConfigArgs schedulerConfig) {
            return schedulerConfig(Output.of(schedulerConfig));
        }

        public NodePoolState build() {
            return $;
        }
    }

}
