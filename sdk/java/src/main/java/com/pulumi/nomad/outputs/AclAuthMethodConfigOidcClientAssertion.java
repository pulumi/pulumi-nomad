// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.nomad.outputs.AclAuthMethodConfigOidcClientAssertionPrivateKey;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AclAuthMethodConfigOidcClientAssertion {
    /**
     * @return `([]string: optional)` - Who processes the assertion.
     * Defaults to the auth method&#39;s `oidc_discovery_url`.
     * 
     */
    private @Nullable List<String> audiences;
    /**
     * @return `(map[string]string: optional)` - Add to the JWT headers,
     * alongside &#34;kid&#34; and &#34;type&#34;. Setting the &#34;kid&#34; header here is not allowed;
     * use `private_key.key_id`.
     * 
     */
    private @Nullable Map<String,String> extraHeaders;
    /**
     * @return `(string: &lt;optional&gt;)` is the key&#39;s algorithm.
     * Its default values are based on the `key_source`:
     * - &#34;nomad&#34;: &#34;RS256&#34;; this is from Nomad&#39;s keyring and must not be changed
     * - &#34;private_key&#34;: &#34;RS256&#34;; must be RS256, RS384, or RS512
     * - &#34;client_secret&#34;: &#34;HS256&#34;; must be HS256, HS384, or HS512
     * 
     */
    private @Nullable String keyAlgorithm;
    /**
     * @return `(string: &lt;required&gt;)` - Specifies where to get the private
     * key to sign the JWT.
     * Available sources:
     * - &#34;nomad&#34;: Use current active key in Nomad&#39;s keyring
     * - &#34;private_key&#34;: Use key material in the `private_key` field
     * - &#34;client_secret&#34;: Use the `oidc_client_secret` as an HMAC key
     * 
     */
    private String keySource;
    /**
     * @return `(OIDCClientAssertionKey: &lt;optional&gt;)` - External key
     * to sign the JWT. `key_source` must be &#34;private_key&#34; to enable this.
     * 
     */
    private @Nullable AclAuthMethodConfigOidcClientAssertionPrivateKey privateKey;

    private AclAuthMethodConfigOidcClientAssertion() {}
    /**
     * @return `([]string: optional)` - Who processes the assertion.
     * Defaults to the auth method&#39;s `oidc_discovery_url`.
     * 
     */
    public List<String> audiences() {
        return this.audiences == null ? List.of() : this.audiences;
    }
    /**
     * @return `(map[string]string: optional)` - Add to the JWT headers,
     * alongside &#34;kid&#34; and &#34;type&#34;. Setting the &#34;kid&#34; header here is not allowed;
     * use `private_key.key_id`.
     * 
     */
    public Map<String,String> extraHeaders() {
        return this.extraHeaders == null ? Map.of() : this.extraHeaders;
    }
    /**
     * @return `(string: &lt;optional&gt;)` is the key&#39;s algorithm.
     * Its default values are based on the `key_source`:
     * - &#34;nomad&#34;: &#34;RS256&#34;; this is from Nomad&#39;s keyring and must not be changed
     * - &#34;private_key&#34;: &#34;RS256&#34;; must be RS256, RS384, or RS512
     * - &#34;client_secret&#34;: &#34;HS256&#34;; must be HS256, HS384, or HS512
     * 
     */
    public Optional<String> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }
    /**
     * @return `(string: &lt;required&gt;)` - Specifies where to get the private
     * key to sign the JWT.
     * Available sources:
     * - &#34;nomad&#34;: Use current active key in Nomad&#39;s keyring
     * - &#34;private_key&#34;: Use key material in the `private_key` field
     * - &#34;client_secret&#34;: Use the `oidc_client_secret` as an HMAC key
     * 
     */
    public String keySource() {
        return this.keySource;
    }
    /**
     * @return `(OIDCClientAssertionKey: &lt;optional&gt;)` - External key
     * to sign the JWT. `key_source` must be &#34;private_key&#34; to enable this.
     * 
     */
    public Optional<AclAuthMethodConfigOidcClientAssertionPrivateKey> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AclAuthMethodConfigOidcClientAssertion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> audiences;
        private @Nullable Map<String,String> extraHeaders;
        private @Nullable String keyAlgorithm;
        private String keySource;
        private @Nullable AclAuthMethodConfigOidcClientAssertionPrivateKey privateKey;
        public Builder() {}
        public Builder(AclAuthMethodConfigOidcClientAssertion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.extraHeaders = defaults.extraHeaders;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.keySource = defaults.keySource;
    	      this.privateKey = defaults.privateKey;
        }

        @CustomType.Setter
        public Builder audiences(@Nullable List<String> audiences) {

            this.audiences = audiences;
            return this;
        }
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }
        @CustomType.Setter
        public Builder extraHeaders(@Nullable Map<String,String> extraHeaders) {

            this.extraHeaders = extraHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder keyAlgorithm(@Nullable String keyAlgorithm) {

            this.keyAlgorithm = keyAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder keySource(String keySource) {
            if (keySource == null) {
              throw new MissingRequiredPropertyException("AclAuthMethodConfigOidcClientAssertion", "keySource");
            }
            this.keySource = keySource;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(@Nullable AclAuthMethodConfigOidcClientAssertionPrivateKey privateKey) {

            this.privateKey = privateKey;
            return this;
        }
        public AclAuthMethodConfigOidcClientAssertion build() {
            final var _resultValue = new AclAuthMethodConfigOidcClientAssertion();
            _resultValue.audiences = audiences;
            _resultValue.extraHeaders = extraHeaders;
            _resultValue.keyAlgorithm = keyAlgorithm;
            _resultValue.keySource = keySource;
            _resultValue.privateKey = privateKey;
            return _resultValue;
        }
    }
}
