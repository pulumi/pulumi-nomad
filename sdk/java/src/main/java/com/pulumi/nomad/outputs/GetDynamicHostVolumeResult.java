// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.nomad.outputs.GetDynamicHostVolumeCapability;
import com.pulumi.nomad.outputs.GetDynamicHostVolumeConstraint;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDynamicHostVolumeResult {
    /**
     * @return `(block)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    private List<GetDynamicHostVolumeCapability> capabilities;
    /**
     * @return `(string)` - The size of the volume, in human-friendly format
     * (ex. 10 GiB)
     * 
     */
    private String capacity;
    /**
     * @return `(int)` - The size of the volume, in bytes.
     * 
     */
    private Integer capacityBytes;
    /**
     * @return `(string)` - The requested maximum capacity of the volume, in
     * human-friendly format (ex. 10 GiB).
     * 
     */
    private String capacityMax;
    /**
     * @return `(string)` - The requested maximum capacity of the
     * volume, in bytes.
     * 
     */
    private Integer capacityMaxBytes;
    /**
     * @return `(string)` - The requested minimum capacity of the volume, in
     * human-friendly format (ex. 10 GiB).
     * 
     */
    private String capacityMin;
    /**
     * @return `(string)` - The requested minimum capacity of the
     * volume, in bytes.
     * 
     */
    private Integer capacityMinBytes;
    /**
     * @return `(block)` - The restrictions used to place the volume on a node,
     * similar to the [`constraint`][] block on a Nomad job specification. A volume
     * may have multiple `constraint` blocks. Each constraint block has the following
     * attributes.
     * 
     */
    private List<GetDynamicHostVolumeConstraint> constraints;
    /**
     * @return `(string)` - The path on disk where the volume exists.
     * 
     */
    private String hostPath;
    private String id;
    /**
     * @return `(string)` - The name of the volume, which is used as the
     * [`volume.source`][volumeSource] field in job specifications that claim this
     * volume. Host volume names are be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    private String name;
    /**
     * @return `(string)` - The namespace of the volume.
     * 
     */
    private @Nullable String namespace;
    /**
     * @return `(string)` - A specific node where the volume is mounted.
     * 
     */
    private String nodeId;
    /**
     * @return `(string: &lt;optional&gt;)` - The node pool of the node where the
     * volume is mounted.
     * 
     */
    private String nodePool;
    /**
     * @return `(map&lt;string|string&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     */
    private Map<String,String> parameters;
    /**
     * @return `(string: &lt;required&gt;)` - The ID of the [dynamic host volume
     * plugin][dhvPlugin] that manages this volume.
     * 
     */
    private String pluginId;
    private String state;

    private GetDynamicHostVolumeResult() {}
    /**
     * @return `(block)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    public List<GetDynamicHostVolumeCapability> capabilities() {
        return this.capabilities;
    }
    /**
     * @return `(string)` - The size of the volume, in human-friendly format
     * (ex. 10 GiB)
     * 
     */
    public String capacity() {
        return this.capacity;
    }
    /**
     * @return `(int)` - The size of the volume, in bytes.
     * 
     */
    public Integer capacityBytes() {
        return this.capacityBytes;
    }
    /**
     * @return `(string)` - The requested maximum capacity of the volume, in
     * human-friendly format (ex. 10 GiB).
     * 
     */
    public String capacityMax() {
        return this.capacityMax;
    }
    /**
     * @return `(string)` - The requested maximum capacity of the
     * volume, in bytes.
     * 
     */
    public Integer capacityMaxBytes() {
        return this.capacityMaxBytes;
    }
    /**
     * @return `(string)` - The requested minimum capacity of the volume, in
     * human-friendly format (ex. 10 GiB).
     * 
     */
    public String capacityMin() {
        return this.capacityMin;
    }
    /**
     * @return `(string)` - The requested minimum capacity of the
     * volume, in bytes.
     * 
     */
    public Integer capacityMinBytes() {
        return this.capacityMinBytes;
    }
    /**
     * @return `(block)` - The restrictions used to place the volume on a node,
     * similar to the [`constraint`][] block on a Nomad job specification. A volume
     * may have multiple `constraint` blocks. Each constraint block has the following
     * attributes.
     * 
     */
    public List<GetDynamicHostVolumeConstraint> constraints() {
        return this.constraints;
    }
    /**
     * @return `(string)` - The path on disk where the volume exists.
     * 
     */
    public String hostPath() {
        return this.hostPath;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return `(string)` - The name of the volume, which is used as the
     * [`volume.source`][volumeSource] field in job specifications that claim this
     * volume. Host volume names are be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return `(string)` - The namespace of the volume.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return `(string)` - A specific node where the volume is mounted.
     * 
     */
    public String nodeId() {
        return this.nodeId;
    }
    /**
     * @return `(string: &lt;optional&gt;)` - The node pool of the node where the
     * volume is mounted.
     * 
     */
    public String nodePool() {
        return this.nodePool;
    }
    /**
     * @return `(map&lt;string|string&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     */
    public Map<String,String> parameters() {
        return this.parameters;
    }
    /**
     * @return `(string: &lt;required&gt;)` - The ID of the [dynamic host volume
     * plugin][dhvPlugin] that manages this volume.
     * 
     */
    public String pluginId() {
        return this.pluginId;
    }
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDynamicHostVolumeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDynamicHostVolumeCapability> capabilities;
        private String capacity;
        private Integer capacityBytes;
        private String capacityMax;
        private Integer capacityMaxBytes;
        private String capacityMin;
        private Integer capacityMinBytes;
        private List<GetDynamicHostVolumeConstraint> constraints;
        private String hostPath;
        private String id;
        private String name;
        private @Nullable String namespace;
        private String nodeId;
        private String nodePool;
        private Map<String,String> parameters;
        private String pluginId;
        private String state;
        public Builder() {}
        public Builder(GetDynamicHostVolumeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capabilities = defaults.capabilities;
    	      this.capacity = defaults.capacity;
    	      this.capacityBytes = defaults.capacityBytes;
    	      this.capacityMax = defaults.capacityMax;
    	      this.capacityMaxBytes = defaults.capacityMaxBytes;
    	      this.capacityMin = defaults.capacityMin;
    	      this.capacityMinBytes = defaults.capacityMinBytes;
    	      this.constraints = defaults.constraints;
    	      this.hostPath = defaults.hostPath;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.nodeId = defaults.nodeId;
    	      this.nodePool = defaults.nodePool;
    	      this.parameters = defaults.parameters;
    	      this.pluginId = defaults.pluginId;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder capabilities(List<GetDynamicHostVolumeCapability> capabilities) {
            if (capabilities == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "capabilities");
            }
            this.capabilities = capabilities;
            return this;
        }
        public Builder capabilities(GetDynamicHostVolumeCapability... capabilities) {
            return capabilities(List.of(capabilities));
        }
        @CustomType.Setter
        public Builder capacity(String capacity) {
            if (capacity == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "capacity");
            }
            this.capacity = capacity;
            return this;
        }
        @CustomType.Setter
        public Builder capacityBytes(Integer capacityBytes) {
            if (capacityBytes == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "capacityBytes");
            }
            this.capacityBytes = capacityBytes;
            return this;
        }
        @CustomType.Setter
        public Builder capacityMax(String capacityMax) {
            if (capacityMax == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "capacityMax");
            }
            this.capacityMax = capacityMax;
            return this;
        }
        @CustomType.Setter
        public Builder capacityMaxBytes(Integer capacityMaxBytes) {
            if (capacityMaxBytes == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "capacityMaxBytes");
            }
            this.capacityMaxBytes = capacityMaxBytes;
            return this;
        }
        @CustomType.Setter
        public Builder capacityMin(String capacityMin) {
            if (capacityMin == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "capacityMin");
            }
            this.capacityMin = capacityMin;
            return this;
        }
        @CustomType.Setter
        public Builder capacityMinBytes(Integer capacityMinBytes) {
            if (capacityMinBytes == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "capacityMinBytes");
            }
            this.capacityMinBytes = capacityMinBytes;
            return this;
        }
        @CustomType.Setter
        public Builder constraints(List<GetDynamicHostVolumeConstraint> constraints) {
            if (constraints == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "constraints");
            }
            this.constraints = constraints;
            return this;
        }
        public Builder constraints(GetDynamicHostVolumeConstraint... constraints) {
            return constraints(List.of(constraints));
        }
        @CustomType.Setter
        public Builder hostPath(String hostPath) {
            if (hostPath == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "hostPath");
            }
            this.hostPath = hostPath;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder nodeId(String nodeId) {
            if (nodeId == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "nodeId");
            }
            this.nodeId = nodeId;
            return this;
        }
        @CustomType.Setter
        public Builder nodePool(String nodePool) {
            if (nodePool == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "nodePool");
            }
            this.nodePool = nodePool;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(Map<String,String> parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder pluginId(String pluginId) {
            if (pluginId == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "pluginId");
            }
            this.pluginId = pluginId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDynamicHostVolumeResult", "state");
            }
            this.state = state;
            return this;
        }
        public GetDynamicHostVolumeResult build() {
            final var _resultValue = new GetDynamicHostVolumeResult();
            _resultValue.capabilities = capabilities;
            _resultValue.capacity = capacity;
            _resultValue.capacityBytes = capacityBytes;
            _resultValue.capacityMax = capacityMax;
            _resultValue.capacityMaxBytes = capacityMaxBytes;
            _resultValue.capacityMin = capacityMin;
            _resultValue.capacityMinBytes = capacityMinBytes;
            _resultValue.constraints = constraints;
            _resultValue.hostPath = hostPath;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.nodeId = nodeId;
            _resultValue.nodePool = nodePool;
            _resultValue.parameters = parameters;
            _resultValue.pluginId = pluginId;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
