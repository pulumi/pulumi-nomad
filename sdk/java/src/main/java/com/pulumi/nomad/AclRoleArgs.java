// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.nomad.inputs.AclRolePolicyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclRoleArgs Empty = new AclRoleArgs();

    /**
     * `(string: &#34;&#34;)` - A description of the ACL Role.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return `(string: &#34;&#34;)` - A description of the ACL Role.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * `(string: &lt;required&gt;)` - A human-friendly name for this ACL Role.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return `(string: &lt;required&gt;)` - A human-friendly name for this ACL Role.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `(set: &lt;required&gt;)` - A set of policy names to associate with this
     * ACL Role. It may be used multiple times.
     * 
     */
    @Import(name="policies", required=true)
    private Output<List<AclRolePolicyArgs>> policies;

    /**
     * @return `(set: &lt;required&gt;)` - A set of policy names to associate with this
     * ACL Role. It may be used multiple times.
     * 
     */
    public Output<List<AclRolePolicyArgs>> policies() {
        return this.policies;
    }

    private AclRoleArgs() {}

    private AclRoleArgs(AclRoleArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.policies = $.policies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclRoleArgs $;

        public Builder() {
            $ = new AclRoleArgs();
        }

        public Builder(AclRoleArgs defaults) {
            $ = new AclRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description `(string: &#34;&#34;)` - A description of the ACL Role.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description `(string: &#34;&#34;)` - A description of the ACL Role.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name `(string: &lt;required&gt;)` - A human-friendly name for this ACL Role.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name `(string: &lt;required&gt;)` - A human-friendly name for this ACL Role.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policies `(set: &lt;required&gt;)` - A set of policy names to associate with this
         * ACL Role. It may be used multiple times.
         * 
         * @return builder
         * 
         */
        public Builder policies(Output<List<AclRolePolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies `(set: &lt;required&gt;)` - A set of policy names to associate with this
         * ACL Role. It may be used multiple times.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<AclRolePolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies `(set: &lt;required&gt;)` - A set of policy names to associate with this
         * ACL Role. It may be used multiple times.
         * 
         * @return builder
         * 
         */
        public Builder policies(AclRolePolicyArgs... policies) {
            return policies(List.of(policies));
        }

        public AclRoleArgs build() {
            $.policies = Objects.requireNonNull($.policies, "expected parameter 'policies' to be non-null");
            return $;
        }
    }

}
