// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchedulerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchedulerConfigArgs Empty = new SchedulerConfigArgs();

    /**
     * `(bool: false)` - When `true`, tasks may exceed their reserved memory limit.
     * 
     */
    @Import(name="memoryOversubscriptionEnabled")
    private @Nullable Output<Boolean> memoryOversubscriptionEnabled;

    /**
     * @return `(bool: false)` - When `true`, tasks may exceed their reserved memory limit.
     * 
     */
    public Optional<Output<Boolean>> memoryOversubscriptionEnabled() {
        return Optional.ofNullable(this.memoryOversubscriptionEnabled);
    }

    /**
     * `(map[string]bool)` - Options to enable preemption for various schedulers.
     * 
     */
    @Import(name="preemptionConfig")
    private @Nullable Output<Map<String,Boolean>> preemptionConfig;

    /**
     * @return `(map[string]bool)` - Options to enable preemption for various schedulers.
     * 
     */
    public Optional<Output<Map<String,Boolean>>> preemptionConfig() {
        return Optional.ofNullable(this.preemptionConfig);
    }

    /**
     * `(string: &#34;binpack&#34;)` - Specifies whether scheduler binpacks or spreads allocations on available nodes. Possible values are `binpack` and `spread`.
     * 
     */
    @Import(name="schedulerAlgorithm")
    private @Nullable Output<String> schedulerAlgorithm;

    /**
     * @return `(string: &#34;binpack&#34;)` - Specifies whether scheduler binpacks or spreads allocations on available nodes. Possible values are `binpack` and `spread`.
     * 
     */
    public Optional<Output<String>> schedulerAlgorithm() {
        return Optional.ofNullable(this.schedulerAlgorithm);
    }

    private SchedulerConfigArgs() {}

    private SchedulerConfigArgs(SchedulerConfigArgs $) {
        this.memoryOversubscriptionEnabled = $.memoryOversubscriptionEnabled;
        this.preemptionConfig = $.preemptionConfig;
        this.schedulerAlgorithm = $.schedulerAlgorithm;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchedulerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchedulerConfigArgs $;

        public Builder() {
            $ = new SchedulerConfigArgs();
        }

        public Builder(SchedulerConfigArgs defaults) {
            $ = new SchedulerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param memoryOversubscriptionEnabled `(bool: false)` - When `true`, tasks may exceed their reserved memory limit.
         * 
         * @return builder
         * 
         */
        public Builder memoryOversubscriptionEnabled(@Nullable Output<Boolean> memoryOversubscriptionEnabled) {
            $.memoryOversubscriptionEnabled = memoryOversubscriptionEnabled;
            return this;
        }

        /**
         * @param memoryOversubscriptionEnabled `(bool: false)` - When `true`, tasks may exceed their reserved memory limit.
         * 
         * @return builder
         * 
         */
        public Builder memoryOversubscriptionEnabled(Boolean memoryOversubscriptionEnabled) {
            return memoryOversubscriptionEnabled(Output.of(memoryOversubscriptionEnabled));
        }

        /**
         * @param preemptionConfig `(map[string]bool)` - Options to enable preemption for various schedulers.
         * 
         * @return builder
         * 
         */
        public Builder preemptionConfig(@Nullable Output<Map<String,Boolean>> preemptionConfig) {
            $.preemptionConfig = preemptionConfig;
            return this;
        }

        /**
         * @param preemptionConfig `(map[string]bool)` - Options to enable preemption for various schedulers.
         * 
         * @return builder
         * 
         */
        public Builder preemptionConfig(Map<String,Boolean> preemptionConfig) {
            return preemptionConfig(Output.of(preemptionConfig));
        }

        /**
         * @param schedulerAlgorithm `(string: &#34;binpack&#34;)` - Specifies whether scheduler binpacks or spreads allocations on available nodes. Possible values are `binpack` and `spread`.
         * 
         * @return builder
         * 
         */
        public Builder schedulerAlgorithm(@Nullable Output<String> schedulerAlgorithm) {
            $.schedulerAlgorithm = schedulerAlgorithm;
            return this;
        }

        /**
         * @param schedulerAlgorithm `(string: &#34;binpack&#34;)` - Specifies whether scheduler binpacks or spreads allocations on available nodes. Possible values are `binpack` and `spread`.
         * 
         * @return builder
         * 
         */
        public Builder schedulerAlgorithm(String schedulerAlgorithm) {
            return schedulerAlgorithm(Output.of(schedulerAlgorithm));
        }

        public SchedulerConfigArgs build() {
            return $;
        }
    }

}
