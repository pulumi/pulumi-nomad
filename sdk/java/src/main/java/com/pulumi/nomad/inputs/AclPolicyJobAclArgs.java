// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclPolicyJobAclArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclPolicyJobAclArgs Empty = new AclPolicyJobAclArgs();

    /**
     * `(string: &lt;optional&gt;` - The group to attach the policy. Required if
     * `task` is set.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return `(string: &lt;optional&gt;` - The group to attach the policy. Required if
     * `task` is set.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * `(string: &lt;optional&gt;` - The job to attach the policy. Required if
     * `group` is set.
     * 
     */
    @Import(name="jobId", required=true)
    private Output<String> jobId;

    /**
     * @return `(string: &lt;optional&gt;` - The job to attach the policy. Required if
     * `group` is set.
     * 
     */
    public Output<String> jobId() {
        return this.jobId;
    }

    /**
     * `(string: &#34;default&#34;)` - The namespace to attach the policy.
     * Required if `job_id` is set.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return `(string: &#34;default&#34;)` - The namespace to attach the policy.
     * Required if `job_id` is set.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * `(string: &lt;optional&gt;` - The task to attach the policy.
     * 
     * [nomad_docs_wi]: https://www.nomadproject.io/docs/concepts/workload-identity#workload-associated-acl-policies
     * 
     */
    @Import(name="task")
    private @Nullable Output<String> task;

    /**
     * @return `(string: &lt;optional&gt;` - The task to attach the policy.
     * 
     * [nomad_docs_wi]: https://www.nomadproject.io/docs/concepts/workload-identity#workload-associated-acl-policies
     * 
     */
    public Optional<Output<String>> task() {
        return Optional.ofNullable(this.task);
    }

    private AclPolicyJobAclArgs() {}

    private AclPolicyJobAclArgs(AclPolicyJobAclArgs $) {
        this.group = $.group;
        this.jobId = $.jobId;
        this.namespace = $.namespace;
        this.task = $.task;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclPolicyJobAclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclPolicyJobAclArgs $;

        public Builder() {
            $ = new AclPolicyJobAclArgs();
        }

        public Builder(AclPolicyJobAclArgs defaults) {
            $ = new AclPolicyJobAclArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param group `(string: &lt;optional&gt;` - The group to attach the policy. Required if
         * `task` is set.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group `(string: &lt;optional&gt;` - The group to attach the policy. Required if
         * `task` is set.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param jobId `(string: &lt;optional&gt;` - The job to attach the policy. Required if
         * `group` is set.
         * 
         * @return builder
         * 
         */
        public Builder jobId(Output<String> jobId) {
            $.jobId = jobId;
            return this;
        }

        /**
         * @param jobId `(string: &lt;optional&gt;` - The job to attach the policy. Required if
         * `group` is set.
         * 
         * @return builder
         * 
         */
        public Builder jobId(String jobId) {
            return jobId(Output.of(jobId));
        }

        /**
         * @param namespace `(string: &#34;default&#34;)` - The namespace to attach the policy.
         * Required if `job_id` is set.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace `(string: &#34;default&#34;)` - The namespace to attach the policy.
         * Required if `job_id` is set.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param task `(string: &lt;optional&gt;` - The task to attach the policy.
         * 
         * [nomad_docs_wi]: https://www.nomadproject.io/docs/concepts/workload-identity#workload-associated-acl-policies
         * 
         * @return builder
         * 
         */
        public Builder task(@Nullable Output<String> task) {
            $.task = task;
            return this;
        }

        /**
         * @param task `(string: &lt;optional&gt;` - The task to attach the policy.
         * 
         * [nomad_docs_wi]: https://www.nomadproject.io/docs/concepts/workload-identity#workload-associated-acl-policies
         * 
         * @return builder
         * 
         */
        public Builder task(String task) {
            return task(Output.of(task));
        }

        public AclPolicyJobAclArgs build() {
            if ($.jobId == null) {
                throw new MissingRequiredPropertyException("AclPolicyJobAclArgs", "jobId");
            }
            return $;
        }
    }

}
