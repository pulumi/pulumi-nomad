// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.nomad.inputs.DynamicHostVolumeRegistrationCapabilityArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DynamicHostVolumeRegistrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DynamicHostVolumeRegistrationArgs Empty = new DynamicHostVolumeRegistrationArgs();

    /**
     * `(block: &lt;optional&gt;)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    @Import(name="capabilities", required=true)
    private Output<List<DynamicHostVolumeRegistrationCapabilityArgs>> capabilities;

    /**
     * @return `(block: &lt;optional&gt;)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    public Output<List<DynamicHostVolumeRegistrationCapabilityArgs>> capabilities() {
        return this.capabilities;
    }

    /**
     * `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
     * physical size of a disk or a quota, depending on the plugin. This field must
     * be between the `capacity_min` and `capacity_max` values unless they are
     * omitted. Accepts human-friendly suffixes such as `&#34;100GiB&#34;`.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<String> capacity;

    /**
     * @return `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
     * physical size of a disk or a quota, depending on the plugin. This field must
     * be between the `capacity_min` and `capacity_max` values unless they are
     * omitted. Accepts human-friendly suffixes such as `&#34;100GiB&#34;`.
     * 
     */
    public Optional<Output<String>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * `(string)` - The path on disk where the volume exists.
     * 
     */
    @Import(name="hostPath", required=true)
    private Output<String> hostPath;

    /**
     * @return `(string)` - The path on disk where the volume exists.
     * 
     */
    public Output<String> hostPath() {
        return this.hostPath;
    }

    /**
     * `(string: &lt;required&gt;)` - The name of the volume, which is used as the
     * [`volume.source`][volume_source] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return `(string: &lt;required&gt;)` - The name of the volume, which is used as the
     * [`volume.source`][volume_source] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `(string: &lt;optional&gt;)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `&#34;default&#34;` if unset.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return `(string: &lt;optional&gt;)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `&#34;default&#34;` if unset.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * `(string: &lt;required&gt;)` - A specific node where the volume is
     * mounted.
     * 
     */
    @Import(name="nodeId", required=true)
    private Output<String> nodeId;

    /**
     * @return `(string: &lt;required&gt;)` - A specific node where the volume is
     * mounted.
     * 
     */
    public Output<String> nodeId() {
        return this.nodeId;
    }

    /**
     * `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     * [`access_mode`]: /nomad/docs/other-specifications/volume/capability#access_mode
     * [`attachment_mode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
     * [volume_source]: /nomad/docs/job-specification/volume#source
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     * [`access_mode`]: /nomad/docs/other-specifications/volume/capability#access_mode
     * [`attachment_mode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
     * [volume_source]: /nomad/docs/job-specification/volume#source
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    private DynamicHostVolumeRegistrationArgs() {}

    private DynamicHostVolumeRegistrationArgs(DynamicHostVolumeRegistrationArgs $) {
        this.capabilities = $.capabilities;
        this.capacity = $.capacity;
        this.hostPath = $.hostPath;
        this.name = $.name;
        this.namespace = $.namespace;
        this.nodeId = $.nodeId;
        this.parameters = $.parameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynamicHostVolumeRegistrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynamicHostVolumeRegistrationArgs $;

        public Builder() {
            $ = new DynamicHostVolumeRegistrationArgs();
        }

        public Builder(DynamicHostVolumeRegistrationArgs defaults) {
            $ = new DynamicHostVolumeRegistrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - Option for validating the capability of a
         * volume. Each capability block has the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder capabilities(Output<List<DynamicHostVolumeRegistrationCapabilityArgs>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - Option for validating the capability of a
         * volume. Each capability block has the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<DynamicHostVolumeRegistrationCapabilityArgs> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - Option for validating the capability of a
         * volume. Each capability block has the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder capabilities(DynamicHostVolumeRegistrationCapabilityArgs... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param capacity `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
         * physical size of a disk or a quota, depending on the plugin. This field must
         * be between the `capacity_min` and `capacity_max` values unless they are
         * omitted. Accepts human-friendly suffixes such as `&#34;100GiB&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<String> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
         * physical size of a disk or a quota, depending on the plugin. This field must
         * be between the `capacity_min` and `capacity_max` values unless they are
         * omitted. Accepts human-friendly suffixes such as `&#34;100GiB&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder capacity(String capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param hostPath `(string)` - The path on disk where the volume exists.
         * 
         * @return builder
         * 
         */
        public Builder hostPath(Output<String> hostPath) {
            $.hostPath = hostPath;
            return this;
        }

        /**
         * @param hostPath `(string)` - The path on disk where the volume exists.
         * 
         * @return builder
         * 
         */
        public Builder hostPath(String hostPath) {
            return hostPath(Output.of(hostPath));
        }

        /**
         * @param name `(string: &lt;required&gt;)` - The name of the volume, which is used as the
         * [`volume.source`][volume_source] field in job specifications that claim this
         * volume. Host volume names must be unique per node. Names are visible to any
         * user with `node:read` ACL, even across namespaces, so they should not be
         * treated as sensitive values.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name `(string: &lt;required&gt;)` - The name of the volume, which is used as the
         * [`volume.source`][volume_source] field in job specifications that claim this
         * volume. Host volume names must be unique per node. Names are visible to any
         * user with `node:read` ACL, even across namespaces, so they should not be
         * treated as sensitive values.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace `(string: &lt;optional&gt;)` - The namespace of the volume. This field
         * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
         * environment variable. Defaults to `&#34;default&#34;` if unset.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace `(string: &lt;optional&gt;)` - The namespace of the volume. This field
         * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
         * environment variable. Defaults to `&#34;default&#34;` if unset.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param nodeId `(string: &lt;required&gt;)` - A specific node where the volume is
         * mounted.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId `(string: &lt;required&gt;)` - A specific node where the volume is
         * mounted.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        /**
         * @param parameters `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
         * passed directly to the plugin to configure the volume. The details of these
         * parameters are specific to the plugin.
         * 
         * [`access_mode`]: /nomad/docs/other-specifications/volume/capability#access_mode
         * [`attachment_mode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
         * [volume_source]: /nomad/docs/job-specification/volume#source
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
         * passed directly to the plugin to configure the volume. The details of these
         * parameters are specific to the plugin.
         * 
         * [`access_mode`]: /nomad/docs/other-specifications/volume/capability#access_mode
         * [`attachment_mode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
         * [volume_source]: /nomad/docs/job-specification/volume#source
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        public DynamicHostVolumeRegistrationArgs build() {
            if ($.capabilities == null) {
                throw new MissingRequiredPropertyException("DynamicHostVolumeRegistrationArgs", "capabilities");
            }
            if ($.hostPath == null) {
                throw new MissingRequiredPropertyException("DynamicHostVolumeRegistrationArgs", "hostPath");
            }
            if ($.nodeId == null) {
                throw new MissingRequiredPropertyException("DynamicHostVolumeRegistrationArgs", "nodeId");
            }
            return $;
        }
    }

}
