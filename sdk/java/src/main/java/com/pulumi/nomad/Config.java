// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import com.pulumi.nomad.config.inputs.Headers;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("nomad");
/**
 * URL of the root of the target Nomad agent.
 * 
 */
    public String address() {
        return Codegen.stringProp("address").config(config).require();
    }
/**
 * A path to a PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
 * 
 */
    public Optional<String> caFile() {
        return Codegen.stringProp("caFile").config(config).get();
    }
/**
 * PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
 * 
 */
    public Optional<String> caPem() {
        return Codegen.stringProp("caPem").config(config).get();
    }
/**
 * A path to a PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
 * 
 */
    public Optional<String> certFile() {
        return Codegen.stringProp("certFile").config(config).get();
    }
/**
 * PEM-encoded certificate provided to the remote agent; requires use of keyFile or key_pem.
 * 
 */
    public Optional<String> certPem() {
        return Codegen.stringProp("certPem").config(config).get();
    }
/**
 * The headers to send with each Nomad request.
 * 
 */
    public Optional<List<Headers>> headers() {
        return Codegen.objectProp("headers", TypeShape.<List<Headers>>builder(List.class).addParameter(Headers.class).build()).config(config).get();
    }
/**
 * HTTP basic auth configuration.
 * 
 */
    public Optional<String> httpAuth() {
        return Codegen.stringProp("httpAuth").config(config).get();
    }
/**
 * A set of environment variables that are ignored by the provider when configuring the Nomad API client.
 * 
 */
    public Optional<Map<String,Boolean>> ignoreEnvVars() {
        return Codegen.objectProp("ignoreEnvVars", TypeShape.<Map<String,Boolean>>builder(Map.class).addParameter(String.class).addParameter(Boolean.class).build()).config(config).get();
    }
/**
 * A path to a PEM-encoded private key, required if certFile or certPem is specified.
 * 
 */
    public Optional<String> keyFile() {
        return Codegen.stringProp("keyFile").config(config).get();
    }
/**
 * PEM-encoded private key, required if certFile or certPem is specified.
 * 
 */
    public Optional<String> keyPem() {
        return Codegen.stringProp("keyPem").config(config).get();
    }
/**
 * Region of the target Nomad agent.
 * 
 */
    public Optional<String> region() {
        return Codegen.stringProp("region").config(config).get();
    }
/**
 * ACL token secret for API requests.
 * 
 */
    public Optional<String> secretId() {
        return Codegen.stringProp("secretId").config(config).get();
    }
/**
 * Skip TLS verification on client side.
 * 
 */
    public Optional<Boolean> skipVerify() {
        return Codegen.booleanProp("skipVerify").config(config).get();
    }
}
