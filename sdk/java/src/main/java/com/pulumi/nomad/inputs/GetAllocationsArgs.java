// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAllocationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAllocationsArgs Empty = new GetAllocationsArgs();

    /**
     * `(string: &lt;optional&gt;)` - Specifies the
     * [expression][nomad_api_filter] used to filter the results.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return `(string: &lt;optional&gt;)` - Specifies the
     * [expression][nomad_api_filter] used to filter the results.
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * `(string: &lt;optional&gt;)` - Specifies the namespace to search for
     * allocations in.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return `(string: &lt;optional&gt;)` - Specifies the namespace to search for
     * allocations in.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * `(string: &lt;optional&gt;)` - Specifies a string to filter allocations
     * based on an ID prefix.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return `(string: &lt;optional&gt;)` - Specifies a string to filter allocations
     * based on an ID prefix.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    private GetAllocationsArgs() {}

    private GetAllocationsArgs(GetAllocationsArgs $) {
        this.filter = $.filter;
        this.namespace = $.namespace;
        this.prefix = $.prefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAllocationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAllocationsArgs $;

        public Builder() {
            $ = new GetAllocationsArgs();
        }

        public Builder(GetAllocationsArgs defaults) {
            $ = new GetAllocationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter `(string: &lt;optional&gt;)` - Specifies the
         * [expression][nomad_api_filter] used to filter the results.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter `(string: &lt;optional&gt;)` - Specifies the
         * [expression][nomad_api_filter] used to filter the results.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param namespace `(string: &lt;optional&gt;)` - Specifies the namespace to search for
         * allocations in.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace `(string: &lt;optional&gt;)` - Specifies the namespace to search for
         * allocations in.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param prefix `(string: &lt;optional&gt;)` - Specifies a string to filter allocations
         * based on an ID prefix.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix `(string: &lt;optional&gt;)` - Specifies a string to filter allocations
         * based on an ID prefix.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public GetAllocationsArgs build() {
            return $;
        }
    }

}
