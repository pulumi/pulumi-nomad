// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.nomad.Utilities;
import com.pulumi.nomad.VolumeArgs;
import com.pulumi.nomad.inputs.VolumeState;
import com.pulumi.nomad.outputs.VolumeCapability;
import com.pulumi.nomad.outputs.VolumeMountOptions;
import com.pulumi.nomad.outputs.VolumeTopology;
import com.pulumi.nomad.outputs.VolumeTopologyRequest;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * Registering a volume:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.nomad.NomadFunctions;
 * import com.pulumi.nomad.inputs.GetPluginArgs;
 * import com.pulumi.nomad.Volume;
 * import com.pulumi.nomad.VolumeArgs;
 * import com.pulumi.nomad.inputs.VolumeCapabilityArgs;
 * import com.pulumi.nomad.inputs.VolumeMountOptionsArgs;
 * import com.pulumi.nomad.inputs.VolumeTopologyRequestArgs;
 * import com.pulumi.nomad.inputs.VolumeTopologyRequestRequiredArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // It can sometimes be helpful to wait for a particular plugin to be available
 *         final var ebs = NomadFunctions.getPlugin(GetPluginArgs.builder()
 *             .pluginId("aws-ebs0")
 *             .waitForHealthy(true)
 *             .build());
 * 
 *         var mysqlVolume = new Volume("mysqlVolume", VolumeArgs.builder()
 *             .type("csi")
 *             .pluginId("aws-ebs0")
 *             .volumeId("mysql_volume")
 *             .name("mysql_volume")
 *             .externalId(hashistack.ebsTestVolumeId())
 *             .capabilities(VolumeCapabilityArgs.builder()
 *                 .accessMode("single-node-writer")
 *                 .attachmentMode("file-system")
 *                 .build())
 *             .mountOptions(VolumeMountOptionsArgs.builder()
 *                 .fsType("ext4")
 *                 .build())
 *             .topologyRequest(VolumeTopologyRequestArgs.builder()
 *                 .required(VolumeTopologyRequestRequiredArgs.builder()
 *                     .topologies(                    
 *                         VolumeTopologyRequestRequiredTopologyArgs.builder()
 *                             .segments(Map.ofEntries(
 *                                 Map.entry("rack", "R1"),
 *                                 Map.entry("zone", "us-east-1a")
 *                             ))
 *                             .build(),
 *                         VolumeTopologyRequestRequiredTopologyArgs.builder()
 *                             .segments(Map.of("rack", "R2"))
 *                             .build())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(ebs.applyValue(getPluginResult -> getPluginResult))
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="nomad:index/volume:Volume")
public class Volume extends com.pulumi.resources.CustomResource {
    /**
     * `(string: &lt;optional&gt;)` - **Deprecated**. Use `capability` block instead. Defines whether a volume should be available concurrently. Possible values are:
     * - `single-node-reader-only`
     * - `single-node-writer`
     * - `multi-node-reader-only`
     * - `multi-node-single-writer`
     * - `multi-node-multi-writer`
     * 
     * @deprecated
     * use capability instead
     * 
     */
    @Deprecated /* use capability instead */
    @Export(name="accessMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessMode;

    /**
     * @return `(string: &lt;optional&gt;)` - **Deprecated**. Use `capability` block instead. Defines whether a volume should be available concurrently. Possible values are:
     * - `single-node-reader-only`
     * - `single-node-writer`
     * - `multi-node-reader-only`
     * - `multi-node-single-writer`
     * - `multi-node-multi-writer`
     * 
     */
    public Output<Optional<String>> accessMode() {
        return Codegen.optional(this.accessMode);
    }
    /**
     * `(string: &lt;otional&gt;)` - **Deprecated**. Use `capability` block instead. The storage API that will be used by the volume.
     * 
     * @deprecated
     * use capability instead
     * 
     */
    @Deprecated /* use capability instead */
    @Export(name="attachmentMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> attachmentMode;

    /**
     * @return `(string: &lt;otional&gt;)` - **Deprecated**. Use `capability` block instead. The storage API that will be used by the volume.
     * 
     */
    public Output<Optional<String>> attachmentMode() {
        return Codegen.optional(this.attachmentMode);
    }
    /**
     * `(``Capability``: &lt;required&gt;)` - Options for validating the capability of a volume.
     * 
     */
    @Export(name="capabilities", refs={List.class,VolumeCapability.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VolumeCapability>> capabilities;

    /**
     * @return `(``Capability``: &lt;required&gt;)` - Options for validating the capability of a volume.
     * 
     */
    public Output<Optional<List<VolumeCapability>>> capabilities() {
        return Codegen.optional(this.capabilities);
    }
    /**
     * `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
     * 
     */
    @Export(name="context", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> context;

    /**
     * @return `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
     * 
     */
    public Output<Optional<Map<String,String>>> context() {
        return Codegen.optional(this.context);
    }
    @Export(name="controllerRequired", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> controllerRequired;

    public Output<Boolean> controllerRequired() {
        return this.controllerRequired;
    }
    @Export(name="controllersExpected", refs={Integer.class}, tree="[0]")
    private Output<Integer> controllersExpected;

    public Output<Integer> controllersExpected() {
        return this.controllersExpected;
    }
    @Export(name="controllersHealthy", refs={Integer.class}, tree="[0]")
    private Output<Integer> controllersHealthy;

    public Output<Integer> controllersHealthy() {
        return this.controllersHealthy;
    }
    /**
     * `(boolean: true)` - If true, the volume will be deregistered on destroy.
     * 
     */
    @Export(name="deregisterOnDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deregisterOnDestroy;

    /**
     * @return `(boolean: true)` - If true, the volume will be deregistered on destroy.
     * 
     */
    public Output<Optional<Boolean>> deregisterOnDestroy() {
        return Codegen.optional(this.deregisterOnDestroy);
    }
    /**
     * `(string: &lt;required&gt;)` - The ID of the physical volume from the storage provider.
     * 
     */
    @Export(name="externalId", refs={String.class}, tree="[0]")
    private Output<String> externalId;

    /**
     * @return `(string: &lt;required&gt;)` - The ID of the physical volume from the storage provider.
     * 
     */
    public Output<String> externalId() {
        return this.externalId;
    }
    /**
     * `(block: &lt;optional&gt;)` Options for mounting `block-device` volumes without a pre-formatted file system.
     * 
     */
    @Export(name="mountOptions", refs={VolumeMountOptions.class}, tree="[0]")
    private Output</* @Nullable */ VolumeMountOptions> mountOptions;

    /**
     * @return `(block: &lt;optional&gt;)` Options for mounting `block-device` volumes without a pre-formatted file system.
     * 
     */
    public Output<Optional<VolumeMountOptions>> mountOptions() {
        return Codegen.optional(this.mountOptions);
    }
    /**
     * `(string: &lt;required&gt;)` - The display name for the volume.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return `(string: &lt;required&gt;)` - The display name for the volume.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * `(string: &#34;default&#34;)` - The namespace in which to register the volume.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return `(string: &#34;default&#34;)` - The namespace in which to register the volume.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    @Export(name="nodesExpected", refs={Integer.class}, tree="[0]")
    private Output<Integer> nodesExpected;

    public Output<Integer> nodesExpected() {
        return this.nodesExpected;
    }
    @Export(name="nodesHealthy", refs={Integer.class}, tree="[0]")
    private Output<Integer> nodesHealthy;

    public Output<Integer> nodesHealthy() {
        return this.nodesHealthy;
    }
    /**
     * `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     * 
     */
    @Export(name="parameters", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> parameters;

    /**
     * @return `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     * 
     */
    public Output<Optional<Map<String,String>>> parameters() {
        return Codegen.optional(this.parameters);
    }
    /**
     * `(string: &lt;required&gt;)` - The ID of the Nomad plugin for registering this volume.
     * 
     */
    @Export(name="pluginId", refs={String.class}, tree="[0]")
    private Output<String> pluginId;

    /**
     * @return `(string: &lt;required&gt;)` - The ID of the Nomad plugin for registering this volume.
     * 
     */
    public Output<String> pluginId() {
        return this.pluginId;
    }
    @Export(name="pluginProvider", refs={String.class}, tree="[0]")
    private Output<String> pluginProvider;

    public Output<String> pluginProvider() {
        return this.pluginProvider;
    }
    @Export(name="pluginProviderVersion", refs={String.class}, tree="[0]")
    private Output<String> pluginProviderVersion;

    public Output<String> pluginProviderVersion() {
        return this.pluginProviderVersion;
    }
    @Export(name="schedulable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> schedulable;

    public Output<Boolean> schedulable() {
        return this.schedulable;
    }
    /**
     * `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     * 
     */
    @Export(name="secrets", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> secrets;

    /**
     * @return `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     * 
     */
    public Output<Optional<Map<String,String>>> secrets() {
        return Codegen.optional(this.secrets);
    }
    @Export(name="topologies", refs={List.class,VolumeTopology.class}, tree="[0,1]")
    private Output<List<VolumeTopology>> topologies;

    public Output<List<VolumeTopology>> topologies() {
        return this.topologies;
    }
    /**
     * `(``TopologyRequest``: &lt;optional&gt;)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
     * 
     */
    @Export(name="topologyRequest", refs={VolumeTopologyRequest.class}, tree="[0]")
    private Output</* @Nullable */ VolumeTopologyRequest> topologyRequest;

    /**
     * @return `(``TopologyRequest``: &lt;optional&gt;)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
     * 
     */
    public Output<Optional<VolumeTopologyRequest>> topologyRequest() {
        return Codegen.optional(this.topologyRequest);
    }
    /**
     * `(string: &lt;required&gt;)` - The type of the volume. Currently, only `csi` is supported.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> type;

    /**
     * @return `(string: &lt;required&gt;)` - The type of the volume. Currently, only `csi` is supported.
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }
    /**
     * `(string: &lt;required&gt;)` - The unique ID of the volume.
     * 
     */
    @Export(name="volumeId", refs={String.class}, tree="[0]")
    private Output<String> volumeId;

    /**
     * @return `(string: &lt;required&gt;)` - The unique ID of the volume.
     * 
     */
    public Output<String> volumeId() {
        return this.volumeId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Volume(String name) {
        this(name, VolumeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Volume(String name, VolumeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Volume(String name, VolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("nomad:index/volume:Volume", name, args == null ? VolumeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Volume(String name, Output<String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("nomad:index/volume:Volume", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "secrets"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Volume get(String name, Output<String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Volume(name, id, state, options);
    }
}
