// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.nomad.inputs.ExternalVolumeCapabilityArgs;
import com.pulumi.nomad.inputs.ExternalVolumeMountOptionsArgs;
import com.pulumi.nomad.inputs.ExternalVolumeTopologyRequestArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalVolumeArgs Empty = new ExternalVolumeArgs();

    /**
     * Capabilities intended to be used in a job. At least one capability must be provided.
     * 
     */
    @Import(name="capabilities", required=true)
    private Output<List<ExternalVolumeCapabilityArgs>> capabilities;

    /**
     * @return Capabilities intended to be used in a job. At least one capability must be provided.
     * 
     */
    public Output<List<ExternalVolumeCapabilityArgs>> capabilities() {
        return this.capabilities;
    }

    /**
     * Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
     * 
     */
    @Import(name="capacityMax")
    private @Nullable Output<String> capacityMax;

    /**
     * @return Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
     * 
     */
    public Optional<Output<String>> capacityMax() {
        return Optional.ofNullable(this.capacityMax);
    }

    /**
     * Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
     * 
     */
    @Import(name="capacityMin")
    private @Nullable Output<String> capacityMin;

    /**
     * @return Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
     * 
     */
    public Optional<Output<String>> capacityMin() {
        return Optional.ofNullable(this.capacityMin);
    }

    /**
     * The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with &#39;snapshot_id&#39;.
     * 
     */
    @Import(name="cloneId")
    private @Nullable Output<String> cloneId;

    /**
     * @return The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with &#39;snapshot_id&#39;.
     * 
     */
    public Optional<Output<String>> cloneId() {
        return Optional.ofNullable(this.cloneId);
    }

    /**
     * Options for mounting &#39;block-device&#39; volumes without a pre-formatted file system.
     * 
     */
    @Import(name="mountOptions")
    private @Nullable Output<ExternalVolumeMountOptionsArgs> mountOptions;

    /**
     * @return Options for mounting &#39;block-device&#39; volumes without a pre-formatted file system.
     * 
     */
    public Optional<Output<ExternalVolumeMountOptionsArgs>> mountOptions() {
        return Optional.ofNullable(this.mountOptions);
    }

    /**
     * The display name of the volume.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name of the volume.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace in which to create the volume.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace in which to create the volume.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The ID of the CSI plugin that manages this volume.
     * 
     */
    @Import(name="pluginId", required=true)
    private Output<String> pluginId;

    /**
     * @return The ID of the CSI plugin that manages this volume.
     * 
     */
    public Output<String> pluginId() {
        return this.pluginId;
    }

    /**
     * An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     * 
     */
    @Import(name="secrets")
    private @Nullable Output<Map<String,String>> secrets;

    /**
     * @return An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     * 
     */
    public Optional<Output<Map<String,String>>> secrets() {
        return Optional.ofNullable(this.secrets);
    }

    /**
     * The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
     * &#39;clone_id&#39;.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
     * &#39;clone_id&#39;.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
     * 
     */
    @Import(name="topologyRequest")
    private @Nullable Output<ExternalVolumeTopologyRequestArgs> topologyRequest;

    /**
     * @return Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
     * 
     */
    public Optional<Output<ExternalVolumeTopologyRequestArgs>> topologyRequest() {
        return Optional.ofNullable(this.topologyRequest);
    }

    /**
     * The type of the volume. Currently, only &#39;csi&#39; is supported.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the volume. Currently, only &#39;csi&#39; is supported.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The unique ID of the volume, how jobs will refer to the volume.
     * 
     */
    @Import(name="volumeId", required=true)
    private Output<String> volumeId;

    /**
     * @return The unique ID of the volume, how jobs will refer to the volume.
     * 
     */
    public Output<String> volumeId() {
        return this.volumeId;
    }

    private ExternalVolumeArgs() {}

    private ExternalVolumeArgs(ExternalVolumeArgs $) {
        this.capabilities = $.capabilities;
        this.capacityMax = $.capacityMax;
        this.capacityMin = $.capacityMin;
        this.cloneId = $.cloneId;
        this.mountOptions = $.mountOptions;
        this.name = $.name;
        this.namespace = $.namespace;
        this.parameters = $.parameters;
        this.pluginId = $.pluginId;
        this.secrets = $.secrets;
        this.snapshotId = $.snapshotId;
        this.topologyRequest = $.topologyRequest;
        this.type = $.type;
        this.volumeId = $.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalVolumeArgs $;

        public Builder() {
            $ = new ExternalVolumeArgs();
        }

        public Builder(ExternalVolumeArgs defaults) {
            $ = new ExternalVolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capabilities Capabilities intended to be used in a job. At least one capability must be provided.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(Output<List<ExternalVolumeCapabilityArgs>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities Capabilities intended to be used in a job. At least one capability must be provided.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<ExternalVolumeCapabilityArgs> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param capabilities Capabilities intended to be used in a job. At least one capability must be provided.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(ExternalVolumeCapabilityArgs... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param capacityMax Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
         * 
         * @return builder
         * 
         */
        public Builder capacityMax(@Nullable Output<String> capacityMax) {
            $.capacityMax = capacityMax;
            return this;
        }

        /**
         * @param capacityMax Defines how large the volume can be. The storage provider may return a volume that is smaller than this value.
         * 
         * @return builder
         * 
         */
        public Builder capacityMax(String capacityMax) {
            return capacityMax(Output.of(capacityMax));
        }

        /**
         * @param capacityMin Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
         * 
         * @return builder
         * 
         */
        public Builder capacityMin(@Nullable Output<String> capacityMin) {
            $.capacityMin = capacityMin;
            return this;
        }

        /**
         * @param capacityMin Defines how small the volume can be. The storage provider may return a volume that is larger than this value.
         * 
         * @return builder
         * 
         */
        public Builder capacityMin(String capacityMin) {
            return capacityMin(Output.of(capacityMin));
        }

        /**
         * @param cloneId The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with &#39;snapshot_id&#39;.
         * 
         * @return builder
         * 
         */
        public Builder cloneId(@Nullable Output<String> cloneId) {
            $.cloneId = cloneId;
            return this;
        }

        /**
         * @param cloneId The volume ID to clone when creating this volume. Storage provider must support cloning. Conflicts with &#39;snapshot_id&#39;.
         * 
         * @return builder
         * 
         */
        public Builder cloneId(String cloneId) {
            return cloneId(Output.of(cloneId));
        }

        /**
         * @param mountOptions Options for mounting &#39;block-device&#39; volumes without a pre-formatted file system.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(@Nullable Output<ExternalVolumeMountOptionsArgs> mountOptions) {
            $.mountOptions = mountOptions;
            return this;
        }

        /**
         * @param mountOptions Options for mounting &#39;block-device&#39; volumes without a pre-formatted file system.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(ExternalVolumeMountOptionsArgs mountOptions) {
            return mountOptions(Output.of(mountOptions));
        }

        /**
         * @param name The display name of the volume.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name of the volume.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace in which to create the volume.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace in which to create the volume.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param parameters An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param pluginId The ID of the CSI plugin that manages this volume.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(Output<String> pluginId) {
            $.pluginId = pluginId;
            return this;
        }

        /**
         * @param pluginId The ID of the CSI plugin that manages this volume.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(String pluginId) {
            return pluginId(Output.of(pluginId));
        }

        /**
         * @param secrets An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
         * 
         * @return builder
         * 
         */
        public Builder secrets(@Nullable Output<Map<String,String>> secrets) {
            $.secrets = secrets;
            return this;
        }

        /**
         * @param secrets An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
         * 
         * @return builder
         * 
         */
        public Builder secrets(Map<String,String> secrets) {
            return secrets(Output.of(secrets));
        }

        /**
         * @param snapshotId The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
         * &#39;clone_id&#39;.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId The snapshot ID to restore when creating this volume. Storage provider must support snapshots. Conflicts with
         * &#39;clone_id&#39;.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param topologyRequest Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
         * 
         * @return builder
         * 
         */
        public Builder topologyRequest(@Nullable Output<ExternalVolumeTopologyRequestArgs> topologyRequest) {
            $.topologyRequest = topologyRequest;
            return this;
        }

        /**
         * @param topologyRequest Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
         * 
         * @return builder
         * 
         */
        public Builder topologyRequest(ExternalVolumeTopologyRequestArgs topologyRequest) {
            return topologyRequest(Output.of(topologyRequest));
        }

        /**
         * @param type The type of the volume. Currently, only &#39;csi&#39; is supported.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the volume. Currently, only &#39;csi&#39; is supported.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param volumeId The unique ID of the volume, how jobs will refer to the volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(Output<String> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        /**
         * @param volumeId The unique ID of the volume, how jobs will refer to the volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(String volumeId) {
            return volumeId(Output.of(volumeId));
        }

        public ExternalVolumeArgs build() {
            $.capabilities = Objects.requireNonNull($.capabilities, "expected parameter 'capabilities' to be non-null");
            $.pluginId = Objects.requireNonNull($.pluginId, "expected parameter 'pluginId' to be non-null");
            $.volumeId = Objects.requireNonNull($.volumeId, "expected parameter 'volumeId' to be non-null");
            return $;
        }
    }

}
