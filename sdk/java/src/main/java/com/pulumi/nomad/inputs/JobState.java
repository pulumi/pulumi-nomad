// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.nomad.inputs.JobHcl2Args;
import com.pulumi.nomad.inputs.JobTaskGroupArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobState extends com.pulumi.resources.ResourceArgs {

    public static final JobState Empty = new JobState();

    /**
     * The IDs for allocations associated with this job.
     * 
     * @deprecated
     * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead.
     * 
     */
    @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead. */
    @Import(name="allocationIds")
    private @Nullable Output<List<String>> allocationIds;

    /**
     * @return The IDs for allocations associated with this job.
     * 
     * @deprecated
     * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead.
     * 
     */
    @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead. */
    public Optional<Output<List<String>>> allocationIds() {
        return Optional.ofNullable(this.allocationIds);
    }

    /**
     * `(string: &lt;optional&gt;)` - Consul token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     * 
     */
    @Import(name="consulToken")
    private @Nullable Output<String> consulToken;

    /**
     * @return `(string: &lt;optional&gt;)` - Consul token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     * 
     */
    public Optional<Output<String>> consulToken() {
        return Optional.ofNullable(this.consulToken);
    }

    /**
     * The target datacenters for the job, as derived from the jobspec.
     * 
     */
    @Import(name="datacenters")
    private @Nullable Output<List<String>> datacenters;

    /**
     * @return The target datacenters for the job, as derived from the jobspec.
     * 
     */
    public Optional<Output<List<String>>> datacenters() {
        return Optional.ofNullable(this.datacenters);
    }

    /**
     * If detach = false, the ID for the deployment associated with the last job create/update, if one exists.
     * 
     */
    @Import(name="deploymentId")
    private @Nullable Output<String> deploymentId;

    /**
     * @return If detach = false, the ID for the deployment associated with the last job create/update, if one exists.
     * 
     */
    public Optional<Output<String>> deploymentId() {
        return Optional.ofNullable(this.deploymentId);
    }

    /**
     * If detach = false, the status for the deployment associated with the last job create/update, if one exists.
     * 
     */
    @Import(name="deploymentStatus")
    private @Nullable Output<String> deploymentStatus;

    /**
     * @return If detach = false, the status for the deployment associated with the last job create/update, if one exists.
     * 
     */
    public Optional<Output<String>> deploymentStatus() {
        return Optional.ofNullable(this.deploymentStatus);
    }

    /**
     * If true, the job will be deregistered on destroy.
     * 
     */
    @Import(name="deregisterOnDestroy")
    private @Nullable Output<Boolean> deregisterOnDestroy;

    /**
     * @return If true, the job will be deregistered on destroy.
     * 
     */
    public Optional<Output<Boolean>> deregisterOnDestroy() {
        return Optional.ofNullable(this.deregisterOnDestroy);
    }

    /**
     * `(boolean: true)` - Determines if the job will be
     * deregistered if the ID of the job in the jobspec changes.
     * 
     */
    @Import(name="deregisterOnIdChange")
    private @Nullable Output<Boolean> deregisterOnIdChange;

    /**
     * @return `(boolean: true)` - Determines if the job will be
     * deregistered if the ID of the job in the jobspec changes.
     * 
     */
    public Optional<Output<Boolean>> deregisterOnIdChange() {
        return Optional.ofNullable(this.deregisterOnIdChange);
    }

    /**
     * `(boolean: true)` - If true, the provider will return immediately
     * after creating or updating, instead of monitoring.
     * 
     */
    @Import(name="detach")
    private @Nullable Output<Boolean> detach;

    /**
     * @return `(boolean: true)` - If true, the provider will return immediately
     * after creating or updating, instead of monitoring.
     * 
     */
    public Optional<Output<Boolean>> detach() {
        return Optional.ofNullable(this.detach);
    }

    /**
     * `(block: optional)` - Options for the HCL2 jobspec parser.
     * 
     */
    @Import(name="hcl2")
    private @Nullable Output<JobHcl2Args> hcl2;

    /**
     * @return `(block: optional)` - Options for the HCL2 jobspec parser.
     * 
     */
    public Optional<Output<JobHcl2Args>> hcl2() {
        return Optional.ofNullable(this.hcl2);
    }

    /**
     * `(string: &lt;required&gt;)` - The contents of the jobspec to register.
     * 
     */
    @Import(name="jobspec")
    private @Nullable Output<String> jobspec;

    /**
     * @return `(string: &lt;required&gt;)` - The contents of the jobspec to register.
     * 
     */
    public Optional<Output<String>> jobspec() {
        return Optional.ofNullable(this.jobspec);
    }

    /**
     * `(boolean: false)` - Set this to `true` if your jobspec is structured with
     * JSON instead of the default HCL.
     * 
     */
    @Import(name="json")
    private @Nullable Output<Boolean> json;

    /**
     * @return `(boolean: false)` - Set this to `true` if your jobspec is structured with
     * JSON instead of the default HCL.
     * 
     */
    public Optional<Output<Boolean>> json() {
        return Optional.ofNullable(this.json);
    }

    /**
     * Integer that increments for each change. Used to detect any changes between plan and apply.
     * 
     */
    @Import(name="modifyIndex")
    private @Nullable Output<String> modifyIndex;

    /**
     * @return Integer that increments for each change. Used to detect any changes between plan and apply.
     * 
     */
    public Optional<Output<String>> modifyIndex() {
        return Optional.ofNullable(this.modifyIndex);
    }

    /**
     * The name of the job, as derived from the jobspec.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the job, as derived from the jobspec.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace of the job, as derived from the jobspec.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace of the job, as derived from the jobspec.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * `(boolean: false)` - Determines if the job will override any
     * soft-mandatory Sentinel policies and register even if they fail.
     * 
     */
    @Import(name="policyOverride")
    private @Nullable Output<Boolean> policyOverride;

    /**
     * @return `(boolean: false)` - Determines if the job will override any
     * soft-mandatory Sentinel policies and register even if they fail.
     * 
     */
    public Optional<Output<Boolean>> policyOverride() {
        return Optional.ofNullable(this.policyOverride);
    }

    /**
     * `(boolean: false)` - Set this to true if you want the job to
     * be purged when the resource is destroyed.
     * 
     */
    @Import(name="purgeOnDestroy")
    private @Nullable Output<Boolean> purgeOnDestroy;

    /**
     * @return `(boolean: false)` - Set this to true if you want the job to
     * be purged when the resource is destroyed.
     * 
     */
    public Optional<Output<Boolean>> purgeOnDestroy() {
        return Optional.ofNullable(this.purgeOnDestroy);
    }

    /**
     * @deprecated
     * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead.
     * 
     */
    @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead. */
    @Import(name="readAllocationIds")
    private @Nullable Output<Boolean> readAllocationIds;

    /**
     * @deprecated
     * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead.
     * 
     */
    @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead. */
    public Optional<Output<Boolean>> readAllocationIds() {
        return Optional.ofNullable(this.readAllocationIds);
    }

    /**
     * The target region for the job, as derived from the jobspec.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The target region for the job, as derived from the jobspec.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * `(boolean: false)` - Set this to true to force the job to run
     * again if its status is `dead`.
     * 
     */
    @Import(name="rerunIfDead")
    private @Nullable Output<Boolean> rerunIfDead;

    /**
     * @return `(boolean: false)` - Set this to true to force the job to run
     * again if its status is `dead`.
     * 
     */
    public Optional<Output<Boolean>> rerunIfDead() {
        return Optional.ofNullable(this.rerunIfDead);
    }

    /**
     * The status of the job.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the job.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="taskGroups")
    private @Nullable Output<List<JobTaskGroupArgs>> taskGroups;

    public Optional<Output<List<JobTaskGroupArgs>>> taskGroups() {
        return Optional.ofNullable(this.taskGroups);
    }

    /**
     * The type of the job, as derived from the jobspec.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the job, as derived from the jobspec.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * `(string: &lt;optional&gt;)` - Vault token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     * 
     */
    @Import(name="vaultToken")
    private @Nullable Output<String> vaultToken;

    /**
     * @return `(string: &lt;optional&gt;)` - Vault token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     * 
     */
    public Optional<Output<String>> vaultToken() {
        return Optional.ofNullable(this.vaultToken);
    }

    private JobState() {}

    private JobState(JobState $) {
        this.allocationIds = $.allocationIds;
        this.consulToken = $.consulToken;
        this.datacenters = $.datacenters;
        this.deploymentId = $.deploymentId;
        this.deploymentStatus = $.deploymentStatus;
        this.deregisterOnDestroy = $.deregisterOnDestroy;
        this.deregisterOnIdChange = $.deregisterOnIdChange;
        this.detach = $.detach;
        this.hcl2 = $.hcl2;
        this.jobspec = $.jobspec;
        this.json = $.json;
        this.modifyIndex = $.modifyIndex;
        this.name = $.name;
        this.namespace = $.namespace;
        this.policyOverride = $.policyOverride;
        this.purgeOnDestroy = $.purgeOnDestroy;
        this.readAllocationIds = $.readAllocationIds;
        this.region = $.region;
        this.rerunIfDead = $.rerunIfDead;
        this.status = $.status;
        this.taskGroups = $.taskGroups;
        this.type = $.type;
        this.vaultToken = $.vaultToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobState $;

        public Builder() {
            $ = new JobState();
        }

        public Builder(JobState defaults) {
            $ = new JobState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationIds The IDs for allocations associated with this job.
         * 
         * @return builder
         * 
         * @deprecated
         * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead.
         * 
         */
        @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead. */
        public Builder allocationIds(@Nullable Output<List<String>> allocationIds) {
            $.allocationIds = allocationIds;
            return this;
        }

        /**
         * @param allocationIds The IDs for allocations associated with this job.
         * 
         * @return builder
         * 
         * @deprecated
         * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead.
         * 
         */
        @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead. */
        public Builder allocationIds(List<String> allocationIds) {
            return allocationIds(Output.of(allocationIds));
        }

        /**
         * @param allocationIds The IDs for allocations associated with this job.
         * 
         * @return builder
         * 
         * @deprecated
         * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead.
         * 
         */
        @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead. */
        public Builder allocationIds(String... allocationIds) {
            return allocationIds(List.of(allocationIds));
        }

        /**
         * @param consulToken `(string: &lt;optional&gt;)` - Consul token used when registering this job.
         * Will fallback to the value declared in Nomad provider configuration, if any.
         * 
         * @return builder
         * 
         */
        public Builder consulToken(@Nullable Output<String> consulToken) {
            $.consulToken = consulToken;
            return this;
        }

        /**
         * @param consulToken `(string: &lt;optional&gt;)` - Consul token used when registering this job.
         * Will fallback to the value declared in Nomad provider configuration, if any.
         * 
         * @return builder
         * 
         */
        public Builder consulToken(String consulToken) {
            return consulToken(Output.of(consulToken));
        }

        /**
         * @param datacenters The target datacenters for the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder datacenters(@Nullable Output<List<String>> datacenters) {
            $.datacenters = datacenters;
            return this;
        }

        /**
         * @param datacenters The target datacenters for the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder datacenters(List<String> datacenters) {
            return datacenters(Output.of(datacenters));
        }

        /**
         * @param datacenters The target datacenters for the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder datacenters(String... datacenters) {
            return datacenters(List.of(datacenters));
        }

        /**
         * @param deploymentId If detach = false, the ID for the deployment associated with the last job create/update, if one exists.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(@Nullable Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param deploymentId If detach = false, the ID for the deployment associated with the last job create/update, if one exists.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        /**
         * @param deploymentStatus If detach = false, the status for the deployment associated with the last job create/update, if one exists.
         * 
         * @return builder
         * 
         */
        public Builder deploymentStatus(@Nullable Output<String> deploymentStatus) {
            $.deploymentStatus = deploymentStatus;
            return this;
        }

        /**
         * @param deploymentStatus If detach = false, the status for the deployment associated with the last job create/update, if one exists.
         * 
         * @return builder
         * 
         */
        public Builder deploymentStatus(String deploymentStatus) {
            return deploymentStatus(Output.of(deploymentStatus));
        }

        /**
         * @param deregisterOnDestroy If true, the job will be deregistered on destroy.
         * 
         * @return builder
         * 
         */
        public Builder deregisterOnDestroy(@Nullable Output<Boolean> deregisterOnDestroy) {
            $.deregisterOnDestroy = deregisterOnDestroy;
            return this;
        }

        /**
         * @param deregisterOnDestroy If true, the job will be deregistered on destroy.
         * 
         * @return builder
         * 
         */
        public Builder deregisterOnDestroy(Boolean deregisterOnDestroy) {
            return deregisterOnDestroy(Output.of(deregisterOnDestroy));
        }

        /**
         * @param deregisterOnIdChange `(boolean: true)` - Determines if the job will be
         * deregistered if the ID of the job in the jobspec changes.
         * 
         * @return builder
         * 
         */
        public Builder deregisterOnIdChange(@Nullable Output<Boolean> deregisterOnIdChange) {
            $.deregisterOnIdChange = deregisterOnIdChange;
            return this;
        }

        /**
         * @param deregisterOnIdChange `(boolean: true)` - Determines if the job will be
         * deregistered if the ID of the job in the jobspec changes.
         * 
         * @return builder
         * 
         */
        public Builder deregisterOnIdChange(Boolean deregisterOnIdChange) {
            return deregisterOnIdChange(Output.of(deregisterOnIdChange));
        }

        /**
         * @param detach `(boolean: true)` - If true, the provider will return immediately
         * after creating or updating, instead of monitoring.
         * 
         * @return builder
         * 
         */
        public Builder detach(@Nullable Output<Boolean> detach) {
            $.detach = detach;
            return this;
        }

        /**
         * @param detach `(boolean: true)` - If true, the provider will return immediately
         * after creating or updating, instead of monitoring.
         * 
         * @return builder
         * 
         */
        public Builder detach(Boolean detach) {
            return detach(Output.of(detach));
        }

        /**
         * @param hcl2 `(block: optional)` - Options for the HCL2 jobspec parser.
         * 
         * @return builder
         * 
         */
        public Builder hcl2(@Nullable Output<JobHcl2Args> hcl2) {
            $.hcl2 = hcl2;
            return this;
        }

        /**
         * @param hcl2 `(block: optional)` - Options for the HCL2 jobspec parser.
         * 
         * @return builder
         * 
         */
        public Builder hcl2(JobHcl2Args hcl2) {
            return hcl2(Output.of(hcl2));
        }

        /**
         * @param jobspec `(string: &lt;required&gt;)` - The contents of the jobspec to register.
         * 
         * @return builder
         * 
         */
        public Builder jobspec(@Nullable Output<String> jobspec) {
            $.jobspec = jobspec;
            return this;
        }

        /**
         * @param jobspec `(string: &lt;required&gt;)` - The contents of the jobspec to register.
         * 
         * @return builder
         * 
         */
        public Builder jobspec(String jobspec) {
            return jobspec(Output.of(jobspec));
        }

        /**
         * @param json `(boolean: false)` - Set this to `true` if your jobspec is structured with
         * JSON instead of the default HCL.
         * 
         * @return builder
         * 
         */
        public Builder json(@Nullable Output<Boolean> json) {
            $.json = json;
            return this;
        }

        /**
         * @param json `(boolean: false)` - Set this to `true` if your jobspec is structured with
         * JSON instead of the default HCL.
         * 
         * @return builder
         * 
         */
        public Builder json(Boolean json) {
            return json(Output.of(json));
        }

        /**
         * @param modifyIndex Integer that increments for each change. Used to detect any changes between plan and apply.
         * 
         * @return builder
         * 
         */
        public Builder modifyIndex(@Nullable Output<String> modifyIndex) {
            $.modifyIndex = modifyIndex;
            return this;
        }

        /**
         * @param modifyIndex Integer that increments for each change. Used to detect any changes between plan and apply.
         * 
         * @return builder
         * 
         */
        public Builder modifyIndex(String modifyIndex) {
            return modifyIndex(Output.of(modifyIndex));
        }

        /**
         * @param name The name of the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace of the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace of the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param policyOverride `(boolean: false)` - Determines if the job will override any
         * soft-mandatory Sentinel policies and register even if they fail.
         * 
         * @return builder
         * 
         */
        public Builder policyOverride(@Nullable Output<Boolean> policyOverride) {
            $.policyOverride = policyOverride;
            return this;
        }

        /**
         * @param policyOverride `(boolean: false)` - Determines if the job will override any
         * soft-mandatory Sentinel policies and register even if they fail.
         * 
         * @return builder
         * 
         */
        public Builder policyOverride(Boolean policyOverride) {
            return policyOverride(Output.of(policyOverride));
        }

        /**
         * @param purgeOnDestroy `(boolean: false)` - Set this to true if you want the job to
         * be purged when the resource is destroyed.
         * 
         * @return builder
         * 
         */
        public Builder purgeOnDestroy(@Nullable Output<Boolean> purgeOnDestroy) {
            $.purgeOnDestroy = purgeOnDestroy;
            return this;
        }

        /**
         * @param purgeOnDestroy `(boolean: false)` - Set this to true if you want the job to
         * be purged when the resource is destroyed.
         * 
         * @return builder
         * 
         */
        public Builder purgeOnDestroy(Boolean purgeOnDestroy) {
            return purgeOnDestroy(Output.of(purgeOnDestroy));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead.
         * 
         */
        @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead. */
        public Builder readAllocationIds(@Nullable Output<Boolean> readAllocationIds) {
            $.readAllocationIds = readAllocationIds;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead.
         * 
         */
        @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad.getAllocations data source instead. */
        public Builder readAllocationIds(Boolean readAllocationIds) {
            return readAllocationIds(Output.of(readAllocationIds));
        }

        /**
         * @param region The target region for the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The target region for the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param rerunIfDead `(boolean: false)` - Set this to true to force the job to run
         * again if its status is `dead`.
         * 
         * @return builder
         * 
         */
        public Builder rerunIfDead(@Nullable Output<Boolean> rerunIfDead) {
            $.rerunIfDead = rerunIfDead;
            return this;
        }

        /**
         * @param rerunIfDead `(boolean: false)` - Set this to true to force the job to run
         * again if its status is `dead`.
         * 
         * @return builder
         * 
         */
        public Builder rerunIfDead(Boolean rerunIfDead) {
            return rerunIfDead(Output.of(rerunIfDead));
        }

        /**
         * @param status The status of the job.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the job.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder taskGroups(@Nullable Output<List<JobTaskGroupArgs>> taskGroups) {
            $.taskGroups = taskGroups;
            return this;
        }

        public Builder taskGroups(List<JobTaskGroupArgs> taskGroups) {
            return taskGroups(Output.of(taskGroups));
        }

        public Builder taskGroups(JobTaskGroupArgs... taskGroups) {
            return taskGroups(List.of(taskGroups));
        }

        /**
         * @param type The type of the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the job, as derived from the jobspec.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vaultToken `(string: &lt;optional&gt;)` - Vault token used when registering this job.
         * Will fallback to the value declared in Nomad provider configuration, if any.
         * 
         * @return builder
         * 
         */
        public Builder vaultToken(@Nullable Output<String> vaultToken) {
            $.vaultToken = vaultToken;
            return this;
        }

        /**
         * @param vaultToken `(string: &lt;optional&gt;)` - Vault token used when registering this job.
         * Will fallback to the value declared in Nomad provider configuration, if any.
         * 
         * @return builder
         * 
         */
        public Builder vaultToken(String vaultToken) {
            return vaultToken(Output.of(vaultToken));
        }

        public JobState build() {
            return $;
        }
    }

}
