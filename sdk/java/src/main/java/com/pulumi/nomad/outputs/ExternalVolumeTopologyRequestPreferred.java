// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.nomad.outputs.ExternalVolumeTopologyRequestPreferredTopology;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ExternalVolumeTopologyRequestPreferred {
    /**
     * @return Defines the location for the volume.
     * 
     */
    private List<ExternalVolumeTopologyRequestPreferredTopology> topologies;

    private ExternalVolumeTopologyRequestPreferred() {}
    /**
     * @return Defines the location for the volume.
     * 
     */
    public List<ExternalVolumeTopologyRequestPreferredTopology> topologies() {
        return this.topologies;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalVolumeTopologyRequestPreferred defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<ExternalVolumeTopologyRequestPreferredTopology> topologies;
        public Builder() {}
        public Builder(ExternalVolumeTopologyRequestPreferred defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.topologies = defaults.topologies;
        }

        @CustomType.Setter
        public Builder topologies(List<ExternalVolumeTopologyRequestPreferredTopology> topologies) {
            if (topologies == null) {
              throw new MissingRequiredPropertyException("ExternalVolumeTopologyRequestPreferred", "topologies");
            }
            this.topologies = topologies;
            return this;
        }
        public Builder topologies(ExternalVolumeTopologyRequestPreferredTopology... topologies) {
            return topologies(List.of(topologies));
        }
        public ExternalVolumeTopologyRequestPreferred build() {
            final var _resultValue = new ExternalVolumeTopologyRequestPreferred();
            _resultValue.topologies = topologies;
            return _resultValue;
        }
    }
}
