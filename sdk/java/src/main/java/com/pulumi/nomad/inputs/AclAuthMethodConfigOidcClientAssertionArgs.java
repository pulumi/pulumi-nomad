// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.nomad.inputs.AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclAuthMethodConfigOidcClientAssertionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclAuthMethodConfigOidcClientAssertionArgs Empty = new AclAuthMethodConfigOidcClientAssertionArgs();

    /**
     * `([]string: optional)` - Who processes the assertion.
     * Defaults to the auth method&#39;s `oidc_discovery_url`.
     * 
     */
    @Import(name="audiences")
    private @Nullable Output<List<String>> audiences;

    /**
     * @return `([]string: optional)` - Who processes the assertion.
     * Defaults to the auth method&#39;s `oidc_discovery_url`.
     * 
     */
    public Optional<Output<List<String>>> audiences() {
        return Optional.ofNullable(this.audiences);
    }

    /**
     * `(map[string]string: optional)` - Add to the JWT headers,
     * alongside &#34;kid&#34; and &#34;type&#34;. Setting the &#34;kid&#34; header here is not allowed;
     * use `private_key.key_id`.
     * 
     */
    @Import(name="extraHeaders")
    private @Nullable Output<Map<String,String>> extraHeaders;

    /**
     * @return `(map[string]string: optional)` - Add to the JWT headers,
     * alongside &#34;kid&#34; and &#34;type&#34;. Setting the &#34;kid&#34; header here is not allowed;
     * use `private_key.key_id`.
     * 
     */
    public Optional<Output<Map<String,String>>> extraHeaders() {
        return Optional.ofNullable(this.extraHeaders);
    }

    /**
     * `(string: &lt;optional&gt;)` is the key&#39;s algorithm.
     * Its default values are based on the `key_source`:
     * - &#34;nomad&#34;: &#34;RS256&#34;; this is from Nomad&#39;s keyring and must not be changed
     * - &#34;private_key&#34;: &#34;RS256&#34;; must be RS256, RS384, or RS512
     * - &#34;client_secret&#34;: &#34;HS256&#34;; must be HS256, HS384, or HS512
     * 
     */
    @Import(name="keyAlgorithm")
    private @Nullable Output<String> keyAlgorithm;

    /**
     * @return `(string: &lt;optional&gt;)` is the key&#39;s algorithm.
     * Its default values are based on the `key_source`:
     * - &#34;nomad&#34;: &#34;RS256&#34;; this is from Nomad&#39;s keyring and must not be changed
     * - &#34;private_key&#34;: &#34;RS256&#34;; must be RS256, RS384, or RS512
     * - &#34;client_secret&#34;: &#34;HS256&#34;; must be HS256, HS384, or HS512
     * 
     */
    public Optional<Output<String>> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }

    /**
     * `(string: &lt;required&gt;)` - Specifies where to get the private
     * key to sign the JWT.
     * Available sources:
     * - &#34;nomad&#34;: Use current active key in Nomad&#39;s keyring
     * - &#34;private_key&#34;: Use key material in the `private_key` field
     * - &#34;client_secret&#34;: Use the `oidc_client_secret` as an HMAC key
     * 
     */
    @Import(name="keySource", required=true)
    private Output<String> keySource;

    /**
     * @return `(string: &lt;required&gt;)` - Specifies where to get the private
     * key to sign the JWT.
     * Available sources:
     * - &#34;nomad&#34;: Use current active key in Nomad&#39;s keyring
     * - &#34;private_key&#34;: Use key material in the `private_key` field
     * - &#34;client_secret&#34;: Use the `oidc_client_secret` as an HMAC key
     * 
     */
    public Output<String> keySource() {
        return this.keySource;
    }

    /**
     * `(OIDCClientAssertionKey: &lt;optional&gt;)` - External key
     * to sign the JWT. `key_source` must be &#34;private_key&#34; to enable this.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs> privateKey;

    /**
     * @return `(OIDCClientAssertionKey: &lt;optional&gt;)` - External key
     * to sign the JWT. `key_source` must be &#34;private_key&#34; to enable this.
     * 
     */
    public Optional<Output<AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    private AclAuthMethodConfigOidcClientAssertionArgs() {}

    private AclAuthMethodConfigOidcClientAssertionArgs(AclAuthMethodConfigOidcClientAssertionArgs $) {
        this.audiences = $.audiences;
        this.extraHeaders = $.extraHeaders;
        this.keyAlgorithm = $.keyAlgorithm;
        this.keySource = $.keySource;
        this.privateKey = $.privateKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclAuthMethodConfigOidcClientAssertionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclAuthMethodConfigOidcClientAssertionArgs $;

        public Builder() {
            $ = new AclAuthMethodConfigOidcClientAssertionArgs();
        }

        public Builder(AclAuthMethodConfigOidcClientAssertionArgs defaults) {
            $ = new AclAuthMethodConfigOidcClientAssertionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audiences `([]string: optional)` - Who processes the assertion.
         * Defaults to the auth method&#39;s `oidc_discovery_url`.
         * 
         * @return builder
         * 
         */
        public Builder audiences(@Nullable Output<List<String>> audiences) {
            $.audiences = audiences;
            return this;
        }

        /**
         * @param audiences `([]string: optional)` - Who processes the assertion.
         * Defaults to the auth method&#39;s `oidc_discovery_url`.
         * 
         * @return builder
         * 
         */
        public Builder audiences(List<String> audiences) {
            return audiences(Output.of(audiences));
        }

        /**
         * @param audiences `([]string: optional)` - Who processes the assertion.
         * Defaults to the auth method&#39;s `oidc_discovery_url`.
         * 
         * @return builder
         * 
         */
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }

        /**
         * @param extraHeaders `(map[string]string: optional)` - Add to the JWT headers,
         * alongside &#34;kid&#34; and &#34;type&#34;. Setting the &#34;kid&#34; header here is not allowed;
         * use `private_key.key_id`.
         * 
         * @return builder
         * 
         */
        public Builder extraHeaders(@Nullable Output<Map<String,String>> extraHeaders) {
            $.extraHeaders = extraHeaders;
            return this;
        }

        /**
         * @param extraHeaders `(map[string]string: optional)` - Add to the JWT headers,
         * alongside &#34;kid&#34; and &#34;type&#34;. Setting the &#34;kid&#34; header here is not allowed;
         * use `private_key.key_id`.
         * 
         * @return builder
         * 
         */
        public Builder extraHeaders(Map<String,String> extraHeaders) {
            return extraHeaders(Output.of(extraHeaders));
        }

        /**
         * @param keyAlgorithm `(string: &lt;optional&gt;)` is the key&#39;s algorithm.
         * Its default values are based on the `key_source`:
         * - &#34;nomad&#34;: &#34;RS256&#34;; this is from Nomad&#39;s keyring and must not be changed
         * - &#34;private_key&#34;: &#34;RS256&#34;; must be RS256, RS384, or RS512
         * - &#34;client_secret&#34;: &#34;HS256&#34;; must be HS256, HS384, or HS512
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(@Nullable Output<String> keyAlgorithm) {
            $.keyAlgorithm = keyAlgorithm;
            return this;
        }

        /**
         * @param keyAlgorithm `(string: &lt;optional&gt;)` is the key&#39;s algorithm.
         * Its default values are based on the `key_source`:
         * - &#34;nomad&#34;: &#34;RS256&#34;; this is from Nomad&#39;s keyring and must not be changed
         * - &#34;private_key&#34;: &#34;RS256&#34;; must be RS256, RS384, or RS512
         * - &#34;client_secret&#34;: &#34;HS256&#34;; must be HS256, HS384, or HS512
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(String keyAlgorithm) {
            return keyAlgorithm(Output.of(keyAlgorithm));
        }

        /**
         * @param keySource `(string: &lt;required&gt;)` - Specifies where to get the private
         * key to sign the JWT.
         * Available sources:
         * - &#34;nomad&#34;: Use current active key in Nomad&#39;s keyring
         * - &#34;private_key&#34;: Use key material in the `private_key` field
         * - &#34;client_secret&#34;: Use the `oidc_client_secret` as an HMAC key
         * 
         * @return builder
         * 
         */
        public Builder keySource(Output<String> keySource) {
            $.keySource = keySource;
            return this;
        }

        /**
         * @param keySource `(string: &lt;required&gt;)` - Specifies where to get the private
         * key to sign the JWT.
         * Available sources:
         * - &#34;nomad&#34;: Use current active key in Nomad&#39;s keyring
         * - &#34;private_key&#34;: Use key material in the `private_key` field
         * - &#34;client_secret&#34;: Use the `oidc_client_secret` as an HMAC key
         * 
         * @return builder
         * 
         */
        public Builder keySource(String keySource) {
            return keySource(Output.of(keySource));
        }

        /**
         * @param privateKey `(OIDCClientAssertionKey: &lt;optional&gt;)` - External key
         * to sign the JWT. `key_source` must be &#34;private_key&#34; to enable this.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey `(OIDCClientAssertionKey: &lt;optional&gt;)` - External key
         * to sign the JWT. `key_source` must be &#34;private_key&#34; to enable this.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(AclAuthMethodConfigOidcClientAssertionPrivateKeyArgs privateKey) {
            return privateKey(Output.of(privateKey));
        }

        public AclAuthMethodConfigOidcClientAssertionArgs build() {
            if ($.keySource == null) {
                throw new MissingRequiredPropertyException("AclAuthMethodConfigOidcClientAssertionArgs", "keySource");
            }
            return $;
        }
    }

}
