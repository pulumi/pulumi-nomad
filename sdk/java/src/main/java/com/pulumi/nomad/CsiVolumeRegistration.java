// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.nomad.CsiVolumeRegistrationArgs;
import com.pulumi.nomad.Utilities;
import com.pulumi.nomad.inputs.CsiVolumeRegistrationState;
import com.pulumi.nomad.outputs.CsiVolumeRegistrationCapability;
import com.pulumi.nomad.outputs.CsiVolumeRegistrationMountOptions;
import com.pulumi.nomad.outputs.CsiVolumeRegistrationTopology;
import com.pulumi.nomad.outputs.CsiVolumeRegistrationTopologyRequest;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="nomad:index/csiVolumeRegistration:CsiVolumeRegistration")
public class CsiVolumeRegistration extends com.pulumi.resources.CustomResource {
    /**
     * `(``Capability``: &lt;required&gt;)` - Options for validating the capability of a volume.
     * 
     */
    @Export(name="capabilities", refs={List.class,CsiVolumeRegistrationCapability.class}, tree="[0,1]")
    private Output</* @Nullable */ List<CsiVolumeRegistrationCapability>> capabilities;

    /**
     * @return `(``Capability``: &lt;required&gt;)` - Options for validating the capability of a volume.
     * 
     */
    public Output<Optional<List<CsiVolumeRegistrationCapability>>> capabilities() {
        return Codegen.optional(this.capabilities);
    }
    @Export(name="capacity", refs={Integer.class}, tree="[0]")
    private Output<Integer> capacity;

    public Output<Integer> capacity() {
        return this.capacity;
    }
    /**
     * `(string: &lt;optional&gt;)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
     * 
     */
    @Export(name="capacityMax", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> capacityMax;

    /**
     * @return `(string: &lt;optional&gt;)` - Option to signal a maximum volume size. This may not be supported by all storage providers.
     * 
     */
    public Output<Optional<String>> capacityMax() {
        return Codegen.optional(this.capacityMax);
    }
    @Export(name="capacityMaxBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> capacityMaxBytes;

    public Output<Integer> capacityMaxBytes() {
        return this.capacityMaxBytes;
    }
    /**
     * `(string: &lt;optional&gt;)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
     * 
     */
    @Export(name="capacityMin", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> capacityMin;

    /**
     * @return `(string: &lt;optional&gt;)` - Option to signal a minimum volume size. This may not be supported by all storage providers.
     * 
     */
    public Output<Optional<String>> capacityMin() {
        return Codegen.optional(this.capacityMin);
    }
    @Export(name="capacityMinBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> capacityMinBytes;

    public Output<Integer> capacityMinBytes() {
        return this.capacityMinBytes;
    }
    /**
     * `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
     * 
     */
    @Export(name="context", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> context;

    /**
     * @return `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to validate the volume.
     * 
     */
    public Output<Optional<Map<String,String>>> context() {
        return Codegen.optional(this.context);
    }
    /**
     * `(boolean)`
     * 
     */
    @Export(name="controllerRequired", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> controllerRequired;

    /**
     * @return `(boolean)`
     * 
     */
    public Output<Boolean> controllerRequired() {
        return this.controllerRequired;
    }
    /**
     * `(integer)`
     * 
     */
    @Export(name="controllersExpected", refs={Integer.class}, tree="[0]")
    private Output<Integer> controllersExpected;

    /**
     * @return `(integer)`
     * 
     */
    public Output<Integer> controllersExpected() {
        return this.controllersExpected;
    }
    /**
     * `(integer)`
     * 
     */
    @Export(name="controllersHealthy", refs={Integer.class}, tree="[0]")
    private Output<Integer> controllersHealthy;

    /**
     * @return `(integer)`
     * 
     */
    public Output<Integer> controllersHealthy() {
        return this.controllersHealthy;
    }
    /**
     * `(boolean: true)` - If true, the volume will be deregistered on destroy.
     * 
     */
    @Export(name="deregisterOnDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deregisterOnDestroy;

    /**
     * @return `(boolean: true)` - If true, the volume will be deregistered on destroy.
     * 
     */
    public Output<Optional<Boolean>> deregisterOnDestroy() {
        return Codegen.optional(this.deregisterOnDestroy);
    }
    /**
     * `(string: &lt;required&gt;)` - The ID of the physical volume from the storage provider.
     * 
     */
    @Export(name="externalId", refs={String.class}, tree="[0]")
    private Output<String> externalId;

    /**
     * @return `(string: &lt;required&gt;)` - The ID of the physical volume from the storage provider.
     * 
     */
    public Output<String> externalId() {
        return this.externalId;
    }
    /**
     * `(block: &lt;optional&gt;)` Options for mounting `block-device` volumes without a pre-formatted file system.
     * 
     */
    @Export(name="mountOptions", refs={CsiVolumeRegistrationMountOptions.class}, tree="[0]")
    private Output</* @Nullable */ CsiVolumeRegistrationMountOptions> mountOptions;

    /**
     * @return `(block: &lt;optional&gt;)` Options for mounting `block-device` volumes without a pre-formatted file system.
     * 
     */
    public Output<Optional<CsiVolumeRegistrationMountOptions>> mountOptions() {
        return Codegen.optional(this.mountOptions);
    }
    /**
     * `(string: &lt;required&gt;)` - The display name for the volume.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return `(string: &lt;required&gt;)` - The display name for the volume.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * `(string: &#34;default&#34;)` - The namespace in which to register the volume.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return `(string: &#34;default&#34;)` - The namespace in which to register the volume.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * `(integer)`
     * 
     */
    @Export(name="nodesExpected", refs={Integer.class}, tree="[0]")
    private Output<Integer> nodesExpected;

    /**
     * @return `(integer)`
     * 
     */
    public Output<Integer> nodesExpected() {
        return this.nodesExpected;
    }
    /**
     * `(integer)`
     * 
     */
    @Export(name="nodesHealthy", refs={Integer.class}, tree="[0]")
    private Output<Integer> nodesHealthy;

    /**
     * @return `(integer)`
     * 
     */
    public Output<Integer> nodesHealthy() {
        return this.nodesHealthy;
    }
    /**
     * `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     * 
     */
    @Export(name="parameters", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> parameters;

    /**
     * @return `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings passed directly to the CSI plugin to configure the volume.
     * 
     */
    public Output<Optional<Map<String,String>>> parameters() {
        return Codegen.optional(this.parameters);
    }
    /**
     * `(string: &lt;required&gt;)` - The ID of the Nomad plugin for registering this volume.
     * 
     */
    @Export(name="pluginId", refs={String.class}, tree="[0]")
    private Output<String> pluginId;

    /**
     * @return `(string: &lt;required&gt;)` - The ID of the Nomad plugin for registering this volume.
     * 
     */
    public Output<String> pluginId() {
        return this.pluginId;
    }
    /**
     * `(string)`
     * 
     */
    @Export(name="pluginProvider", refs={String.class}, tree="[0]")
    private Output<String> pluginProvider;

    /**
     * @return `(string)`
     * 
     */
    public Output<String> pluginProvider() {
        return this.pluginProvider;
    }
    /**
     * `(string)`
     * 
     */
    @Export(name="pluginProviderVersion", refs={String.class}, tree="[0]")
    private Output<String> pluginProviderVersion;

    /**
     * @return `(string)`
     * 
     */
    public Output<String> pluginProviderVersion() {
        return this.pluginProviderVersion;
    }
    /**
     * `(boolean)`
     * 
     */
    @Export(name="schedulable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> schedulable;

    /**
     * @return `(boolean)`
     * 
     */
    public Output<Boolean> schedulable() {
        return this.schedulable;
    }
    /**
     * `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     * 
     */
    @Export(name="secrets", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> secrets;

    /**
     * @return `(map[string]string: &lt;optional&gt;)` - An optional key-value map of strings used as credentials for publishing and unpublishing volumes.
     * 
     */
    public Output<Optional<Map<String,String>>> secrets() {
        return Codegen.optional(this.secrets);
    }
    /**
     * `(List of topologies)`
     * 
     */
    @Export(name="topologies", refs={List.class,CsiVolumeRegistrationTopology.class}, tree="[0,1]")
    private Output<List<CsiVolumeRegistrationTopology>> topologies;

    /**
     * @return `(List of topologies)`
     * 
     */
    public Output<List<CsiVolumeRegistrationTopology>> topologies() {
        return this.topologies;
    }
    /**
     * `(``TopologyRequest``: &lt;optional&gt;)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
     * 
     */
    @Export(name="topologyRequest", refs={CsiVolumeRegistrationTopologyRequest.class}, tree="[0]")
    private Output</* @Nullable */ CsiVolumeRegistrationTopologyRequest> topologyRequest;

    /**
     * @return `(``TopologyRequest``: &lt;optional&gt;)` - Specify locations (region, zone, rack, etc.) where the provisioned volume is accessible from.
     * 
     */
    public Output<Optional<CsiVolumeRegistrationTopologyRequest>> topologyRequest() {
        return Codegen.optional(this.topologyRequest);
    }
    /**
     * `(string: &lt;required&gt;)` - The unique ID of the volume.
     * 
     */
    @Export(name="volumeId", refs={String.class}, tree="[0]")
    private Output<String> volumeId;

    /**
     * @return `(string: &lt;required&gt;)` - The unique ID of the volume.
     * 
     */
    public Output<String> volumeId() {
        return this.volumeId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CsiVolumeRegistration(String name) {
        this(name, CsiVolumeRegistrationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CsiVolumeRegistration(String name, CsiVolumeRegistrationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CsiVolumeRegistration(String name, CsiVolumeRegistrationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("nomad:index/csiVolumeRegistration:CsiVolumeRegistration", name, args == null ? CsiVolumeRegistrationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CsiVolumeRegistration(String name, Output<String> id, @Nullable CsiVolumeRegistrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("nomad:index/csiVolumeRegistration:CsiVolumeRegistration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "secrets"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CsiVolumeRegistration get(String name, Output<String> id, @Nullable CsiVolumeRegistrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CsiVolumeRegistration(name, id, state, options);
    }
}
