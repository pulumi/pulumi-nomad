// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetJwksKey {
    /**
     * @return `(string)` - JWK field `alg`
     * 
     */
    private String algorithm;
    /**
     * @return `(string)` - JWK field `e`
     * 
     */
    private String exponent;
    /**
     * @return `(string)` - JWK field `kid`
     * 
     */
    private String keyId;
    /**
     * @return `(string)` - JWK field `kty`
     * 
     */
    private String keyType;
    /**
     * @return `(string)` - JWK field `use`
     * 
     */
    private String keyUse;
    /**
     * @return `(string)` - JWK field `n`
     * 
     */
    private String modulus;

    private GetJwksKey() {}
    /**
     * @return `(string)` - JWK field `alg`
     * 
     */
    public String algorithm() {
        return this.algorithm;
    }
    /**
     * @return `(string)` - JWK field `e`
     * 
     */
    public String exponent() {
        return this.exponent;
    }
    /**
     * @return `(string)` - JWK field `kid`
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return `(string)` - JWK field `kty`
     * 
     */
    public String keyType() {
        return this.keyType;
    }
    /**
     * @return `(string)` - JWK field `use`
     * 
     */
    public String keyUse() {
        return this.keyUse;
    }
    /**
     * @return `(string)` - JWK field `n`
     * 
     */
    public String modulus() {
        return this.modulus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJwksKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithm;
        private String exponent;
        private String keyId;
        private String keyType;
        private String keyUse;
        private String modulus;
        public Builder() {}
        public Builder(GetJwksKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.exponent = defaults.exponent;
    	      this.keyId = defaults.keyId;
    	      this.keyType = defaults.keyType;
    	      this.keyUse = defaults.keyUse;
    	      this.modulus = defaults.modulus;
        }

        @CustomType.Setter
        public Builder algorithm(String algorithm) {
            if (algorithm == null) {
              throw new MissingRequiredPropertyException("GetJwksKey", "algorithm");
            }
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder exponent(String exponent) {
            if (exponent == null) {
              throw new MissingRequiredPropertyException("GetJwksKey", "exponent");
            }
            this.exponent = exponent;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            if (keyId == null) {
              throw new MissingRequiredPropertyException("GetJwksKey", "keyId");
            }
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder keyType(String keyType) {
            if (keyType == null) {
              throw new MissingRequiredPropertyException("GetJwksKey", "keyType");
            }
            this.keyType = keyType;
            return this;
        }
        @CustomType.Setter
        public Builder keyUse(String keyUse) {
            if (keyUse == null) {
              throw new MissingRequiredPropertyException("GetJwksKey", "keyUse");
            }
            this.keyUse = keyUse;
            return this;
        }
        @CustomType.Setter
        public Builder modulus(String modulus) {
            if (modulus == null) {
              throw new MissingRequiredPropertyException("GetJwksKey", "modulus");
            }
            this.modulus = modulus;
            return this;
        }
        public GetJwksKey build() {
            final var _resultValue = new GetJwksKey();
            _resultValue.algorithm = algorithm;
            _resultValue.exponent = exponent;
            _resultValue.keyId = keyId;
            _resultValue.keyType = keyType;
            _resultValue.keyUse = keyUse;
            _resultValue.modulus = modulus;
            return _resultValue;
        }
    }
}
