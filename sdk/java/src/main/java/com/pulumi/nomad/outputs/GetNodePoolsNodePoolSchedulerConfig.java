// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNodePoolsNodePoolSchedulerConfig {
    /**
     * @return `(string)` - Whether or not memory
     * oversubscription is enabled in the node pool. If empty or not defined the
     * global cluster configuration is used.
     * 
     */
    private String memoryOversubscription;
    /**
     * @return `(string)` - The scheduler algorithm used in the node
     * pool. If empty or not defined the global cluster configuration is used.
     * 
     */
    private String schedulerAlgorithm;

    private GetNodePoolsNodePoolSchedulerConfig() {}
    /**
     * @return `(string)` - Whether or not memory
     * oversubscription is enabled in the node pool. If empty or not defined the
     * global cluster configuration is used.
     * 
     */
    public String memoryOversubscription() {
        return this.memoryOversubscription;
    }
    /**
     * @return `(string)` - The scheduler algorithm used in the node
     * pool. If empty or not defined the global cluster configuration is used.
     * 
     */
    public String schedulerAlgorithm() {
        return this.schedulerAlgorithm;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodePoolsNodePoolSchedulerConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String memoryOversubscription;
        private String schedulerAlgorithm;
        public Builder() {}
        public Builder(GetNodePoolsNodePoolSchedulerConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.memoryOversubscription = defaults.memoryOversubscription;
    	      this.schedulerAlgorithm = defaults.schedulerAlgorithm;
        }

        @CustomType.Setter
        public Builder memoryOversubscription(String memoryOversubscription) {
            if (memoryOversubscription == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePoolSchedulerConfig", "memoryOversubscription");
            }
            this.memoryOversubscription = memoryOversubscription;
            return this;
        }
        @CustomType.Setter
        public Builder schedulerAlgorithm(String schedulerAlgorithm) {
            if (schedulerAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePoolSchedulerConfig", "schedulerAlgorithm");
            }
            this.schedulerAlgorithm = schedulerAlgorithm;
            return this;
        }
        public GetNodePoolsNodePoolSchedulerConfig build() {
            final var _resultValue = new GetNodePoolsNodePoolSchedulerConfig();
            _resultValue.memoryOversubscription = memoryOversubscription;
            _resultValue.schedulerAlgorithm = schedulerAlgorithm;
            return _resultValue;
        }
    }
}
