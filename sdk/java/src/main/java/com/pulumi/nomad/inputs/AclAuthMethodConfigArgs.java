// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.nomad.inputs.AclAuthMethodConfigOidcClientAssertionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclAuthMethodConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclAuthMethodConfigArgs Empty = new AclAuthMethodConfigArgs();

    /**
     * `([]string: &lt;optional&gt;)` - A list of allowed values
     * that can be used for the redirect URI.
     * 
     */
    @Import(name="allowedRedirectUris")
    private @Nullable Output<List<String>> allowedRedirectUris;

    /**
     * @return `([]string: &lt;optional&gt;)` - A list of allowed values
     * that can be used for the redirect URI.
     * 
     */
    public Optional<Output<List<String>>> allowedRedirectUris() {
        return Optional.ofNullable(this.allowedRedirectUris);
    }

    /**
     * `([]string: &lt;optional&gt;)` - List of auth claims that are
     * valid for login.
     * 
     */
    @Import(name="boundAudiences")
    private @Nullable Output<List<String>> boundAudiences;

    /**
     * @return `([]string: &lt;optional&gt;)` - List of auth claims that are
     * valid for login.
     * 
     */
    public Optional<Output<List<String>>> boundAudiences() {
        return Optional.ofNullable(this.boundAudiences);
    }

    /**
     * `([]string: &lt;optional&gt;)` - The value against which to match
     * the iss claim in a JWT.
     * 
     */
    @Import(name="boundIssuers")
    private @Nullable Output<List<String>> boundIssuers;

    /**
     * @return `([]string: &lt;optional&gt;)` - The value against which to match
     * the iss claim in a JWT.
     * 
     */
    public Optional<Output<List<String>>> boundIssuers() {
        return Optional.ofNullable(this.boundIssuers);
    }

    /**
     * Mappings of claims (key) that will be copied to a metadata field (value).
     * 
     */
    @Import(name="claimMappings")
    private @Nullable Output<Map<String,String>> claimMappings;

    /**
     * @return Mappings of claims (key) that will be copied to a metadata field (value).
     * 
     */
    public Optional<Output<Map<String,String>>> claimMappings() {
        return Optional.ofNullable(this.claimMappings);
    }

    /**
     * `(string: &lt;optional&gt;)` - Duration of leeway when validating
     * all claims in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
     * 
     */
    @Import(name="clockSkewLeeway")
    private @Nullable Output<String> clockSkewLeeway;

    /**
     * @return `(string: &lt;optional&gt;)` - Duration of leeway when validating
     * all claims in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
     * 
     */
    public Optional<Output<String>> clockSkewLeeway() {
        return Optional.ofNullable(this.clockSkewLeeway);
    }

    /**
     * `([]string: &lt;optional&gt;)` - PEM encoded CA certs for use
     * by the TLS client used to talk with the OIDC Discovery URL.
     * 
     */
    @Import(name="discoveryCaPems")
    private @Nullable Output<List<String>> discoveryCaPems;

    /**
     * @return `([]string: &lt;optional&gt;)` - PEM encoded CA certs for use
     * by the TLS client used to talk with the OIDC Discovery URL.
     * 
     */
    public Optional<Output<List<String>>> discoveryCaPems() {
        return Optional.ofNullable(this.discoveryCaPems);
    }

    /**
     * `(string: &lt;optional&gt;)` - Duration of leeway when validating
     * expiration of a JWT in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
     * 
     */
    @Import(name="expirationLeeway")
    private @Nullable Output<String> expirationLeeway;

    /**
     * @return `(string: &lt;optional&gt;)` - Duration of leeway when validating
     * expiration of a JWT in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
     * 
     */
    public Optional<Output<String>> expirationLeeway() {
        return Optional.ofNullable(this.expirationLeeway);
    }

    /**
     * `(string: &lt;optional&gt;)` - PEM encoded CA cert for use by the
     * TLS client used to talk with the JWKS server.
     * 
     */
    @Import(name="jwksCaCert")
    private @Nullable Output<String> jwksCaCert;

    /**
     * @return `(string: &lt;optional&gt;)` - PEM encoded CA cert for use by the
     * TLS client used to talk with the JWKS server.
     * 
     */
    public Optional<Output<String>> jwksCaCert() {
        return Optional.ofNullable(this.jwksCaCert);
    }

    /**
     * `(string: &lt;optional&gt;)` - JSON Web Key Sets url for authenticating
     * signatures.
     * 
     */
    @Import(name="jwksUrl")
    private @Nullable Output<String> jwksUrl;

    /**
     * @return `(string: &lt;optional&gt;)` - JSON Web Key Sets url for authenticating
     * signatures.
     * 
     */
    public Optional<Output<String>> jwksUrl() {
        return Optional.ofNullable(this.jwksUrl);
    }

    /**
     * `([]string: &lt;optional&gt;)` - List of PEM-encoded
     * public keys to use to authenticate signatures locally.
     * 
     */
    @Import(name="jwtValidationPubKeys")
    private @Nullable Output<List<String>> jwtValidationPubKeys;

    /**
     * @return `([]string: &lt;optional&gt;)` - List of PEM-encoded
     * public keys to use to authenticate signatures locally.
     * 
     */
    public Optional<Output<List<String>>> jwtValidationPubKeys() {
        return Optional.ofNullable(this.jwtValidationPubKeys);
    }

    /**
     * Mappings of list claims (key) that will be copied to a metadata field (value).
     * 
     */
    @Import(name="listClaimMappings")
    private @Nullable Output<Map<String,String>> listClaimMappings;

    /**
     * @return Mappings of list claims (key) that will be copied to a metadata field (value).
     * 
     */
    public Optional<Output<Map<String,String>>> listClaimMappings() {
        return Optional.ofNullable(this.listClaimMappings);
    }

    /**
     * `(string: &lt;optional&gt;)` - Duration of leeway when validating
     * not before values of a token in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
     * 
     */
    @Import(name="notBeforeLeeway")
    private @Nullable Output<String> notBeforeLeeway;

    /**
     * @return `(string: &lt;optional&gt;)` - Duration of leeway when validating
     * not before values of a token in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
     * 
     */
    public Optional<Output<String>> notBeforeLeeway() {
        return Optional.ofNullable(this.notBeforeLeeway);
    }

    /**
     * `(OIDCClientAssertion: &lt;optional&gt;)` - Optionally
     * send a signed JWT (&#34;[private key jwt][]&#34;) as a client assertion to the OIDC
     * provider. Browse to the [OIDC concepts][concepts-assertions] page to learn
     * more.
     * 
     */
    @Import(name="oidcClientAssertion")
    private @Nullable Output<AclAuthMethodConfigOidcClientAssertionArgs> oidcClientAssertion;

    /**
     * @return `(OIDCClientAssertion: &lt;optional&gt;)` - Optionally
     * send a signed JWT (&#34;[private key jwt][]&#34;) as a client assertion to the OIDC
     * provider. Browse to the [OIDC concepts][concepts-assertions] page to learn
     * more.
     * 
     */
    public Optional<Output<AclAuthMethodConfigOidcClientAssertionArgs>> oidcClientAssertion() {
        return Optional.ofNullable(this.oidcClientAssertion);
    }

    /**
     * `(string: &lt;optional&gt;)` - The OAuth Client ID configured
     * with the OIDC provider.
     * 
     */
    @Import(name="oidcClientId")
    private @Nullable Output<String> oidcClientId;

    /**
     * @return `(string: &lt;optional&gt;)` - The OAuth Client ID configured
     * with the OIDC provider.
     * 
     */
    public Optional<Output<String>> oidcClientId() {
        return Optional.ofNullable(this.oidcClientId);
    }

    /**
     * `(string: &lt;optional&gt;)` - The OAuth Client Secret
     * configured with the OIDC provider.
     * 
     */
    @Import(name="oidcClientSecret")
    private @Nullable Output<String> oidcClientSecret;

    /**
     * @return `(string: &lt;optional&gt;)` - The OAuth Client Secret
     * configured with the OIDC provider.
     * 
     */
    public Optional<Output<String>> oidcClientSecret() {
        return Optional.ofNullable(this.oidcClientSecret);
    }

    /**
     * `(bool: false)` - When set to `true`, Nomad will
     * not make a request to the identity provider to get OIDC `UserInfo`.
     * You may wish to set this if your identity provider doesn&#39;t send any
     * additional claims from the `UserInfo` endpoint.
     * 
     */
    @Import(name="oidcDisableUserinfo")
    private @Nullable Output<Boolean> oidcDisableUserinfo;

    /**
     * @return `(bool: false)` - When set to `true`, Nomad will
     * not make a request to the identity provider to get OIDC `UserInfo`.
     * You may wish to set this if your identity provider doesn&#39;t send any
     * additional claims from the `UserInfo` endpoint.
     * 
     */
    public Optional<Output<Boolean>> oidcDisableUserinfo() {
        return Optional.ofNullable(this.oidcDisableUserinfo);
    }

    /**
     * `(string: &lt;optional&gt;)` - The OIDC Discovery URL,
     * without any .well-known component (base path).
     * 
     */
    @Import(name="oidcDiscoveryUrl")
    private @Nullable Output<String> oidcDiscoveryUrl;

    /**
     * @return `(string: &lt;optional&gt;)` - The OIDC Discovery URL,
     * without any .well-known component (base path).
     * 
     */
    public Optional<Output<String>> oidcDiscoveryUrl() {
        return Optional.ofNullable(this.oidcDiscoveryUrl);
    }

    /**
     * `(bool: false)` - When set to `true`, Nomad will include
     * [PKCE][] verification in the auth flow. Even with PKCE enabled in Nomad,
     * you may still need to enable it in your OIDC provider.
     * 
     */
    @Import(name="oidcEnablePkce")
    private @Nullable Output<Boolean> oidcEnablePkce;

    /**
     * @return `(bool: false)` - When set to `true`, Nomad will include
     * [PKCE][] verification in the auth flow. Even with PKCE enabled in Nomad,
     * you may still need to enable it in your OIDC provider.
     * 
     */
    public Optional<Output<Boolean>> oidcEnablePkce() {
        return Optional.ofNullable(this.oidcEnablePkce);
    }

    /**
     * `([]string: &lt;optional&gt;)` - List of OIDC scopes.
     * 
     */
    @Import(name="oidcScopes")
    private @Nullable Output<List<String>> oidcScopes;

    /**
     * @return `([]string: &lt;optional&gt;)` - List of OIDC scopes.
     * 
     */
    public Optional<Output<List<String>>> oidcScopes() {
        return Optional.ofNullable(this.oidcScopes);
    }

    /**
     * `([]string: &lt;optional&gt;)` - A list of supported signing
     * algorithms.
     * 
     */
    @Import(name="signingAlgs")
    private @Nullable Output<List<String>> signingAlgs;

    /**
     * @return `([]string: &lt;optional&gt;)` - A list of supported signing
     * algorithms.
     * 
     */
    public Optional<Output<List<String>>> signingAlgs() {
        return Optional.ofNullable(this.signingAlgs);
    }

    /**
     * Enable OIDC verbose logging on the Nomad server.
     * 
     */
    @Import(name="verboseLogging")
    private @Nullable Output<Boolean> verboseLogging;

    /**
     * @return Enable OIDC verbose logging on the Nomad server.
     * 
     */
    public Optional<Output<Boolean>> verboseLogging() {
        return Optional.ofNullable(this.verboseLogging);
    }

    private AclAuthMethodConfigArgs() {}

    private AclAuthMethodConfigArgs(AclAuthMethodConfigArgs $) {
        this.allowedRedirectUris = $.allowedRedirectUris;
        this.boundAudiences = $.boundAudiences;
        this.boundIssuers = $.boundIssuers;
        this.claimMappings = $.claimMappings;
        this.clockSkewLeeway = $.clockSkewLeeway;
        this.discoveryCaPems = $.discoveryCaPems;
        this.expirationLeeway = $.expirationLeeway;
        this.jwksCaCert = $.jwksCaCert;
        this.jwksUrl = $.jwksUrl;
        this.jwtValidationPubKeys = $.jwtValidationPubKeys;
        this.listClaimMappings = $.listClaimMappings;
        this.notBeforeLeeway = $.notBeforeLeeway;
        this.oidcClientAssertion = $.oidcClientAssertion;
        this.oidcClientId = $.oidcClientId;
        this.oidcClientSecret = $.oidcClientSecret;
        this.oidcDisableUserinfo = $.oidcDisableUserinfo;
        this.oidcDiscoveryUrl = $.oidcDiscoveryUrl;
        this.oidcEnablePkce = $.oidcEnablePkce;
        this.oidcScopes = $.oidcScopes;
        this.signingAlgs = $.signingAlgs;
        this.verboseLogging = $.verboseLogging;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclAuthMethodConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclAuthMethodConfigArgs $;

        public Builder() {
            $ = new AclAuthMethodConfigArgs();
        }

        public Builder(AclAuthMethodConfigArgs defaults) {
            $ = new AclAuthMethodConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedRedirectUris `([]string: &lt;optional&gt;)` - A list of allowed values
         * that can be used for the redirect URI.
         * 
         * @return builder
         * 
         */
        public Builder allowedRedirectUris(@Nullable Output<List<String>> allowedRedirectUris) {
            $.allowedRedirectUris = allowedRedirectUris;
            return this;
        }

        /**
         * @param allowedRedirectUris `([]string: &lt;optional&gt;)` - A list of allowed values
         * that can be used for the redirect URI.
         * 
         * @return builder
         * 
         */
        public Builder allowedRedirectUris(List<String> allowedRedirectUris) {
            return allowedRedirectUris(Output.of(allowedRedirectUris));
        }

        /**
         * @param allowedRedirectUris `([]string: &lt;optional&gt;)` - A list of allowed values
         * that can be used for the redirect URI.
         * 
         * @return builder
         * 
         */
        public Builder allowedRedirectUris(String... allowedRedirectUris) {
            return allowedRedirectUris(List.of(allowedRedirectUris));
        }

        /**
         * @param boundAudiences `([]string: &lt;optional&gt;)` - List of auth claims that are
         * valid for login.
         * 
         * @return builder
         * 
         */
        public Builder boundAudiences(@Nullable Output<List<String>> boundAudiences) {
            $.boundAudiences = boundAudiences;
            return this;
        }

        /**
         * @param boundAudiences `([]string: &lt;optional&gt;)` - List of auth claims that are
         * valid for login.
         * 
         * @return builder
         * 
         */
        public Builder boundAudiences(List<String> boundAudiences) {
            return boundAudiences(Output.of(boundAudiences));
        }

        /**
         * @param boundAudiences `([]string: &lt;optional&gt;)` - List of auth claims that are
         * valid for login.
         * 
         * @return builder
         * 
         */
        public Builder boundAudiences(String... boundAudiences) {
            return boundAudiences(List.of(boundAudiences));
        }

        /**
         * @param boundIssuers `([]string: &lt;optional&gt;)` - The value against which to match
         * the iss claim in a JWT.
         * 
         * @return builder
         * 
         */
        public Builder boundIssuers(@Nullable Output<List<String>> boundIssuers) {
            $.boundIssuers = boundIssuers;
            return this;
        }

        /**
         * @param boundIssuers `([]string: &lt;optional&gt;)` - The value against which to match
         * the iss claim in a JWT.
         * 
         * @return builder
         * 
         */
        public Builder boundIssuers(List<String> boundIssuers) {
            return boundIssuers(Output.of(boundIssuers));
        }

        /**
         * @param boundIssuers `([]string: &lt;optional&gt;)` - The value against which to match
         * the iss claim in a JWT.
         * 
         * @return builder
         * 
         */
        public Builder boundIssuers(String... boundIssuers) {
            return boundIssuers(List.of(boundIssuers));
        }

        /**
         * @param claimMappings Mappings of claims (key) that will be copied to a metadata field (value).
         * 
         * @return builder
         * 
         */
        public Builder claimMappings(@Nullable Output<Map<String,String>> claimMappings) {
            $.claimMappings = claimMappings;
            return this;
        }

        /**
         * @param claimMappings Mappings of claims (key) that will be copied to a metadata field (value).
         * 
         * @return builder
         * 
         */
        public Builder claimMappings(Map<String,String> claimMappings) {
            return claimMappings(Output.of(claimMappings));
        }

        /**
         * @param clockSkewLeeway `(string: &lt;optional&gt;)` - Duration of leeway when validating
         * all claims in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
         * 
         * @return builder
         * 
         */
        public Builder clockSkewLeeway(@Nullable Output<String> clockSkewLeeway) {
            $.clockSkewLeeway = clockSkewLeeway;
            return this;
        }

        /**
         * @param clockSkewLeeway `(string: &lt;optional&gt;)` - Duration of leeway when validating
         * all claims in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
         * 
         * @return builder
         * 
         */
        public Builder clockSkewLeeway(String clockSkewLeeway) {
            return clockSkewLeeway(Output.of(clockSkewLeeway));
        }

        /**
         * @param discoveryCaPems `([]string: &lt;optional&gt;)` - PEM encoded CA certs for use
         * by the TLS client used to talk with the OIDC Discovery URL.
         * 
         * @return builder
         * 
         */
        public Builder discoveryCaPems(@Nullable Output<List<String>> discoveryCaPems) {
            $.discoveryCaPems = discoveryCaPems;
            return this;
        }

        /**
         * @param discoveryCaPems `([]string: &lt;optional&gt;)` - PEM encoded CA certs for use
         * by the TLS client used to talk with the OIDC Discovery URL.
         * 
         * @return builder
         * 
         */
        public Builder discoveryCaPems(List<String> discoveryCaPems) {
            return discoveryCaPems(Output.of(discoveryCaPems));
        }

        /**
         * @param discoveryCaPems `([]string: &lt;optional&gt;)` - PEM encoded CA certs for use
         * by the TLS client used to talk with the OIDC Discovery URL.
         * 
         * @return builder
         * 
         */
        public Builder discoveryCaPems(String... discoveryCaPems) {
            return discoveryCaPems(List.of(discoveryCaPems));
        }

        /**
         * @param expirationLeeway `(string: &lt;optional&gt;)` - Duration of leeway when validating
         * expiration of a JWT in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
         * 
         * @return builder
         * 
         */
        public Builder expirationLeeway(@Nullable Output<String> expirationLeeway) {
            $.expirationLeeway = expirationLeeway;
            return this;
        }

        /**
         * @param expirationLeeway `(string: &lt;optional&gt;)` - Duration of leeway when validating
         * expiration of a JWT in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
         * 
         * @return builder
         * 
         */
        public Builder expirationLeeway(String expirationLeeway) {
            return expirationLeeway(Output.of(expirationLeeway));
        }

        /**
         * @param jwksCaCert `(string: &lt;optional&gt;)` - PEM encoded CA cert for use by the
         * TLS client used to talk with the JWKS server.
         * 
         * @return builder
         * 
         */
        public Builder jwksCaCert(@Nullable Output<String> jwksCaCert) {
            $.jwksCaCert = jwksCaCert;
            return this;
        }

        /**
         * @param jwksCaCert `(string: &lt;optional&gt;)` - PEM encoded CA cert for use by the
         * TLS client used to talk with the JWKS server.
         * 
         * @return builder
         * 
         */
        public Builder jwksCaCert(String jwksCaCert) {
            return jwksCaCert(Output.of(jwksCaCert));
        }

        /**
         * @param jwksUrl `(string: &lt;optional&gt;)` - JSON Web Key Sets url for authenticating
         * signatures.
         * 
         * @return builder
         * 
         */
        public Builder jwksUrl(@Nullable Output<String> jwksUrl) {
            $.jwksUrl = jwksUrl;
            return this;
        }

        /**
         * @param jwksUrl `(string: &lt;optional&gt;)` - JSON Web Key Sets url for authenticating
         * signatures.
         * 
         * @return builder
         * 
         */
        public Builder jwksUrl(String jwksUrl) {
            return jwksUrl(Output.of(jwksUrl));
        }

        /**
         * @param jwtValidationPubKeys `([]string: &lt;optional&gt;)` - List of PEM-encoded
         * public keys to use to authenticate signatures locally.
         * 
         * @return builder
         * 
         */
        public Builder jwtValidationPubKeys(@Nullable Output<List<String>> jwtValidationPubKeys) {
            $.jwtValidationPubKeys = jwtValidationPubKeys;
            return this;
        }

        /**
         * @param jwtValidationPubKeys `([]string: &lt;optional&gt;)` - List of PEM-encoded
         * public keys to use to authenticate signatures locally.
         * 
         * @return builder
         * 
         */
        public Builder jwtValidationPubKeys(List<String> jwtValidationPubKeys) {
            return jwtValidationPubKeys(Output.of(jwtValidationPubKeys));
        }

        /**
         * @param jwtValidationPubKeys `([]string: &lt;optional&gt;)` - List of PEM-encoded
         * public keys to use to authenticate signatures locally.
         * 
         * @return builder
         * 
         */
        public Builder jwtValidationPubKeys(String... jwtValidationPubKeys) {
            return jwtValidationPubKeys(List.of(jwtValidationPubKeys));
        }

        /**
         * @param listClaimMappings Mappings of list claims (key) that will be copied to a metadata field (value).
         * 
         * @return builder
         * 
         */
        public Builder listClaimMappings(@Nullable Output<Map<String,String>> listClaimMappings) {
            $.listClaimMappings = listClaimMappings;
            return this;
        }

        /**
         * @param listClaimMappings Mappings of list claims (key) that will be copied to a metadata field (value).
         * 
         * @return builder
         * 
         */
        public Builder listClaimMappings(Map<String,String> listClaimMappings) {
            return listClaimMappings(Output.of(listClaimMappings));
        }

        /**
         * @param notBeforeLeeway `(string: &lt;optional&gt;)` - Duration of leeway when validating
         * not before values of a token in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeLeeway(@Nullable Output<String> notBeforeLeeway) {
            $.notBeforeLeeway = notBeforeLeeway;
            return this;
        }

        /**
         * @param notBeforeLeeway `(string: &lt;optional&gt;)` - Duration of leeway when validating
         * not before values of a token in the form of a time duration such as &#34;5m&#34; or &#34;1h&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeLeeway(String notBeforeLeeway) {
            return notBeforeLeeway(Output.of(notBeforeLeeway));
        }

        /**
         * @param oidcClientAssertion `(OIDCClientAssertion: &lt;optional&gt;)` - Optionally
         * send a signed JWT (&#34;[private key jwt][]&#34;) as a client assertion to the OIDC
         * provider. Browse to the [OIDC concepts][concepts-assertions] page to learn
         * more.
         * 
         * @return builder
         * 
         */
        public Builder oidcClientAssertion(@Nullable Output<AclAuthMethodConfigOidcClientAssertionArgs> oidcClientAssertion) {
            $.oidcClientAssertion = oidcClientAssertion;
            return this;
        }

        /**
         * @param oidcClientAssertion `(OIDCClientAssertion: &lt;optional&gt;)` - Optionally
         * send a signed JWT (&#34;[private key jwt][]&#34;) as a client assertion to the OIDC
         * provider. Browse to the [OIDC concepts][concepts-assertions] page to learn
         * more.
         * 
         * @return builder
         * 
         */
        public Builder oidcClientAssertion(AclAuthMethodConfigOidcClientAssertionArgs oidcClientAssertion) {
            return oidcClientAssertion(Output.of(oidcClientAssertion));
        }

        /**
         * @param oidcClientId `(string: &lt;optional&gt;)` - The OAuth Client ID configured
         * with the OIDC provider.
         * 
         * @return builder
         * 
         */
        public Builder oidcClientId(@Nullable Output<String> oidcClientId) {
            $.oidcClientId = oidcClientId;
            return this;
        }

        /**
         * @param oidcClientId `(string: &lt;optional&gt;)` - The OAuth Client ID configured
         * with the OIDC provider.
         * 
         * @return builder
         * 
         */
        public Builder oidcClientId(String oidcClientId) {
            return oidcClientId(Output.of(oidcClientId));
        }

        /**
         * @param oidcClientSecret `(string: &lt;optional&gt;)` - The OAuth Client Secret
         * configured with the OIDC provider.
         * 
         * @return builder
         * 
         */
        public Builder oidcClientSecret(@Nullable Output<String> oidcClientSecret) {
            $.oidcClientSecret = oidcClientSecret;
            return this;
        }

        /**
         * @param oidcClientSecret `(string: &lt;optional&gt;)` - The OAuth Client Secret
         * configured with the OIDC provider.
         * 
         * @return builder
         * 
         */
        public Builder oidcClientSecret(String oidcClientSecret) {
            return oidcClientSecret(Output.of(oidcClientSecret));
        }

        /**
         * @param oidcDisableUserinfo `(bool: false)` - When set to `true`, Nomad will
         * not make a request to the identity provider to get OIDC `UserInfo`.
         * You may wish to set this if your identity provider doesn&#39;t send any
         * additional claims from the `UserInfo` endpoint.
         * 
         * @return builder
         * 
         */
        public Builder oidcDisableUserinfo(@Nullable Output<Boolean> oidcDisableUserinfo) {
            $.oidcDisableUserinfo = oidcDisableUserinfo;
            return this;
        }

        /**
         * @param oidcDisableUserinfo `(bool: false)` - When set to `true`, Nomad will
         * not make a request to the identity provider to get OIDC `UserInfo`.
         * You may wish to set this if your identity provider doesn&#39;t send any
         * additional claims from the `UserInfo` endpoint.
         * 
         * @return builder
         * 
         */
        public Builder oidcDisableUserinfo(Boolean oidcDisableUserinfo) {
            return oidcDisableUserinfo(Output.of(oidcDisableUserinfo));
        }

        /**
         * @param oidcDiscoveryUrl `(string: &lt;optional&gt;)` - The OIDC Discovery URL,
         * without any .well-known component (base path).
         * 
         * @return builder
         * 
         */
        public Builder oidcDiscoveryUrl(@Nullable Output<String> oidcDiscoveryUrl) {
            $.oidcDiscoveryUrl = oidcDiscoveryUrl;
            return this;
        }

        /**
         * @param oidcDiscoveryUrl `(string: &lt;optional&gt;)` - The OIDC Discovery URL,
         * without any .well-known component (base path).
         * 
         * @return builder
         * 
         */
        public Builder oidcDiscoveryUrl(String oidcDiscoveryUrl) {
            return oidcDiscoveryUrl(Output.of(oidcDiscoveryUrl));
        }

        /**
         * @param oidcEnablePkce `(bool: false)` - When set to `true`, Nomad will include
         * [PKCE][] verification in the auth flow. Even with PKCE enabled in Nomad,
         * you may still need to enable it in your OIDC provider.
         * 
         * @return builder
         * 
         */
        public Builder oidcEnablePkce(@Nullable Output<Boolean> oidcEnablePkce) {
            $.oidcEnablePkce = oidcEnablePkce;
            return this;
        }

        /**
         * @param oidcEnablePkce `(bool: false)` - When set to `true`, Nomad will include
         * [PKCE][] verification in the auth flow. Even with PKCE enabled in Nomad,
         * you may still need to enable it in your OIDC provider.
         * 
         * @return builder
         * 
         */
        public Builder oidcEnablePkce(Boolean oidcEnablePkce) {
            return oidcEnablePkce(Output.of(oidcEnablePkce));
        }

        /**
         * @param oidcScopes `([]string: &lt;optional&gt;)` - List of OIDC scopes.
         * 
         * @return builder
         * 
         */
        public Builder oidcScopes(@Nullable Output<List<String>> oidcScopes) {
            $.oidcScopes = oidcScopes;
            return this;
        }

        /**
         * @param oidcScopes `([]string: &lt;optional&gt;)` - List of OIDC scopes.
         * 
         * @return builder
         * 
         */
        public Builder oidcScopes(List<String> oidcScopes) {
            return oidcScopes(Output.of(oidcScopes));
        }

        /**
         * @param oidcScopes `([]string: &lt;optional&gt;)` - List of OIDC scopes.
         * 
         * @return builder
         * 
         */
        public Builder oidcScopes(String... oidcScopes) {
            return oidcScopes(List.of(oidcScopes));
        }

        /**
         * @param signingAlgs `([]string: &lt;optional&gt;)` - A list of supported signing
         * algorithms.
         * 
         * @return builder
         * 
         */
        public Builder signingAlgs(@Nullable Output<List<String>> signingAlgs) {
            $.signingAlgs = signingAlgs;
            return this;
        }

        /**
         * @param signingAlgs `([]string: &lt;optional&gt;)` - A list of supported signing
         * algorithms.
         * 
         * @return builder
         * 
         */
        public Builder signingAlgs(List<String> signingAlgs) {
            return signingAlgs(Output.of(signingAlgs));
        }

        /**
         * @param signingAlgs `([]string: &lt;optional&gt;)` - A list of supported signing
         * algorithms.
         * 
         * @return builder
         * 
         */
        public Builder signingAlgs(String... signingAlgs) {
            return signingAlgs(List.of(signingAlgs));
        }

        /**
         * @param verboseLogging Enable OIDC verbose logging on the Nomad server.
         * 
         * @return builder
         * 
         */
        public Builder verboseLogging(@Nullable Output<Boolean> verboseLogging) {
            $.verboseLogging = verboseLogging;
            return this;
        }

        /**
         * @param verboseLogging Enable OIDC verbose logging on the Nomad server.
         * 
         * @return builder
         * 
         */
        public Builder verboseLogging(Boolean verboseLogging) {
            return verboseLogging(Output.of(verboseLogging));
        }

        public AclAuthMethodConfigArgs build() {
            return $;
        }
    }

}
