// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final VariableArgs Empty = new VariableArgs();

    /**
     * `(map[string]string: &lt;required&gt;)` - An arbitrary map of items to create in the variable.
     * 
     */
    @Import(name="items", required=true)
    private Output<Map<String,String>> items;

    /**
     * @return `(map[string]string: &lt;required&gt;)` - An arbitrary map of items to create in the variable.
     * 
     */
    public Output<Map<String,String>> items() {
        return this.items;
    }

    /**
     * `(string: &#34;default&#34;)` - The namepsace to create the variable in.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return `(string: &#34;default&#34;)` - The namepsace to create the variable in.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * `(string: &lt;required&gt;)` - A unique path to create the variable at.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return `(string: &lt;required&gt;)` - A unique path to create the variable at.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private VariableArgs() {}

    private VariableArgs(VariableArgs $) {
        this.items = $.items;
        this.namespace = $.namespace;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VariableArgs $;

        public Builder() {
            $ = new VariableArgs();
        }

        public Builder(VariableArgs defaults) {
            $ = new VariableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param items `(map[string]string: &lt;required&gt;)` - An arbitrary map of items to create in the variable.
         * 
         * @return builder
         * 
         */
        public Builder items(Output<Map<String,String>> items) {
            $.items = items;
            return this;
        }

        /**
         * @param items `(map[string]string: &lt;required&gt;)` - An arbitrary map of items to create in the variable.
         * 
         * @return builder
         * 
         */
        public Builder items(Map<String,String> items) {
            return items(Output.of(items));
        }

        /**
         * @param namespace `(string: &#34;default&#34;)` - The namepsace to create the variable in.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace `(string: &#34;default&#34;)` - The namepsace to create the variable in.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param path `(string: &lt;required&gt;)` - A unique path to create the variable at.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path `(string: &lt;required&gt;)` - A unique path to create the variable at.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public VariableArgs build() {
            if ($.items == null) {
                throw new MissingRequiredPropertyException("VariableArgs", "items");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("VariableArgs", "path");
            }
            return $;
        }
    }

}
