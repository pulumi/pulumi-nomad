// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.nomad.inputs.ExternalVolumeTopologyRequestPreferredTopologyArgs;
import java.util.List;
import java.util.Objects;


public final class ExternalVolumeTopologyRequestPreferredArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalVolumeTopologyRequestPreferredArgs Empty = new ExternalVolumeTopologyRequestPreferredArgs();

    /**
     * `(List of segments: &lt;required&gt;)` - Defines the location for the volume.
     * 
     */
    @Import(name="topologies", required=true)
    private Output<List<ExternalVolumeTopologyRequestPreferredTopologyArgs>> topologies;

    /**
     * @return `(List of segments: &lt;required&gt;)` - Defines the location for the volume.
     * 
     */
    public Output<List<ExternalVolumeTopologyRequestPreferredTopologyArgs>> topologies() {
        return this.topologies;
    }

    private ExternalVolumeTopologyRequestPreferredArgs() {}

    private ExternalVolumeTopologyRequestPreferredArgs(ExternalVolumeTopologyRequestPreferredArgs $) {
        this.topologies = $.topologies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalVolumeTopologyRequestPreferredArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalVolumeTopologyRequestPreferredArgs $;

        public Builder() {
            $ = new ExternalVolumeTopologyRequestPreferredArgs();
        }

        public Builder(ExternalVolumeTopologyRequestPreferredArgs defaults) {
            $ = new ExternalVolumeTopologyRequestPreferredArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param topologies `(List of segments: &lt;required&gt;)` - Defines the location for the volume.
         * 
         * @return builder
         * 
         */
        public Builder topologies(Output<List<ExternalVolumeTopologyRequestPreferredTopologyArgs>> topologies) {
            $.topologies = topologies;
            return this;
        }

        /**
         * @param topologies `(List of segments: &lt;required&gt;)` - Defines the location for the volume.
         * 
         * @return builder
         * 
         */
        public Builder topologies(List<ExternalVolumeTopologyRequestPreferredTopologyArgs> topologies) {
            return topologies(Output.of(topologies));
        }

        /**
         * @param topologies `(List of segments: &lt;required&gt;)` - Defines the location for the volume.
         * 
         * @return builder
         * 
         */
        public Builder topologies(ExternalVolumeTopologyRequestPreferredTopologyArgs... topologies) {
            return topologies(List.of(topologies));
        }

        public ExternalVolumeTopologyRequestPreferredArgs build() {
            if ($.topologies == null) {
                throw new MissingRequiredPropertyException("ExternalVolumeTopologyRequestPreferredArgs", "topologies");
            }
            return $;
        }
    }

}
