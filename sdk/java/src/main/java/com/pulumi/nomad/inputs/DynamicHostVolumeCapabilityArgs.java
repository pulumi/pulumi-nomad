// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DynamicHostVolumeCapabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final DynamicHostVolumeCapabilityArgs Empty = new DynamicHostVolumeCapabilityArgs();

    /**
     * `(string)` - How the volume can be mounted by
     * allocations. Refer to the [`accessMode`][] documentation for details.
     * 
     */
    @Import(name="accessMode", required=true)
    private Output<String> accessMode;

    /**
     * @return `(string)` - How the volume can be mounted by
     * allocations. Refer to the [`accessMode`][] documentation for details.
     * 
     */
    public Output<String> accessMode() {
        return this.accessMode;
    }

    /**
     * `(string)` - The storage API that will be used by the
     * volume. Refer to the [`attachmentMode`][] documentation.
     * 
     */
    @Import(name="attachmentMode", required=true)
    private Output<String> attachmentMode;

    /**
     * @return `(string)` - The storage API that will be used by the
     * volume. Refer to the [`attachmentMode`][] documentation.
     * 
     */
    public Output<String> attachmentMode() {
        return this.attachmentMode;
    }

    private DynamicHostVolumeCapabilityArgs() {}

    private DynamicHostVolumeCapabilityArgs(DynamicHostVolumeCapabilityArgs $) {
        this.accessMode = $.accessMode;
        this.attachmentMode = $.attachmentMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynamicHostVolumeCapabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynamicHostVolumeCapabilityArgs $;

        public Builder() {
            $ = new DynamicHostVolumeCapabilityArgs();
        }

        public Builder(DynamicHostVolumeCapabilityArgs defaults) {
            $ = new DynamicHostVolumeCapabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessMode `(string)` - How the volume can be mounted by
         * allocations. Refer to the [`accessMode`][] documentation for details.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(Output<String> accessMode) {
            $.accessMode = accessMode;
            return this;
        }

        /**
         * @param accessMode `(string)` - How the volume can be mounted by
         * allocations. Refer to the [`accessMode`][] documentation for details.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(String accessMode) {
            return accessMode(Output.of(accessMode));
        }

        /**
         * @param attachmentMode `(string)` - The storage API that will be used by the
         * volume. Refer to the [`attachmentMode`][] documentation.
         * 
         * @return builder
         * 
         */
        public Builder attachmentMode(Output<String> attachmentMode) {
            $.attachmentMode = attachmentMode;
            return this;
        }

        /**
         * @param attachmentMode `(string)` - The storage API that will be used by the
         * volume. Refer to the [`attachmentMode`][] documentation.
         * 
         * @return builder
         * 
         */
        public Builder attachmentMode(String attachmentMode) {
            return attachmentMode(Output.of(attachmentMode));
        }

        public DynamicHostVolumeCapabilityArgs build() {
            if ($.accessMode == null) {
                throw new MissingRequiredPropertyException("DynamicHostVolumeCapabilityArgs", "accessMode");
            }
            if ($.attachmentMode == null) {
                throw new MissingRequiredPropertyException("DynamicHostVolumeCapabilityArgs", "attachmentMode");
            }
            return $;
        }
    }

}
