// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.nomad.JobArgs;
import com.pulumi.nomad.Utilities;
import com.pulumi.nomad.inputs.JobState;
import com.pulumi.nomad.outputs.JobHcl2;
import com.pulumi.nomad.outputs.JobTaskGroup;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="nomad:index/job:Job")
public class Job extends com.pulumi.resources.CustomResource {
    /**
     * The IDs for allocations associated with this job.
     * 
     * @deprecated
     * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad_allocations data source instead.
     * 
     */
    @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad_allocations data source instead. */
    @Export(name="allocationIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allocationIds;

    /**
     * @return The IDs for allocations associated with this job.
     * 
     */
    public Output<List<String>> allocationIds() {
        return this.allocationIds;
    }
    /**
     * `(string: &lt;optional&gt;)` - Consul token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     * 
     */
    @Export(name="consulToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> consulToken;

    /**
     * @return `(string: &lt;optional&gt;)` - Consul token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     * 
     */
    public Output<Optional<String>> consulToken() {
        return Codegen.optional(this.consulToken);
    }
    /**
     * The target datacenters for the job, as derived from the jobspec.
     * 
     */
    @Export(name="datacenters", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> datacenters;

    /**
     * @return The target datacenters for the job, as derived from the jobspec.
     * 
     */
    public Output<List<String>> datacenters() {
        return this.datacenters;
    }
    /**
     * If detach = false, the ID for the deployment associated with the last job create/update, if one exists.
     * 
     */
    @Export(name="deploymentId", refs={String.class}, tree="[0]")
    private Output<String> deploymentId;

    /**
     * @return If detach = false, the ID for the deployment associated with the last job create/update, if one exists.
     * 
     */
    public Output<String> deploymentId() {
        return this.deploymentId;
    }
    /**
     * If detach = false, the status for the deployment associated with the last job create/update, if one exists.
     * 
     */
    @Export(name="deploymentStatus", refs={String.class}, tree="[0]")
    private Output<String> deploymentStatus;

    /**
     * @return If detach = false, the status for the deployment associated with the last job create/update, if one exists.
     * 
     */
    public Output<String> deploymentStatus() {
        return this.deploymentStatus;
    }
    /**
     * If true, the job will be deregistered on destroy.
     * 
     */
    @Export(name="deregisterOnDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deregisterOnDestroy;

    /**
     * @return If true, the job will be deregistered on destroy.
     * 
     */
    public Output<Optional<Boolean>> deregisterOnDestroy() {
        return Codegen.optional(this.deregisterOnDestroy);
    }
    /**
     * `(boolean: true)` - Determines if the job will be
     * deregistered if the ID of the job in the jobspec changes.
     * 
     */
    @Export(name="deregisterOnIdChange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deregisterOnIdChange;

    /**
     * @return `(boolean: true)` - Determines if the job will be
     * deregistered if the ID of the job in the jobspec changes.
     * 
     */
    public Output<Optional<Boolean>> deregisterOnIdChange() {
        return Codegen.optional(this.deregisterOnIdChange);
    }
    /**
     * `(boolean: true)` - If true, the provider will return immediately
     * after creating or updating, instead of monitoring.
     * 
     */
    @Export(name="detach", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detach;

    /**
     * @return `(boolean: true)` - If true, the provider will return immediately
     * after creating or updating, instead of monitoring.
     * 
     */
    public Output<Optional<Boolean>> detach() {
        return Codegen.optional(this.detach);
    }
    /**
     * `(boolean: false)` - Set this to `true` to use the previous HCL1
     * parser. This option is provided for backwards compatibility only and should
     * not be used unless absolutely necessary.
     * 
     */
    @Export(name="hcl1", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hcl1;

    /**
     * @return `(boolean: false)` - Set this to `true` to use the previous HCL1
     * parser. This option is provided for backwards compatibility only and should
     * not be used unless absolutely necessary.
     * 
     */
    public Output<Optional<Boolean>> hcl1() {
        return Codegen.optional(this.hcl1);
    }
    /**
     * `(block: optional)` - Options for the HCL2 jobspec parser.
     * 
     */
    @Export(name="hcl2", refs={JobHcl2.class}, tree="[0]")
    private Output</* @Nullable */ JobHcl2> hcl2;

    /**
     * @return `(block: optional)` - Options for the HCL2 jobspec parser.
     * 
     */
    public Output<Optional<JobHcl2>> hcl2() {
        return Codegen.optional(this.hcl2);
    }
    /**
     * `(string: &lt;required&gt;)` - The contents of the jobspec to register.
     * 
     */
    @Export(name="jobspec", refs={String.class}, tree="[0]")
    private Output<String> jobspec;

    /**
     * @return `(string: &lt;required&gt;)` - The contents of the jobspec to register.
     * 
     */
    public Output<String> jobspec() {
        return this.jobspec;
    }
    /**
     * `(boolean: false)` - Set this to `true` if your jobspec is structured with
     * JSON instead of the default HCL.
     * 
     */
    @Export(name="json", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> json;

    /**
     * @return `(boolean: false)` - Set this to `true` if your jobspec is structured with
     * JSON instead of the default HCL.
     * 
     */
    public Output<Optional<Boolean>> json() {
        return Codegen.optional(this.json);
    }
    /**
     * Integer that increments for each change. Used to detect any changes between plan and apply.
     * 
     */
    @Export(name="modifyIndex", refs={String.class}, tree="[0]")
    private Output<String> modifyIndex;

    /**
     * @return Integer that increments for each change. Used to detect any changes between plan and apply.
     * 
     */
    public Output<String> modifyIndex() {
        return this.modifyIndex;
    }
    /**
     * The name of the job, as derived from the jobspec.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the job, as derived from the jobspec.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The namespace of the job, as derived from the jobspec.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output<String> namespace;

    /**
     * @return The namespace of the job, as derived from the jobspec.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }
    /**
     * `(boolean: false)` - Determines if the job will override any
     * soft-mandatory Sentinel policies and register even if they fail.
     * 
     */
    @Export(name="policyOverride", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> policyOverride;

    /**
     * @return `(boolean: false)` - Determines if the job will override any
     * soft-mandatory Sentinel policies and register even if they fail.
     * 
     */
    public Output<Optional<Boolean>> policyOverride() {
        return Codegen.optional(this.policyOverride);
    }
    /**
     * `(boolean: false)` - Set this to true if you want the job to
     * be purged when the resource is destroyed.
     * 
     */
    @Export(name="purgeOnDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> purgeOnDestroy;

    /**
     * @return `(boolean: false)` - Set this to true if you want the job to
     * be purged when the resource is destroyed.
     * 
     */
    public Output<Optional<Boolean>> purgeOnDestroy() {
        return Codegen.optional(this.purgeOnDestroy);
    }
    /**
     * @deprecated
     * Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad_allocations data source instead.
     * 
     */
    @Deprecated /* Retrieving allocation IDs from the job resource is deprecated and will be removed in a future release. Use the nomad_allocations data source instead. */
    @Export(name="readAllocationIds", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> readAllocationIds;

    public Output<Optional<Boolean>> readAllocationIds() {
        return Codegen.optional(this.readAllocationIds);
    }
    /**
     * The target region for the job, as derived from the jobspec.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The target region for the job, as derived from the jobspec.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    @Export(name="taskGroups", refs={List.class,JobTaskGroup.class}, tree="[0,1]")
    private Output<List<JobTaskGroup>> taskGroups;

    public Output<List<JobTaskGroup>> taskGroups() {
        return this.taskGroups;
    }
    /**
     * The type of the job, as derived from the jobspec.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the job, as derived from the jobspec.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * `(string: &lt;optional&gt;)` - Vault token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     * 
     */
    @Export(name="vaultToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vaultToken;

    /**
     * @return `(string: &lt;optional&gt;)` - Vault token used when registering this job.
     * Will fallback to the value declared in Nomad provider configuration, if any.
     * 
     */
    public Output<Optional<String>> vaultToken() {
        return Codegen.optional(this.vaultToken);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Job(String name) {
        this(name, JobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Job(String name, JobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Job(String name, JobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("nomad:index/job:Job", name, args == null ? JobArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Job(String name, Output<String> id, @Nullable JobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("nomad:index/job:Job", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "consulToken",
                "vaultToken"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Job get(String name, Output<String> id, @Nullable JobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Job(name, id, state, options);
    }
}
