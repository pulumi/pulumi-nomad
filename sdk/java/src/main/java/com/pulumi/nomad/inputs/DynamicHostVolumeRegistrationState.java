// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.nomad.inputs.DynamicHostVolumeRegistrationCapabilityArgs;
import com.pulumi.nomad.inputs.DynamicHostVolumeRegistrationConstraintArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DynamicHostVolumeRegistrationState extends com.pulumi.resources.ResourceArgs {

    public static final DynamicHostVolumeRegistrationState Empty = new DynamicHostVolumeRegistrationState();

    /**
     * `(block: &lt;optional&gt;)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    @Import(name="capabilities")
    private @Nullable Output<List<DynamicHostVolumeRegistrationCapabilityArgs>> capabilities;

    /**
     * @return `(block: &lt;optional&gt;)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    public Optional<Output<List<DynamicHostVolumeRegistrationCapabilityArgs>>> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    /**
     * `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
     * physical size of a disk or a quota, depending on the plugin. This field must
     * be between the `capacity_min` and `capacity_max` values unless they are
     * omitted. Accepts human-friendly suffixes such as `&#34;100GiB&#34;`.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<String> capacity;

    /**
     * @return `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
     * physical size of a disk or a quota, depending on the plugin. This field must
     * be between the `capacity_min` and `capacity_max` values unless they are
     * omitted. Accepts human-friendly suffixes such as `&#34;100GiB&#34;`.
     * 
     */
    public Optional<Output<String>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    @Import(name="capacityBytes")
    private @Nullable Output<Integer> capacityBytes;

    public Optional<Output<Integer>> capacityBytes() {
        return Optional.ofNullable(this.capacityBytes);
    }

    @Import(name="capacityMaxBytes")
    private @Nullable Output<Integer> capacityMaxBytes;

    public Optional<Output<Integer>> capacityMaxBytes() {
        return Optional.ofNullable(this.capacityMaxBytes);
    }

    @Import(name="capacityMinBytes")
    private @Nullable Output<Integer> capacityMinBytes;

    public Optional<Output<Integer>> capacityMinBytes() {
        return Optional.ofNullable(this.capacityMinBytes);
    }

    /**
     * Constraints
     * 
     */
    @Import(name="constraints")
    private @Nullable Output<List<DynamicHostVolumeRegistrationConstraintArgs>> constraints;

    /**
     * @return Constraints
     * 
     */
    public Optional<Output<List<DynamicHostVolumeRegistrationConstraintArgs>>> constraints() {
        return Optional.ofNullable(this.constraints);
    }

    /**
     * `(string)` - The path on disk where the volume exists.
     * 
     */
    @Import(name="hostPath")
    private @Nullable Output<String> hostPath;

    /**
     * @return `(string)` - The path on disk where the volume exists.
     * 
     */
    public Optional<Output<String>> hostPath() {
        return Optional.ofNullable(this.hostPath);
    }

    /**
     * `(string: &lt;required&gt;)` - The name of the volume, which is used as the
     * [`volume.source`][volume_source] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return `(string: &lt;required&gt;)` - The name of the volume, which is used as the
     * [`volume.source`][volume_source] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `(string: &lt;optional&gt;)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `&#34;default&#34;` if unset.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return `(string: &lt;optional&gt;)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `&#34;default&#34;` if unset.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * `(string: &lt;required&gt;)` - A specific node where the volume is
     * mounted.
     * 
     */
    @Import(name="nodeId")
    private @Nullable Output<String> nodeId;

    /**
     * @return `(string: &lt;required&gt;)` - A specific node where the volume is
     * mounted.
     * 
     */
    public Optional<Output<String>> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }

    /**
     * Node pool
     * 
     */
    @Import(name="nodePool")
    private @Nullable Output<String> nodePool;

    /**
     * @return Node pool
     * 
     */
    public Optional<Output<String>> nodePool() {
        return Optional.ofNullable(this.nodePool);
    }

    /**
     * `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     * [`access_mode`]: /nomad/docs/other-specifications/volume/capability#access_mode
     * [`attachment_mode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
     * [volume_source]: /nomad/docs/job-specification/volume#source
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     * [`access_mode`]: /nomad/docs/other-specifications/volume/capability#access_mode
     * [`attachment_mode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
     * [volume_source]: /nomad/docs/job-specification/volume#source
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Plugin ID
     * 
     */
    @Import(name="pluginId")
    private @Nullable Output<String> pluginId;

    /**
     * @return Plugin ID
     * 
     */
    public Optional<Output<String>> pluginId() {
        return Optional.ofNullable(this.pluginId);
    }

    /**
     * State
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private DynamicHostVolumeRegistrationState() {}

    private DynamicHostVolumeRegistrationState(DynamicHostVolumeRegistrationState $) {
        this.capabilities = $.capabilities;
        this.capacity = $.capacity;
        this.capacityBytes = $.capacityBytes;
        this.capacityMaxBytes = $.capacityMaxBytes;
        this.capacityMinBytes = $.capacityMinBytes;
        this.constraints = $.constraints;
        this.hostPath = $.hostPath;
        this.name = $.name;
        this.namespace = $.namespace;
        this.nodeId = $.nodeId;
        this.nodePool = $.nodePool;
        this.parameters = $.parameters;
        this.pluginId = $.pluginId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynamicHostVolumeRegistrationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynamicHostVolumeRegistrationState $;

        public Builder() {
            $ = new DynamicHostVolumeRegistrationState();
        }

        public Builder(DynamicHostVolumeRegistrationState defaults) {
            $ = new DynamicHostVolumeRegistrationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - Option for validating the capability of a
         * volume. Each capability block has the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder capabilities(@Nullable Output<List<DynamicHostVolumeRegistrationCapabilityArgs>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - Option for validating the capability of a
         * volume. Each capability block has the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<DynamicHostVolumeRegistrationCapabilityArgs> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - Option for validating the capability of a
         * volume. Each capability block has the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder capabilities(DynamicHostVolumeRegistrationCapabilityArgs... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param capacity `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
         * physical size of a disk or a quota, depending on the plugin. This field must
         * be between the `capacity_min` and `capacity_max` values unless they are
         * omitted. Accepts human-friendly suffixes such as `&#34;100GiB&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<String> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity `(string: &lt;optional&gt;)` - The size of a volume in bytes. Either the
         * physical size of a disk or a quota, depending on the plugin. This field must
         * be between the `capacity_min` and `capacity_max` values unless they are
         * omitted. Accepts human-friendly suffixes such as `&#34;100GiB&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder capacity(String capacity) {
            return capacity(Output.of(capacity));
        }

        public Builder capacityBytes(@Nullable Output<Integer> capacityBytes) {
            $.capacityBytes = capacityBytes;
            return this;
        }

        public Builder capacityBytes(Integer capacityBytes) {
            return capacityBytes(Output.of(capacityBytes));
        }

        public Builder capacityMaxBytes(@Nullable Output<Integer> capacityMaxBytes) {
            $.capacityMaxBytes = capacityMaxBytes;
            return this;
        }

        public Builder capacityMaxBytes(Integer capacityMaxBytes) {
            return capacityMaxBytes(Output.of(capacityMaxBytes));
        }

        public Builder capacityMinBytes(@Nullable Output<Integer> capacityMinBytes) {
            $.capacityMinBytes = capacityMinBytes;
            return this;
        }

        public Builder capacityMinBytes(Integer capacityMinBytes) {
            return capacityMinBytes(Output.of(capacityMinBytes));
        }

        /**
         * @param constraints Constraints
         * 
         * @return builder
         * 
         */
        public Builder constraints(@Nullable Output<List<DynamicHostVolumeRegistrationConstraintArgs>> constraints) {
            $.constraints = constraints;
            return this;
        }

        /**
         * @param constraints Constraints
         * 
         * @return builder
         * 
         */
        public Builder constraints(List<DynamicHostVolumeRegistrationConstraintArgs> constraints) {
            return constraints(Output.of(constraints));
        }

        /**
         * @param constraints Constraints
         * 
         * @return builder
         * 
         */
        public Builder constraints(DynamicHostVolumeRegistrationConstraintArgs... constraints) {
            return constraints(List.of(constraints));
        }

        /**
         * @param hostPath `(string)` - The path on disk where the volume exists.
         * 
         * @return builder
         * 
         */
        public Builder hostPath(@Nullable Output<String> hostPath) {
            $.hostPath = hostPath;
            return this;
        }

        /**
         * @param hostPath `(string)` - The path on disk where the volume exists.
         * 
         * @return builder
         * 
         */
        public Builder hostPath(String hostPath) {
            return hostPath(Output.of(hostPath));
        }

        /**
         * @param name `(string: &lt;required&gt;)` - The name of the volume, which is used as the
         * [`volume.source`][volume_source] field in job specifications that claim this
         * volume. Host volume names must be unique per node. Names are visible to any
         * user with `node:read` ACL, even across namespaces, so they should not be
         * treated as sensitive values.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name `(string: &lt;required&gt;)` - The name of the volume, which is used as the
         * [`volume.source`][volume_source] field in job specifications that claim this
         * volume. Host volume names must be unique per node. Names are visible to any
         * user with `node:read` ACL, even across namespaces, so they should not be
         * treated as sensitive values.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace `(string: &lt;optional&gt;)` - The namespace of the volume. This field
         * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
         * environment variable. Defaults to `&#34;default&#34;` if unset.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace `(string: &lt;optional&gt;)` - The namespace of the volume. This field
         * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
         * environment variable. Defaults to `&#34;default&#34;` if unset.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param nodeId `(string: &lt;required&gt;)` - A specific node where the volume is
         * mounted.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(@Nullable Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId `(string: &lt;required&gt;)` - A specific node where the volume is
         * mounted.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        /**
         * @param nodePool Node pool
         * 
         * @return builder
         * 
         */
        public Builder nodePool(@Nullable Output<String> nodePool) {
            $.nodePool = nodePool;
            return this;
        }

        /**
         * @param nodePool Node pool
         * 
         * @return builder
         * 
         */
        public Builder nodePool(String nodePool) {
            return nodePool(Output.of(nodePool));
        }

        /**
         * @param parameters `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
         * passed directly to the plugin to configure the volume. The details of these
         * parameters are specific to the plugin.
         * 
         * [`access_mode`]: /nomad/docs/other-specifications/volume/capability#access_mode
         * [`attachment_mode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
         * [volume_source]: /nomad/docs/job-specification/volume#source
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
         * passed directly to the plugin to configure the volume. The details of these
         * parameters are specific to the plugin.
         * 
         * [`access_mode`]: /nomad/docs/other-specifications/volume/capability#access_mode
         * [`attachment_mode`]: /nomad/docs/other-specifications/volume/capability#attachment_mode
         * [volume_source]: /nomad/docs/job-specification/volume#source
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param pluginId Plugin ID
         * 
         * @return builder
         * 
         */
        public Builder pluginId(@Nullable Output<String> pluginId) {
            $.pluginId = pluginId;
            return this;
        }

        /**
         * @param pluginId Plugin ID
         * 
         * @return builder
         * 
         */
        public Builder pluginId(String pluginId) {
            return pluginId(Output.of(pluginId));
        }

        /**
         * @param state State
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public DynamicHostVolumeRegistrationState build() {
            return $;
        }
    }

}
