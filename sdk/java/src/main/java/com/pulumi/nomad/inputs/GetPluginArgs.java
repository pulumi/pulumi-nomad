// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPluginArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPluginArgs Empty = new GetPluginArgs();

    /**
     * `(string)` ID of the plugin.
     * 
     */
    @Import(name="pluginId", required=true)
    private Output<String> pluginId;

    /**
     * @return `(string)` ID of the plugin.
     * 
     */
    public Output<String> pluginId() {
        return this.pluginId;
    }

    /**
     * `(boolean)` retry until the plugin exists and all controllers are healthy
     * 
     */
    @Import(name="waitForHealthy")
    private @Nullable Output<Boolean> waitForHealthy;

    /**
     * @return `(boolean)` retry until the plugin exists and all controllers are healthy
     * 
     */
    public Optional<Output<Boolean>> waitForHealthy() {
        return Optional.ofNullable(this.waitForHealthy);
    }

    /**
     * `(boolean)` if the plugin doesn&#39;t exist, retry until it does
     * 
     */
    @Import(name="waitForRegistration")
    private @Nullable Output<Boolean> waitForRegistration;

    /**
     * @return `(boolean)` if the plugin doesn&#39;t exist, retry until it does
     * 
     */
    public Optional<Output<Boolean>> waitForRegistration() {
        return Optional.ofNullable(this.waitForRegistration);
    }

    private GetPluginArgs() {}

    private GetPluginArgs(GetPluginArgs $) {
        this.pluginId = $.pluginId;
        this.waitForHealthy = $.waitForHealthy;
        this.waitForRegistration = $.waitForRegistration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPluginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPluginArgs $;

        public Builder() {
            $ = new GetPluginArgs();
        }

        public Builder(GetPluginArgs defaults) {
            $ = new GetPluginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param pluginId `(string)` ID of the plugin.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(Output<String> pluginId) {
            $.pluginId = pluginId;
            return this;
        }

        /**
         * @param pluginId `(string)` ID of the plugin.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(String pluginId) {
            return pluginId(Output.of(pluginId));
        }

        /**
         * @param waitForHealthy `(boolean)` retry until the plugin exists and all controllers are healthy
         * 
         * @return builder
         * 
         */
        public Builder waitForHealthy(@Nullable Output<Boolean> waitForHealthy) {
            $.waitForHealthy = waitForHealthy;
            return this;
        }

        /**
         * @param waitForHealthy `(boolean)` retry until the plugin exists and all controllers are healthy
         * 
         * @return builder
         * 
         */
        public Builder waitForHealthy(Boolean waitForHealthy) {
            return waitForHealthy(Output.of(waitForHealthy));
        }

        /**
         * @param waitForRegistration `(boolean)` if the plugin doesn&#39;t exist, retry until it does
         * 
         * @return builder
         * 
         */
        public Builder waitForRegistration(@Nullable Output<Boolean> waitForRegistration) {
            $.waitForRegistration = waitForRegistration;
            return this;
        }

        /**
         * @param waitForRegistration `(boolean)` if the plugin doesn&#39;t exist, retry until it does
         * 
         * @return builder
         * 
         */
        public Builder waitForRegistration(Boolean waitForRegistration) {
            return waitForRegistration(Output.of(waitForRegistration));
        }

        public GetPluginArgs build() {
            if ($.pluginId == null) {
                throw new MissingRequiredPropertyException("GetPluginArgs", "pluginId");
            }
            return $;
        }
    }

}
