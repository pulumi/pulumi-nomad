// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.nomad.inputs.ProviderHeaderArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * URL of the root of the target Nomad agent.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return URL of the root of the target Nomad agent.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * A path to a PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
     * 
     */
    @Import(name="caFile")
    private @Nullable Output<String> caFile;

    /**
     * @return A path to a PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
     * 
     */
    public Optional<Output<String>> caFile() {
        return Optional.ofNullable(this.caFile);
    }

    /**
     * PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
     * 
     */
    @Import(name="caPem")
    private @Nullable Output<String> caPem;

    /**
     * @return PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
     * 
     */
    public Optional<Output<String>> caPem() {
        return Optional.ofNullable(this.caPem);
    }

    /**
     * A path to a PEM-encoded certificate provided to the remote agent; requires use of key_file or key_pem.
     * 
     */
    @Import(name="certFile")
    private @Nullable Output<String> certFile;

    /**
     * @return A path to a PEM-encoded certificate provided to the remote agent; requires use of key_file or key_pem.
     * 
     */
    public Optional<Output<String>> certFile() {
        return Optional.ofNullable(this.certFile);
    }

    /**
     * PEM-encoded certificate provided to the remote agent; requires use of key_file or key_pem.
     * 
     */
    @Import(name="certPem")
    private @Nullable Output<String> certPem;

    /**
     * @return PEM-encoded certificate provided to the remote agent; requires use of key_file or key_pem.
     * 
     */
    public Optional<Output<String>> certPem() {
        return Optional.ofNullable(this.certPem);
    }

    /**
     * The headers to send with each Nomad request.
     * 
     */
    @Import(name="headers", json=true)
    private @Nullable Output<List<ProviderHeaderArgs>> headers;

    /**
     * @return The headers to send with each Nomad request.
     * 
     */
    public Optional<Output<List<ProviderHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * HTTP basic auth configuration.
     * 
     */
    @Import(name="httpAuth")
    private @Nullable Output<String> httpAuth;

    /**
     * @return HTTP basic auth configuration.
     * 
     */
    public Optional<Output<String>> httpAuth() {
        return Optional.ofNullable(this.httpAuth);
    }

    /**
     * A set of environment variables that are ignored by the provider when configuring the Nomad API client.
     * 
     */
    @Import(name="ignoreEnvVars", json=true)
    private @Nullable Output<Map<String,Boolean>> ignoreEnvVars;

    /**
     * @return A set of environment variables that are ignored by the provider when configuring the Nomad API client.
     * 
     */
    public Optional<Output<Map<String,Boolean>>> ignoreEnvVars() {
        return Optional.ofNullable(this.ignoreEnvVars);
    }

    /**
     * A path to a PEM-encoded private key, required if cert_file or cert_pem is specified.
     * 
     */
    @Import(name="keyFile")
    private @Nullable Output<String> keyFile;

    /**
     * @return A path to a PEM-encoded private key, required if cert_file or cert_pem is specified.
     * 
     */
    public Optional<Output<String>> keyFile() {
        return Optional.ofNullable(this.keyFile);
    }

    /**
     * PEM-encoded private key, required if cert_file or cert_pem is specified.
     * 
     */
    @Import(name="keyPem")
    private @Nullable Output<String> keyPem;

    /**
     * @return PEM-encoded private key, required if cert_file or cert_pem is specified.
     * 
     */
    public Optional<Output<String>> keyPem() {
        return Optional.ofNullable(this.keyPem);
    }

    /**
     * Region of the target Nomad agent.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region of the target Nomad agent.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * ACL token secret for API requests.
     * 
     */
    @Import(name="secretId")
    private @Nullable Output<String> secretId;

    /**
     * @return ACL token secret for API requests.
     * 
     */
    public Optional<Output<String>> secretId() {
        return Optional.ofNullable(this.secretId);
    }

    /**
     * Skip TLS verification on client side.
     * 
     */
    @Import(name="skipVerify", json=true)
    private @Nullable Output<Boolean> skipVerify;

    /**
     * @return Skip TLS verification on client side.
     * 
     */
    public Optional<Output<Boolean>> skipVerify() {
        return Optional.ofNullable(this.skipVerify);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.address = $.address;
        this.caFile = $.caFile;
        this.caPem = $.caPem;
        this.certFile = $.certFile;
        this.certPem = $.certPem;
        this.headers = $.headers;
        this.httpAuth = $.httpAuth;
        this.ignoreEnvVars = $.ignoreEnvVars;
        this.keyFile = $.keyFile;
        this.keyPem = $.keyPem;
        this.region = $.region;
        this.secretId = $.secretId;
        this.skipVerify = $.skipVerify;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address URL of the root of the target Nomad agent.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address URL of the root of the target Nomad agent.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param caFile A path to a PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
         * 
         * @return builder
         * 
         */
        public Builder caFile(@Nullable Output<String> caFile) {
            $.caFile = caFile;
            return this;
        }

        /**
         * @param caFile A path to a PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
         * 
         * @return builder
         * 
         */
        public Builder caFile(String caFile) {
            return caFile(Output.of(caFile));
        }

        /**
         * @param caPem PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
         * 
         * @return builder
         * 
         */
        public Builder caPem(@Nullable Output<String> caPem) {
            $.caPem = caPem;
            return this;
        }

        /**
         * @param caPem PEM-encoded certificate authority used to verify the remote agent&#39;s certificate.
         * 
         * @return builder
         * 
         */
        public Builder caPem(String caPem) {
            return caPem(Output.of(caPem));
        }

        /**
         * @param certFile A path to a PEM-encoded certificate provided to the remote agent; requires use of key_file or key_pem.
         * 
         * @return builder
         * 
         */
        public Builder certFile(@Nullable Output<String> certFile) {
            $.certFile = certFile;
            return this;
        }

        /**
         * @param certFile A path to a PEM-encoded certificate provided to the remote agent; requires use of key_file or key_pem.
         * 
         * @return builder
         * 
         */
        public Builder certFile(String certFile) {
            return certFile(Output.of(certFile));
        }

        /**
         * @param certPem PEM-encoded certificate provided to the remote agent; requires use of key_file or key_pem.
         * 
         * @return builder
         * 
         */
        public Builder certPem(@Nullable Output<String> certPem) {
            $.certPem = certPem;
            return this;
        }

        /**
         * @param certPem PEM-encoded certificate provided to the remote agent; requires use of key_file or key_pem.
         * 
         * @return builder
         * 
         */
        public Builder certPem(String certPem) {
            return certPem(Output.of(certPem));
        }

        /**
         * @param headers The headers to send with each Nomad request.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<ProviderHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers The headers to send with each Nomad request.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<ProviderHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers The headers to send with each Nomad request.
         * 
         * @return builder
         * 
         */
        public Builder headers(ProviderHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param httpAuth HTTP basic auth configuration.
         * 
         * @return builder
         * 
         */
        public Builder httpAuth(@Nullable Output<String> httpAuth) {
            $.httpAuth = httpAuth;
            return this;
        }

        /**
         * @param httpAuth HTTP basic auth configuration.
         * 
         * @return builder
         * 
         */
        public Builder httpAuth(String httpAuth) {
            return httpAuth(Output.of(httpAuth));
        }

        /**
         * @param ignoreEnvVars A set of environment variables that are ignored by the provider when configuring the Nomad API client.
         * 
         * @return builder
         * 
         */
        public Builder ignoreEnvVars(@Nullable Output<Map<String,Boolean>> ignoreEnvVars) {
            $.ignoreEnvVars = ignoreEnvVars;
            return this;
        }

        /**
         * @param ignoreEnvVars A set of environment variables that are ignored by the provider when configuring the Nomad API client.
         * 
         * @return builder
         * 
         */
        public Builder ignoreEnvVars(Map<String,Boolean> ignoreEnvVars) {
            return ignoreEnvVars(Output.of(ignoreEnvVars));
        }

        /**
         * @param keyFile A path to a PEM-encoded private key, required if cert_file or cert_pem is specified.
         * 
         * @return builder
         * 
         */
        public Builder keyFile(@Nullable Output<String> keyFile) {
            $.keyFile = keyFile;
            return this;
        }

        /**
         * @param keyFile A path to a PEM-encoded private key, required if cert_file or cert_pem is specified.
         * 
         * @return builder
         * 
         */
        public Builder keyFile(String keyFile) {
            return keyFile(Output.of(keyFile));
        }

        /**
         * @param keyPem PEM-encoded private key, required if cert_file or cert_pem is specified.
         * 
         * @return builder
         * 
         */
        public Builder keyPem(@Nullable Output<String> keyPem) {
            $.keyPem = keyPem;
            return this;
        }

        /**
         * @param keyPem PEM-encoded private key, required if cert_file or cert_pem is specified.
         * 
         * @return builder
         * 
         */
        public Builder keyPem(String keyPem) {
            return keyPem(Output.of(keyPem));
        }

        /**
         * @param region Region of the target Nomad agent.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of the target Nomad agent.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretId ACL token secret for API requests.
         * 
         * @return builder
         * 
         */
        public Builder secretId(@Nullable Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId ACL token secret for API requests.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param skipVerify Skip TLS verification on client side.
         * 
         * @return builder
         * 
         */
        public Builder skipVerify(@Nullable Output<Boolean> skipVerify) {
            $.skipVerify = skipVerify;
            return this;
        }

        /**
         * @param skipVerify Skip TLS verification on client side.
         * 
         * @return builder
         * 
         */
        public Builder skipVerify(Boolean skipVerify) {
            return skipVerify(Output.of(skipVerify));
        }

        public ProviderArgs build() {
            return $;
        }
    }

}
