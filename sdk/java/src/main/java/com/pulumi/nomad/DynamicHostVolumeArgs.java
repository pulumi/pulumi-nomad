// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.nomad.inputs.DynamicHostVolumeCapabilityArgs;
import com.pulumi.nomad.inputs.DynamicHostVolumeConstraintArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DynamicHostVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final DynamicHostVolumeArgs Empty = new DynamicHostVolumeArgs();

    /**
     * `(block: &lt;optional&gt;)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    @Import(name="capabilities", required=true)
    private Output<List<DynamicHostVolumeCapabilityArgs>> capabilities;

    /**
     * @return `(block: &lt;optional&gt;)` - Option for validating the capability of a
     * volume. Each capability block has the following attributes:
     * 
     */
    public Output<List<DynamicHostVolumeCapabilityArgs>> capabilities() {
        return this.capabilities;
    }

    /**
     * `(string: &lt;optional&gt;)` - Option for requesting a maximum
     * capacity, in bytes. The capacity of a volume may be the physical size of a
     * disk, or a quota, depending on the plugin. The specific size of the resulting
     * volume is somewhere between `capacity_min` and `capacity_max`; the exact
     * behavior is up to the plugin. If you want to specify an exact size, set
     * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
     * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
     * may ignore this field.
     * 
     */
    @Import(name="capacityMax")
    private @Nullable Output<String> capacityMax;

    /**
     * @return `(string: &lt;optional&gt;)` - Option for requesting a maximum
     * capacity, in bytes. The capacity of a volume may be the physical size of a
     * disk, or a quota, depending on the plugin. The specific size of the resulting
     * volume is somewhere between `capacity_min` and `capacity_max`; the exact
     * behavior is up to the plugin. If you want to specify an exact size, set
     * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
     * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
     * may ignore this field.
     * 
     */
    public Optional<Output<String>> capacityMax() {
        return Optional.ofNullable(this.capacityMax);
    }

    /**
     * `(string: &lt;optional&gt;)` - Option for requesting a minimum
     * capacity, in bytes. The capacity of a volume may be the physical size of a
     * disk, or a quota, depending on the plugin. The specific size of the resulting
     * volume is somewhere between `capacity_min` and `capacity_max`; the exact
     * behavior is up to the plugin. If you want to specify an exact size, set
     * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
     * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
     * may ignore this field.
     * 
     */
    @Import(name="capacityMin")
    private @Nullable Output<String> capacityMin;

    /**
     * @return `(string: &lt;optional&gt;)` - Option for requesting a minimum
     * capacity, in bytes. The capacity of a volume may be the physical size of a
     * disk, or a quota, depending on the plugin. The specific size of the resulting
     * volume is somewhere between `capacity_min` and `capacity_max`; the exact
     * behavior is up to the plugin. If you want to specify an exact size, set
     * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
     * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
     * may ignore this field.
     * 
     */
    public Optional<Output<String>> capacityMin() {
        return Optional.ofNullable(this.capacityMin);
    }

    /**
     * `(block: &lt;optional&gt;)` - A restriction on the eligible nodes where
     * a volume can be created, similar to the [`constraint`][] block on a Nomad job
     * specification.. You can provide multiple `constraint` blocks to add more
     * constraints. Each constraint block has the following attributes.
     * 
     */
    @Import(name="constraints")
    private @Nullable Output<List<DynamicHostVolumeConstraintArgs>> constraints;

    /**
     * @return `(block: &lt;optional&gt;)` - A restriction on the eligible nodes where
     * a volume can be created, similar to the [`constraint`][] block on a Nomad job
     * specification.. You can provide multiple `constraint` blocks to add more
     * constraints. Each constraint block has the following attributes.
     * 
     */
    public Optional<Output<List<DynamicHostVolumeConstraintArgs>>> constraints() {
        return Optional.ofNullable(this.constraints);
    }

    /**
     * `(string: &lt;required&gt;)` - The name of the volume, which is used as the
     * [`volume.source`][volume_source] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return `(string: &lt;required&gt;)` - The name of the volume, which is used as the
     * [`volume.source`][volume_source] field in job specifications that claim this
     * volume. Host volume names must be unique per node. Names are visible to any
     * user with `node:read` ACL, even across namespaces, so they should not be
     * treated as sensitive values.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `(string: &lt;optional&gt;)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `&#34;default&#34;` if unset.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return `(string: &lt;optional&gt;)` - The namespace of the volume. This field
     * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
     * environment variable. Defaults to `&#34;default&#34;` if unset.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * `(string: &lt;optional&gt;)` - A specific node where you would like the
     * volume to be created.
     * 
     */
    @Import(name="nodeId")
    private @Nullable Output<String> nodeId;

    /**
     * @return `(string: &lt;optional&gt;)` - A specific node where you would like the
     * volume to be created.
     * 
     */
    public Optional<Output<String>> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }

    /**
     * `(string: &lt;optional&gt;)` - A specific node pool where you would like
     * the volume to be created. If you also provide `node_id`, the node must be in the
     * provided `node_pool`.
     * 
     */
    @Import(name="nodePool")
    private @Nullable Output<String> nodePool;

    /**
     * @return `(string: &lt;optional&gt;)` - A specific node pool where you would like
     * the volume to be created. If you also provide `node_id`, the node must be in the
     * provided `node_pool`.
     * 
     */
    public Optional<Output<String>> nodePool() {
        return Optional.ofNullable(this.nodePool);
    }

    /**
     * `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
     * passed directly to the plugin to configure the volume. The details of these
     * parameters are specific to the plugin.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Plugin ID
     * 
     */
    @Import(name="pluginId", required=true)
    private Output<String> pluginId;

    /**
     * @return Plugin ID
     * 
     */
    public Output<String> pluginId() {
        return this.pluginId;
    }

    private DynamicHostVolumeArgs() {}

    private DynamicHostVolumeArgs(DynamicHostVolumeArgs $) {
        this.capabilities = $.capabilities;
        this.capacityMax = $.capacityMax;
        this.capacityMin = $.capacityMin;
        this.constraints = $.constraints;
        this.name = $.name;
        this.namespace = $.namespace;
        this.nodeId = $.nodeId;
        this.nodePool = $.nodePool;
        this.parameters = $.parameters;
        this.pluginId = $.pluginId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynamicHostVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynamicHostVolumeArgs $;

        public Builder() {
            $ = new DynamicHostVolumeArgs();
        }

        public Builder(DynamicHostVolumeArgs defaults) {
            $ = new DynamicHostVolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - Option for validating the capability of a
         * volume. Each capability block has the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder capabilities(Output<List<DynamicHostVolumeCapabilityArgs>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - Option for validating the capability of a
         * volume. Each capability block has the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<DynamicHostVolumeCapabilityArgs> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param capabilities `(block: &lt;optional&gt;)` - Option for validating the capability of a
         * volume. Each capability block has the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder capabilities(DynamicHostVolumeCapabilityArgs... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param capacityMax `(string: &lt;optional&gt;)` - Option for requesting a maximum
         * capacity, in bytes. The capacity of a volume may be the physical size of a
         * disk, or a quota, depending on the plugin. The specific size of the resulting
         * volume is somewhere between `capacity_min` and `capacity_max`; the exact
         * behavior is up to the plugin. If you want to specify an exact size, set
         * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
         * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
         * may ignore this field.
         * 
         * @return builder
         * 
         */
        public Builder capacityMax(@Nullable Output<String> capacityMax) {
            $.capacityMax = capacityMax;
            return this;
        }

        /**
         * @param capacityMax `(string: &lt;optional&gt;)` - Option for requesting a maximum
         * capacity, in bytes. The capacity of a volume may be the physical size of a
         * disk, or a quota, depending on the plugin. The specific size of the resulting
         * volume is somewhere between `capacity_min` and `capacity_max`; the exact
         * behavior is up to the plugin. If you want to specify an exact size, set
         * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
         * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
         * may ignore this field.
         * 
         * @return builder
         * 
         */
        public Builder capacityMax(String capacityMax) {
            return capacityMax(Output.of(capacityMax));
        }

        /**
         * @param capacityMin `(string: &lt;optional&gt;)` - Option for requesting a minimum
         * capacity, in bytes. The capacity of a volume may be the physical size of a
         * disk, or a quota, depending on the plugin. The specific size of the resulting
         * volume is somewhere between `capacity_min` and `capacity_max`; the exact
         * behavior is up to the plugin. If you want to specify an exact size, set
         * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
         * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
         * may ignore this field.
         * 
         * @return builder
         * 
         */
        public Builder capacityMin(@Nullable Output<String> capacityMin) {
            $.capacityMin = capacityMin;
            return this;
        }

        /**
         * @param capacityMin `(string: &lt;optional&gt;)` - Option for requesting a minimum
         * capacity, in bytes. The capacity of a volume may be the physical size of a
         * disk, or a quota, depending on the plugin. The specific size of the resulting
         * volume is somewhere between `capacity_min` and `capacity_max`; the exact
         * behavior is up to the plugin. If you want to specify an exact size, set
         * `capacity_min` and `capacity_max` to the same value. Accepts human-friendly
         * suffixes such as `&#34;100GiB&#34;`. Plugins that cannot restrict the size of volumes
         * may ignore this field.
         * 
         * @return builder
         * 
         */
        public Builder capacityMin(String capacityMin) {
            return capacityMin(Output.of(capacityMin));
        }

        /**
         * @param constraints `(block: &lt;optional&gt;)` - A restriction on the eligible nodes where
         * a volume can be created, similar to the [`constraint`][] block on a Nomad job
         * specification.. You can provide multiple `constraint` blocks to add more
         * constraints. Each constraint block has the following attributes.
         * 
         * @return builder
         * 
         */
        public Builder constraints(@Nullable Output<List<DynamicHostVolumeConstraintArgs>> constraints) {
            $.constraints = constraints;
            return this;
        }

        /**
         * @param constraints `(block: &lt;optional&gt;)` - A restriction on the eligible nodes where
         * a volume can be created, similar to the [`constraint`][] block on a Nomad job
         * specification.. You can provide multiple `constraint` blocks to add more
         * constraints. Each constraint block has the following attributes.
         * 
         * @return builder
         * 
         */
        public Builder constraints(List<DynamicHostVolumeConstraintArgs> constraints) {
            return constraints(Output.of(constraints));
        }

        /**
         * @param constraints `(block: &lt;optional&gt;)` - A restriction on the eligible nodes where
         * a volume can be created, similar to the [`constraint`][] block on a Nomad job
         * specification.. You can provide multiple `constraint` blocks to add more
         * constraints. Each constraint block has the following attributes.
         * 
         * @return builder
         * 
         */
        public Builder constraints(DynamicHostVolumeConstraintArgs... constraints) {
            return constraints(List.of(constraints));
        }

        /**
         * @param name `(string: &lt;required&gt;)` - The name of the volume, which is used as the
         * [`volume.source`][volume_source] field in job specifications that claim this
         * volume. Host volume names must be unique per node. Names are visible to any
         * user with `node:read` ACL, even across namespaces, so they should not be
         * treated as sensitive values.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name `(string: &lt;required&gt;)` - The name of the volume, which is used as the
         * [`volume.source`][volume_source] field in job specifications that claim this
         * volume. Host volume names must be unique per node. Names are visible to any
         * user with `node:read` ACL, even across namespaces, so they should not be
         * treated as sensitive values.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace `(string: &lt;optional&gt;)` - The namespace of the volume. This field
         * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
         * environment variable. Defaults to `&#34;default&#34;` if unset.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace `(string: &lt;optional&gt;)` - The namespace of the volume. This field
         * overrides the namespace provided by the `-namespace` flag or `NOMAD_NAMESPACE`
         * environment variable. Defaults to `&#34;default&#34;` if unset.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param nodeId `(string: &lt;optional&gt;)` - A specific node where you would like the
         * volume to be created.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(@Nullable Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId `(string: &lt;optional&gt;)` - A specific node where you would like the
         * volume to be created.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        /**
         * @param nodePool `(string: &lt;optional&gt;)` - A specific node pool where you would like
         * the volume to be created. If you also provide `node_id`, the node must be in the
         * provided `node_pool`.
         * 
         * @return builder
         * 
         */
        public Builder nodePool(@Nullable Output<String> nodePool) {
            $.nodePool = nodePool;
            return this;
        }

        /**
         * @param nodePool `(string: &lt;optional&gt;)` - A specific node pool where you would like
         * the volume to be created. If you also provide `node_id`, the node must be in the
         * provided `node_pool`.
         * 
         * @return builder
         * 
         */
        public Builder nodePool(String nodePool) {
            return nodePool(Output.of(nodePool));
        }

        /**
         * @param parameters `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
         * passed directly to the plugin to configure the volume. The details of these
         * parameters are specific to the plugin.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters `(map&lt;string|string&gt;: &lt;optional&gt;)` - A key-value map of strings
         * passed directly to the plugin to configure the volume. The details of these
         * parameters are specific to the plugin.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param pluginId Plugin ID
         * 
         * @return builder
         * 
         */
        public Builder pluginId(Output<String> pluginId) {
            $.pluginId = pluginId;
            return this;
        }

        /**
         * @param pluginId Plugin ID
         * 
         * @return builder
         * 
         */
        public Builder pluginId(String pluginId) {
            return pluginId(Output.of(pluginId));
        }

        public DynamicHostVolumeArgs build() {
            if ($.capabilities == null) {
                throw new MissingRequiredPropertyException("DynamicHostVolumeArgs", "capabilities");
            }
            if ($.pluginId == null) {
                throw new MissingRequiredPropertyException("DynamicHostVolumeArgs", "pluginId");
            }
            return $;
        }
    }

}
