// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nomad.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DynamicHostVolumeConstraintArgs extends com.pulumi.resources.ResourceArgs {

    public static final DynamicHostVolumeConstraintArgs Empty = new DynamicHostVolumeConstraintArgs();

    /**
     * `(string)` - The [node attribute][] to check for the constraint.
     * 
     */
    @Import(name="attribute", required=true)
    private Output<String> attribute;

    /**
     * @return `(string)` - The [node attribute][] to check for the constraint.
     * 
     */
    public Output<String> attribute() {
        return this.attribute;
    }

    /**
     * `(string)`- The operator to use in the comparison.
     * 
     */
    @Import(name="operator")
    private @Nullable Output<String> operator;

    /**
     * @return `(string)`- The operator to use in the comparison.
     * 
     */
    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * `(string)` - The value of the attribute to compare against.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return `(string)` - The value of the attribute to compare against.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private DynamicHostVolumeConstraintArgs() {}

    private DynamicHostVolumeConstraintArgs(DynamicHostVolumeConstraintArgs $) {
        this.attribute = $.attribute;
        this.operator = $.operator;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynamicHostVolumeConstraintArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynamicHostVolumeConstraintArgs $;

        public Builder() {
            $ = new DynamicHostVolumeConstraintArgs();
        }

        public Builder(DynamicHostVolumeConstraintArgs defaults) {
            $ = new DynamicHostVolumeConstraintArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attribute `(string)` - The [node attribute][] to check for the constraint.
         * 
         * @return builder
         * 
         */
        public Builder attribute(Output<String> attribute) {
            $.attribute = attribute;
            return this;
        }

        /**
         * @param attribute `(string)` - The [node attribute][] to check for the constraint.
         * 
         * @return builder
         * 
         */
        public Builder attribute(String attribute) {
            return attribute(Output.of(attribute));
        }

        /**
         * @param operator `(string)`- The operator to use in the comparison.
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator `(string)`- The operator to use in the comparison.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param value `(string)` - The value of the attribute to compare against.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value `(string)` - The value of the attribute to compare against.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public DynamicHostVolumeConstraintArgs build() {
            if ($.attribute == null) {
                throw new MissingRequiredPropertyException("DynamicHostVolumeConstraintArgs", "attribute");
            }
            return $;
        }
    }

}
